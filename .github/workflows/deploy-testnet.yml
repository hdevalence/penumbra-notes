# One day, this would be better handled via pushing Docker images up
# and using Kubernetes or similar, but this will work for now.
name: Deploy Testnet
on:
  workflow_dispatch:
  push:
    tags:
      - '[0-9][0-9][0-9]-*'

jobs:

  deploy:
    name: Trigger Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 30
    environment: testnet
    steps:
    - name: Get the git tag
      id: get_tag
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: Update git repository
      uses: appleboy/ssh-action@master
      env:
        TESTNET_HOST: ${{ secrets.TESTNET_HOST }}
        VERSION: ${{ steps.get_tag.outputs.VERSION }}
      with:
        host: ${{ secrets.TESTNET_HOST }}
        username: ${{ secrets.TUNNEL_USERNAME }}
        key: ${{ secrets.ID_ED25519 }}
        port: ${{ secrets.TUNNEL_PORT }}
        envs: TESTNET_HOST
        script: |
          cd ~/penumbra
          git reset --hard
          git fetch --all --tags
          git pull
          git checkout ${VERSION}
          cargo update
    - name: Delete existing state
      uses: appleboy/ssh-action@master
      env:
        TESTNET_HOST: ${{ secrets.TESTNET_HOST }}
      with:
        host: ${{ secrets.TESTNET_HOST }}
        username: ${{ secrets.TUNNEL_USERNAME }}
        key: ${{ secrets.ID_ED25519 }}
        port: ${{ secrets.TUNNEL_PORT }}
        envs: TESTNET_HOST
        script: |
          cd ~/penumbra
          TESTNET_HOST=$TESTNET_HOST docker-compose -f docker-compose.yml -f docker-compose.prod.yml stop
          rm -rf ~/.penumbra/testnet_data/
          docker system prune -f
    - name: Update Grafana configs and data
      uses: appleboy/ssh-action@master
      env:
        TESTNET_HOST: ${{ secrets.TESTNET_HOST }}
        GRAFANA_CLIENT_ID: ${{ secrets.GRAFANA_CLIENT_ID }}
        GRAFANA_CLIENT_SECRET: ${{ secrets.GRAFANA_CLIENT_SECRET }}
        GRAFANA_SECRET: ${{ secrets.GRAFANA_SECRET }}
      with:
        host: ${{ secrets.TESTNET_HOST }}
        username: ${{ secrets.TUNNEL_USERNAME }}
        key: ${{ secrets.ID_ED25519 }}
        port: ${{ secrets.TUNNEL_PORT }}
        envs: TESTNET_HOST,GRAFANA_CLIENT_SECRET,GRAFANA_CLIENT_ID,GRAFANA_SECRET
        script: |
          cd ~/penumbra
          sed 's/CLIENT_SECRET/'${GRAFANA_CLIENT_SECRET}'/' config/grafana/grafana.prod.ini | sed 's/CLIENT_ID/'${GRAFANA_CLIENT_ID}'/' | sed 's/DOMAIN/'${TESTNET_HOST}'/' | sed 's/SECRET_KEY/'${GRAFANA_SECRET}'/' > /tmp/grafana.ini
          cat /tmp/grafana.ini
          docker cp /tmp/grafana.ini penumbra_grafana_1:/etc/grafana/grafana.ini
          TESTNET_HOST=$TESTNET_HOST docker-compose -f docker-compose.yml -f docker-compose.prod.yml up --build -d grafana
          rm /tmp/grafana.ini
    - name: Generate testnet
      uses: appleboy/ssh-action@master
      env:
        TESTNET_HOST: ${{ secrets.TESTNET_HOST }}
      with:
        host: ${{ secrets.TESTNET_HOST }}
        username: ${{ secrets.TUNNEL_USERNAME }}
        key: ${{ secrets.ID_ED25519 }}
        port: ${{ secrets.TUNNEL_PORT }}
        envs: TESTNET_HOST
        script: |
          cd ~/penumbra
          /root/.cargo/bin/cargo run --release --bin pd -- generate-testnet --preserve-chain-id
          chmod -R 777 ~/.penumbra/testnet_data
    - name: Restart deployment
      uses: appleboy/ssh-action@master
      timeout-minutes: 30
      env:
        TESTNET_HOST: ${{ secrets.TESTNET_HOST }}
      with:
        host: ${{ secrets.TESTNET_HOST }}
        username: ${{ secrets.TUNNEL_USERNAME }}
        key: ${{ secrets.ID_ED25519 }}
        port: ${{ secrets.TUNNEL_PORT }}
        command_timeout: 30m
        envs: TESTNET_HOST
        script: |
          cd ~/penumbra
          TESTNET_HOST=$TESTNET_HOST docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build
