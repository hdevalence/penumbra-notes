on: [pull_request]
# The WASM compatibility workflow exists outside the suite of "Rust"
# workflows because the WASM crate is intentionally excluded from
# the parent workspace, in order to test how a downstream developer
# will work with our dependencies.
name: WASM compatibility
jobs:
  wasm:
    name: Build WASM
    runs-on: buildjet-16vcpu-ubuntu-2004
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: true

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: wasm32-unknown-unknown
          override: true

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            . -> target
            wasm

      # We can't use the GH action for cargo because it doesn't custom working directory.
      # Duplicate fmt check from Rust CI config, due to separate workspace.
      - run: rustup component add rustfmt
      - name: cargo fmt
        run:
          cargo fmt --all -- --check
        working-directory: crates/wasm

      - name: build wasm32 target
        run:
          cargo build --release --target wasm32-unknown-unknown
        working-directory: crates/wasm

      # Download prebuilt binary for wasm-pack; faster than `cargo install`.
      - uses: jetli/wasm-pack-action@v0.4.0
        with:
          version: 'latest'

      # `wasm-pack build` will automatically compile to target wasm32-unknown-unknown,
      # but we run it as a separate task to isolate potential failures in the build pipeline.
      - name: run wasm-pack build
        run:
          wasm-pack build
        working-directory: crates/wasm
