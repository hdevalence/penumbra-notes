version: "3.7"
# docker-compose oerrides for local development.
#
# this modifies the docker-compose configuration for locally testing and
# debugging the Penumbra daemon. these configurations may not be desirable when
# running in production, so the main `docker-compose.yml` defines a canonical
# configuration for prod deployments.
services:
  # for local development, configure the penumbra daemon with more logging.
  pd-node0:
    environment:
      - RUST_LOG=${RUST_LOG:-warn,pd=debug,penumbra=debug,jmt=debug}
    build:
      # Use the dev Dockerfile which has better cacheing and doesn't use the release
      # target
      dockerfile: Dockerfile.dev
    volumes:
      - ~/.penumbra/testnet_data/node0/pd:/pd
    command: pd start --host 0.0.0.0 -r /pd/rocksdb

  # add prometheus and grafana
  #
  # in production, users will want to bring their own monitoring stack, rather
  # than running a separate prometheus and grafana instance on every node.
  prometheus:
    image: "prom/prometheus:latest"
    ports:
      - '9090:9090'
    volumes:
      - "./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
      - "prometheus_data:/prometheus"
    networks:
      # prometheus needs to be on the local network for scraping metrics from
      # tendermint and penumbra.
      - localnet
      - monitoring

  grafana:
    image: "grafana/grafana:latest"
    ports:
      - '3000'
    volumes:
      # this grafana config is intended for local development and disables auth
      # etc. in production, users will generally want to configure a centralized
      # grafana instance...
      - "./config/grafana/provisioning:/etc/grafana/provisioning:ro"
      - "./config/grafana.ini:/etc/grafana/config.ini:ro"
      # mount the dashboards dir as read-write so we can add new dashboards
      # using the Grafana web UI.
      - "./config/grafana/dashboards:/var/lib/grafana/dashboards:rw"
    networks:
      - monitoring
    depends_on:
      # don't start grafana until prometheus is up
      - prometheus

volumes:
  prometheus_data: {}

networks:
  # add a separate network for grafana and prometheus to talk to each other.
  monitoring: {}
