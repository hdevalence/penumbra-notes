version: "3.7"
# docker-compose overrides for production.
services:
  pd-node0:
    build:
      context: ../../
      dockerfile: deployments/containerfiles/Dockerfile.old
    command:
      [
        "bash",
        "-c",
        "/bin/pd start --host 0.0.0.0 --home /pd --tendermint-addr http://tendermint-node0:26657"
      ]
    logging:
      driver: "json-file"
      options:
        max-file: "10"
        max-size: "1g"

  # add prometheus and grafana
  #
  # in production, users will want to bring their own monitoring stack, rather
  # than running a separate prometheus and grafana instance on every node.
  prometheus:
    image: "docker.io/prom/prometheus:latest"
    ports:
      - '9090:9090'
    volumes:
      - "../config/prometheus.yml:/etc/prometheus/prometheus.yml:ro"
      - "prometheus_data:/prometheus"
    networks:
      # prometheus needs to be on the local network for scraping metrics from
      # tendermint and penumbra.
      - localnet
      - monitoring

  grafana:
    build:
      context: ../../
      dockerfile: deployments/containerfiles/Dockerfile-grafana
    ports:
      - '3000'
    networks:
      - monitoring
    depends_on:
      # don't start grafana until prometheus is up
      - prometheus

  # Caddy provides TLS termination for the Grafana web service
  caddy:
    image: docker.io/caddy:2-alpine
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../config/Caddyfile:/etc/caddy/Caddyfile
      - /root/caddy/data:/data
      - /root/caddy/config:/config
    networks:
      - monitoring
    environment:
      # Directly pass the TESTNET_HOST env var to the caddy container.
      # We set these in the GitHub Actions environment, as well as in
      # `/etc/profile.d/penumbra.sh` on the testnet servers.
      - TESTNET_HOST


volumes:
  prometheus_data: {}
  grafana_configs: {}
  grafana_data: {}

networks:
  # add a separate network for grafana and prometheus to talk to each other.
  monitoring: {}
