#!/bin/bash
# CI script to deploy a point-release to a Penumbra network, modifying
# existing versions while preserving state. Does *not* perform a migration.
# At a fundamental level, this script represents logic broken out from the
# catch-all 'ci.sh' script.
set -euo pipefail

# Reference the usual vars.
IMAGE="${IMAGE:-ghcr.io/penumbra-zone/penumbra}"
# Force explicit version declaration
TO_VERSION="${TO_VERSION:-}"
if [[ -z "$TO_VERSION" ]] ; then
    >&2 echo "ERROR: TO_VERSION must be set with point-release version to deploy"
    exit 1
fi

HELM_RELEASE="${HELM_RELEASE:-penumbra-devnet}"

# Check that the network we're trying to configure has a valid config.
HELMFILE_MANIFEST="./helmfile.d/${HELM_RELEASE}.yaml"
if [[ ! -e "$HELMFILE_MANIFEST" ]]; then
    >&2 echo "ERROR: helm release name '$HELM_RELEASE' not supported"
    >&2 echo "Consider creating '$HELMFILE_MANIFEST'"
    exit 1
fi

# Bump the version of pd running for the deployment, across all
# fullnodes and validators. Allow the cluster to reconcile the changes
# by terminating and creating pods to match. Does *not* alter chain state.
# Allows us to handle "patch" versions.
function update_image_for_running_deployment() {
    kubectl set image statefulset \
        -l "app.kubernetes.io/part-of=${HELM_RELEASE}, app.kubernetes.io/component in (fullnode, genesis-validator)" \
        "pd=${IMAGE}:${TO_VERSION}"
    # Wait for rollout to complete. Will block until pods are marked Ready.
    kubectl rollout status statefulset \
        -l "app.kubernetes.io/part-of=${HELM_RELEASE}, app.kubernetes.io/component in (fullnode, genesis-validator)"
}

function main() {
    >&2 echo "Performing point-release of '$HELM_RELEASE' to ${TO_VERSION}..."
    sleep 2
    update_image_for_running_deployment
}

main
