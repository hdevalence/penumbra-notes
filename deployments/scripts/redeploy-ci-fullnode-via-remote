#!/bin/bash
# CI script to manage a standalone fullnode, created in order to exercise
# direct serving of pd. This script is intended to executed on the remote host
# that serves `pd`, triggered from a CI runner over SSH.
set -euo pipefail


# Unpack args.
if [[ $# -lt 2 ]] ; then
    >&2 echo "ERROR: required arguments not specified."
    >&2 echo "Usage: $0 <PENUMBRA_VERSION> <PENUMBRA_ENVIRONMENT>"
    exit 1
fi
PENUMBRA_VERSION="${1:-}"
PENUMBRA_ENVIRONMENT="${2:-}"
shift 2
if [[ "$PENUMBRA_ENVIRONMENT" = "penumbra-preview" ]] ; then
    pd_bootstrap_url="https://rpc.testnet-preview.penumbra.zone"
elif [[ "$PENUMBRA_ENVIRONMENT" = "penumbra-testnet" ]] ; then
    pd_bootstrap_url="https://rpc.testnet.penumbra.zone"
else
    >&2 echo "ERROR: unsupported PENUMBRA_ENVIRONMENT: '$PENUMBRA_ENVIRONMENT'"
    exit 2
fi

# Additional sanity-check to ensure we're running in the proper CI context.
if ! getent passwd | grep -q "^penumbra:" ; then
    >&2 echo "ERROR: 'penumbra' user not found."
    >&2 echo "This script should only be run within a dedicated CI box."
    exit 3
fi

# Take down running service prior to maintenance.
echo "Stopping running services..."
sudo systemctl stop cometbft penumbra

# Pluck out recently built `pd` from packaged container.
# We reuse existing build artifacts to ensure what's deployed it what was built,
# and it has the nice benefit of being faster, because we don't have to rebuild
# the same gitref on a slower remote host.
echo "Fetching latest version of pd..."
container_img="ghcr.io/penumbra-zone/penumbra:${PENUMBRA_VERSION}"
podman pull "$container_img"
container_id="$(podman run --detach "$container_img" sleep infinity)"
f="$(mktemp)"
podman cp "${container_id}:/usr/bin/pd" "$f"
podman kill "$container_id"
sudo mv -v -f "$f" /usr/local/bin/pd

# Clean up container storage, which will grow indefinitely; mostly only a problem for preview,
# but we still don't want to fill up disks.
podman system prune --force

# Back up ACME dir, so we don't hit ratelimit requesting new certs.
sudo rm -rf /opt/penumbra-ci
acme_cache="/home/penumbra/.penumbra/testnet_data/node0/pd/tokio_rustls_acme_cache"
if [[ -d "$acme_cache" ]]; then
    echo "Backing up ACME certificate directory..."
    sudo mkdir -p /opt/penumbra-ci
    sudo mv "$acme_cache" /opt/penumbra-ci/
else
    >&2 echo "WARNING: ACME cache directory not found: $acme_cache"
    # don't exit
    # exit 4
fi

# The pd operations must be run specifically as "penumbra" user.
# Nuke state, rejoin.
echo "Resetting node state..."
sudo -u penumbra pd testnet unsafe-reset-all
# Using "oumuamua" has moniker to connote that this node is "out there", i.e. separate
# from the standard fullnode deployments, and also it's cutely technically a celestial body.
sudo -u penumbra pd testnet join --moniker oumuamua "$pd_bootstrap_url"

# ACME cache dir may not be present, e.g. on a first deploy.
if [[ -d "/opt/penumbra-ci/$(basename "$acme_cache")" ]] ; then
    echo "Restoring ACME dir prior to service start..."
    sudo mv -v "/opt/penumbra-ci/$(basename "$acme_cache")" "$acme_cache"
fi
sudo chown -R penumbra: /home/penumbra/.penumbra

# Bring service back up.
echo "Bringing services back up..."
sudo systemctl daemon-reload
sudo systemctl restart penumbra cometbft
echo "Verifying that the services are running:"
sleep 5
printf 'penumbra: '
sudo systemctl is-active penumbra
printf 'cometbft: '
sudo systemctl is-active cometbft
