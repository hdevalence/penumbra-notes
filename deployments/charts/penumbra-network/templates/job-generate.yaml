{{ $count := (.Values.network.num_validators | int) }}
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "penumbra-network.fullname" . }}-pd-testnet-generate
  labels:
    app.kubernetes.io/component: genesis-generator
    {{- include "penumbra-network.labels" . | nindent 4 }}
  annotations:
    # Use a pre-install hook, to create genesis before validators are deployed.
    "helm.sh/hook": pre-install
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
    "helm.sh/hook-weight": "40"
spec:
  template:
    metadata:
      name: {{ include "penumbra-network.fullname" . }}-pd-testnet-generate
      labels:
        app.kubernetes.io/component: genesis-generator
        {{- include "penumbra-network.labels" . | nindent 4 }}
    spec:
      restartPolicy: Never
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: shared-config
          persistentVolumeClaim:
            claimName: {{ include "penumbra-network.fullname" . }}-shared-config

      # Prepare config volumes for each validator, so we can copy per-val dirs
      # to each PV after network generation.
      {{ range $i,$e := until $count }}
      {{ $val_name := printf "%s-val-%d" (include "penumbra-network.fullname" $) $i }}
      # The `pvc_name` must match the volumes created by the StatefulSet.
      {{ $pvc_name := printf "penumbra-config-%s" $val_name }}
        - name: {{ $val_name }}-config
      {{- if $.Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ $pvc_name }}
      {{- else }}
          emptyDir: {}
      {{- end }}
      {{- end }}

        # Use custom `--validators-input-file` JSON.
        - name: shared-config-vals
          configMap:
            name: {{ include "penumbra-network.fullname" . }}-genesis-validators
            items:
              - key: "validators.json"
                path: "validators.json"

      containers:
        - name: pd
          securityContext:
            # Run as root during init, so we can chown to penumbra & cometbft uids.
            # The application itself will run as a normal user.
            runAsUser: 0
            runAsGroup: 0
            allowPrivilegeEscalation: true
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            {{- toYaml $.Values.containerEnv | nindent 12 }}
          command:
            - sh
            - -c
            - |
              set -eux
              find /penumbra-config/ | sort
              pd testnet --testnet-dir /penumbra-config/testnet_data generate \
                {{- if .Values.network.chain_id }}
                --chain-id {{ .Values.network.chain_id }} \
                {{- end }}
                {{- if .Values.network.preserve_chain_id }}
                --preserve-chain-id \
                {{- end }}
                {{- if .Values.network.epoch_duration }}
                --epoch-duration {{ .Values.network.epoch_duration }} \
                {{- end }}
                {{- if .Values.network.proposal_voting_blocks }}
                --proposal-voting-blocks {{ .Values.network.proposal_voting_blocks }} \
                {{- end }}
                --validators-input-file /penumbra/validators.json \
                {{- if .Values.network.external_addresses }}
                --external-addresses {{ .Values.network.external_addresses }}
                {{- end }}

              # copy validator configs to volume mounts
              {{ range $i,$e := until $count }}
              {{ $val_name := printf "%s-val-%d" (include "penumbra-network.fullname" $) $i }}

              >&2 printf 'Configuring validator %d/%d...\n' "{{ $i }}" "{{ $count }}"
              # rename subdir to "node0" so we don't have to look up val ordinal when specifying homedir.
              mv -v /penumbra-config/testnet_data/node{{ $i }} /penumbra-config/{{ $val_name }}/node0

              # set ownership for pd user
              chown -R 1000:1000 /penumbra-config/{{ $val_name }}

              # set ownership for cometbft configs to match cometbft container "tmuser" uid/gid
              chown -R 100:1000 /penumbra-config/{{ $val_name }}/node0/cometbft

              ls -lsR /penumbra-config
              {{ end }}

              echo "Network config generated, exiting"
              exit 0

          volumeMounts:
            - name: shared-config
              mountPath: /penumbra-config
            - name: shared-config-vals
              mountPath: /penumbra
              readOnly: true
            {{ range $i,$e := until $count }}
            {{ $val_name := printf "%s-val-%d" (include "penumbra-network.fullname" $) $i }}
            - name: {{ $val_name }}-config
              mountPath: /penumbra-config/{{ $val_name }}
            {{ end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
