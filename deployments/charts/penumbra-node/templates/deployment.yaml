{{- if .Values.only_lb_svc }}
{{- else }}
{{ $count := (.Values.nodes | len | int) }}
{{ range $i,$e := until $count }}
{{ $fn_name := printf "%s-fn-%d" $.Release.Name $i }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $fn_name }}
  labels:
    {{- include "penumbra-node.labels" $ | nindent 4 }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: {{ $fn_name }}
      "app.kubernetes.io/component": fullnode
      {{- include "penumbra-node.selectorLabels" $ | nindent 6 }}
  template:
    metadata:
      {{- with $.Values.podAnnotations }}
        {{- toYaml $ | nindent 8 }}
      {{- end }}
      labels:
        app: {{ $fn_name }}
        "app.kubernetes.io/component": fullnode
        {{- if $.Values.part_of }}
        "app.kubernetes.io/part-of": {{ $.Values.part_of }}
        {{- end }}
        {{- include "penumbra-node.selectorLabels" $ | nindent 8 }}
    spec:
      # Force the pods to different k8s nodes, so that egress ip is unique per Tendermint node.
      # Effectively limits the number of Penumbra nodes to the number of k8s nodes in the cluster.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                {{- if $.Values.part_of }}
                  - key: "app.kubernetes.io/part-of"
                    operator: In
                    values:
                      - {{ $.Values.part_of }}
                {{- end }}
                  - key: "app.kubernetes.io/component"
                    operator: In
                    values:
                      - fullnode
                      - genesis-validator
              topologyKey: kubernetes.io/hostname
      {{- with $.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml $ | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "penumbra-node.serviceAccountName" $ }}
      securityContext:
        {{- toYaml $.Values.podSecurityContext | nindent 8 }}
      volumes:
        - name: config
      {{- if $.Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ $fn_name }}-config
      {{- else }}
          emptyDir: {}
      {{- end }}
      initContainers:
        - name: {{ $.Chart.Name }}-init
          securityContext:
            # Run as root during init, so we can chown to penumbra & cometbft uids.
            # The application itself will run as a normal user.
            runAsUser: 0
            runAsGroup: 0
            allowPrivilegeEscalation: true
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          command:
            - sh
            - -c
            - |
              set -eux
              # we must write into a subdir of the volumeMount, because the "--testnet-dir" arg
              # to "pd testnet join" must point to a non-existent directory, and the volumeMount
              # will always exist.
              if ! test -d /penumbra-config/testnet_data ; then
                echo "No pre-existing testnet data, pulling fresh info"
                pd testnet --testnet-dir /penumbra-config/testnet_data join \
                  --tendermint-p2p-bind 0.0.0.0:26656 \
                  --tendermint-rpc-bind 0.0.0.0:26657 \
                  {{- $external_address := (index $.Values.nodes $i).external_address -}}
                  {{- with $external_address }}
                  --external-address {{ . | quote }} \
                  {{- end }}
                  {{- $moniker := (index $.Values.nodes $i).moniker -}}
                  {{- with $moniker }}
                  --moniker {{ . | quote }} \
                  {{- end }}
                  {{ $.Values.penumbra_bootstrap_node_tendermint_rpc_url }}
              fi

              # set ownership for pd user
              chown -R 1000:1000 /penumbra-config/testnet_data

              # apply external address. useful for a two-pass deploy, in which external ips
              # are created after first deploy.
              {{- with $external_address }}
              sed -i -e 's/external_address.*/external_address = "{{ $external_address }}"/' /penumbra-config/testnet_data/node0/tendermint/config/config.toml
              {{- end }}
              {{- with $moniker }}
              sed -i -e 's/moniker.*/moniker = "{{ $moniker }}"/' /penumbra-config/testnet_data/node0/tendermint/config/config.toml
              {{- end }}

              # set ownership for tendermint configs to match tendermint container "tmuser" uid/gid
              chown -R 100:1000 /penumbra-config/testnet_data/node0/tendermint

          volumeMounts:
            - name: config
              mountPath: /penumbra-config

      containers:
        - name: pd
          securityContext:
            {{- toYaml $.Values.securityContext | nindent 12 }}
          image: "{{ $.Values.image.repository }}:{{ $.Values.image.tag | default $.Chart.AppVersion }}"
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          command:
            - /usr/bin/pd
            - start
            - --grpc-bind
            - 0.0.0.0:8080
            - --metrics-bind
            - 0.0.0.0:9000
            - --home
            - /penumbra-config/testnet_data/node0/pd
          ports:
            - name: pd-grpc
              containerPort: 8080
              protocol: TCP
            - name: pd-metrics
              containerPort: 9000
              protocol: TCP
            - name: pd-abci
              containerPort: 26658
              protocol: TCP
          resources:
            {{- toYaml $.Values.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /penumbra-config
          readinessProbe:
            tcpSocket:
              port: pd-grpc
            timeoutSeconds: 10
            initialDelaySeconds: 10

        - name: cometbft
          securityContext:
            {{- toYaml $.Values.cometbft.securityContext | nindent 12 }}
          image: "{{ $.Values.cometbft.image.repository }}:{{ $.Values.cometbft.image.tag }}"
          imagePullPolicy: {{ $.Values.cometbft.image.pullPolicy }}
          command:
            - cometbft
            - start
            - --proxy_app=tcp://127.0.0.1:26658
          ports:
            - name: tm-p2p
              containerPort: 26656
              protocol: TCP
            - name: tm-rpc
              containerPort: 26657
              protocol: TCP
          readinessProbe:
            tcpSocket:
              port: tm-rpc
            timeoutSeconds: 10
            initialDelaySeconds: 10
          resources:
            {{- toYaml $.Values.cometbft.resources | nindent 12 }}
          volumeMounts:
            - name: config
              mountPath: /cometbft
              subPath: testnet_data/node0/tendermint
      {{- with $.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml $ | nindent 8 }}
      {{- end }}
      {{- with $.Values.affinity }}
      affinity:
        {{- toYaml $ | nindent 8 }}
      {{- end }}
      {{- with $.Values.tolerations }}
      tolerations:
        {{- toYaml $ | nindent 8 }}
      {{- end }}
{{ end }}
{{ end }}
