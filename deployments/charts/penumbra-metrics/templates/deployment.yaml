apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app.kubernetes.io/component: metrics
    {{- include "penumbra-metrics.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "penumbra-metrics.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "penumbra-metrics.selectorLabels" . | nindent 8 }}
    spec:
      volumes:
        - name: grafana-datasources
          configMap:
            name: config-{{ include "penumbra-metrics.fullname" . }}
            items:
              - key: "grafana_datasources.yml"
                path: "all.yml"
        - name: prometheus-scrape-configs
          configMap:
            name: config-{{ include "penumbra-metrics.fullname" . }}
            items:
              - key: "prometheus_scrape_configs"
                path: "prometheus.yml"
        - name: prometheus-data
      {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ include "penumbra-metrics.fullname" . }}
      {{- else }}
          emptyDir: {}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "penumbra-metrics.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: prom-config
          image: "docker.io/debian:stable"
          command:
            - sh
            - -cex
            - >
              id &&
              cat /etc/prometheus/prometheus.yml &&
              chown -R 65534:65534 /prometheus
          imagePullPolicy: Always
          volumeMounts:
            - name: prometheus-scrape-configs
              mountPath: "/etc/prometheus/"
              readOnly: true
            - name: prometheus-data
              mountPath: "/prometheus"
      containers:
        - name: grafana
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 3000
              protocol: TCP
              name: grafana-http
          volumeMounts:
            - name: grafana-datasources
              mountPath: "/etc/grafana/provisioning/datasources/"
              readOnly: true
          readinessProbe:
            tcpSocket:
              port: grafana-http
            timeoutSeconds: 10
            initialDelaySeconds: 2
        - name: prometheus
          image: "{{ .Values.prometheus.repository }}:{{ .Values.prometheus.tag }}"
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--log.level=debug"
          imagePullPolicy: {{ .Values.prometheus.pullPolicy }}
          ports:
            - containerPort: 9090
              protocol: TCP
              name: prometheus-http
          readinessProbe:
            tcpSocket:
              port: prometheus-http
            timeoutSeconds: 10
            initialDelaySeconds: 2
          volumeMounts:
            - name: prometheus-scrape-configs
              mountPath: "/etc/prometheus/"
              readOnly: true
            - name: prometheus-data
              mountPath: "/prometheus"
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
