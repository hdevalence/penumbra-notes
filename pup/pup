#!/usr/bin/env bash
set -eo pipefail

BASE_DIR="${XDG_CONFIG_HOME:-$HOME}"
PUP_DIR="${PUP_DIR-"$BASE_DIR/.pup"}"
PUP_BIN_DIR="$PUP_DIR/bin"
ACCEPTED_PROGRAMS=("pcli" "pd" "pclientd")

# Initial setup: checks for git, curl, jq
for cmd in git curl jq; do
  if ! command -v "$cmd" &>/dev/null; then
    echo "error: need '$cmd' (command not found)" >&2
    exit 1
  fi
done

main() {
  # Display usage if no arguments, -h or --help is provided
  if [[ $# -eq 0 || "$1" == "-h" || "$1" == "--help" ]]; then
    usage
    exit 0
  fi
 
  # Process 'install' command
  if [[ "$1" == "i" || "$1" == "install" ]]; then
    shift # Move past 'install' to get to the tool name
    if [[ -z "$1" ]]; then
      err "No tool specified. Please specify a tool to install."
    elif [[ "$1" == "-h" || "$1" == "--help" ]]; then
      say "Install a specific Penumbra tool by using: pup install <TOOL>"
      exit 1
    elif [[ ! "${ACCEPTED_PROGRAMS[*]}" =~ "$1" ]]; then
      err "Unknown tool '$1'. Please specify a valid tool to install."
    else
      # Handle the installation of the specified tool
      TOOL=$1
      uninstall_if_exists
      fetch_latest_version
      determine_platform_and_architecture
      build_download_url
      download_and_install
    fi
  else
    err "Unknown command '$1'. Please specify a valid command."
  fi
}

uninstall_if_exists() {
  BIN_PATH="$PUP_BIN_DIR/${TOOL}"

  if [ -f "$BIN_PATH" ]; then
    say "Existing installation of ${TOOL} found. Uninstalling..."
    rm -f "$BIN_PATH"
  fi
}

fetch_latest_version() {
  PUP_TAG=$(curl -s "https://api.github.com/repos/penumbra-zone/penumbra/releases/latest" | jq -r .tag_name)
  if [[ "$PUP_TAG" == "null" ]]; then
    err "Could not fetch the latest version number. Please ensure the repository exists and has releases."
  fi
}

determine_platform_and_architecture() {
  OS=$(uname -s)
  ARCH=$(uname -m)

  case $OS in
    Linux) OS="unknown-linux-gnu";;
    Darwin) OS="apple-darwin";;
    *) err "Unsupported operating system: $OS";;
  esac

  case $ARCH in
    arm64) ARCH="aarch64";;
    x86_64) ;;
    *) err "Unsupported architecture: $ARCH";;
  esac
}

build_download_url() {
  DOWNLOAD_URL="https://github.com/penumbra-zone/penumbra/releases/download/${PUP_TAG}/${TOOL}-${ARCH}-${OS}.tar.xz"
}

download_and_install() {
  TEMP_DIR=$(mktemp -d)
  pushd "$TEMP_DIR" >/dev/null

  say "Downloading $TOOL..."
  curl -sSfLO "$DOWNLOAD_URL"

  say "Extracting $TOOL..."
  tar -xJf "${TOOL}-${ARCH}-${OS}.tar.xz"

  # Correctly identify the binary's path after extraction
  BINARY_PATH=$(find . -type f -name "$TOOL" | head -n 1)
  if [ -z "$BINARY_PATH" ]; then
    err "Failed to find the $TOOL binary after extraction."
  fi

  say "Moving $TOOL binary to $PUP_BIN_DIR..."
  mkdir -p "$PUP_BIN_DIR"
  mv "$BINARY_PATH" "$PUP_BIN_DIR/"

  popd >/dev/null
  rm -rf "$TEMP_DIR"

  verify_installation "$TOOL"
}

verify_installation() {
  # Use awk to skip the tool name and directly compare version strings including the 'v' prefix
  INSTALLED_VERSION=$(PCLI_UNLEASH_DANGER=true ${TOOL} --version | awk '{print $2}')

  if [[ "v$INSTALLED_VERSION" == "$PUP_TAG" ]]; then
    say "Verification successful: ${TOOL} $INSTALLED_VERSION installed."
  else
    err "Verification failed for ${TOOL}: Version mismatch or installation error. Expected $PUP_TAG, got $INSTALLED_VERSION"
  fi
}

usage() {
  cat 1>&2 <<EOF
Install a specific Penumbra tool with ease.

USAGE:
    pup <COMMAND> [options]

AVAILABLE COMMANDS:
    install     Install a specific Penumbra tool.

AVAILABLE TOOLS:
    pcli        Penumbra CLI
    pd          Penumbra node
    pclientd    Penumbra client daemon

General Options:
    -h, --help  Show help.
EOF
}

say() {
  printf "%s\n" "$1"
}

err() {
  say "$1" >&2
  exit 1
}

main "$@"