// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: penumbra/core/crypto/v1alpha1/crypto.proto

package cryptov1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Specifies fees paid by a transaction.
type Fee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of the token used to pay fees.
	Amount *Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// If present, the asset ID of the token used to pay fees.
	// If absent, specifies the staking token implicitly.
	AssetId *AssetId `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *Fee) Reset() {
	*x = Fee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fee) ProtoMessage() {}

func (x *Fee) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fee.ProtoReflect.Descriptor instead.
func (*Fee) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{0}
}

func (x *Fee) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Fee) GetAssetId() *AssetId {
	if x != nil {
		return x.AssetId
	}
	return nil
}

type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{1}
}

func (x *Address) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type SpendKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *SpendKey) Reset() {
	*x = SpendKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendKey) ProtoMessage() {}

func (x *SpendKey) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendKey.ProtoReflect.Descriptor instead.
func (*SpendKey) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{2}
}

func (x *SpendKey) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type SpendVerificationKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *SpendVerificationKey) Reset() {
	*x = SpendVerificationKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendVerificationKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendVerificationKey) ProtoMessage() {}

func (x *SpendVerificationKey) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendVerificationKey.ProtoReflect.Descriptor instead.
func (*SpendVerificationKey) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{3}
}

func (x *SpendVerificationKey) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type FullViewingKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *FullViewingKey) Reset() {
	*x = FullViewingKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullViewingKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullViewingKey) ProtoMessage() {}

func (x *FullViewingKey) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullViewingKey.ProtoReflect.Descriptor instead.
func (*FullViewingKey) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{4}
}

func (x *FullViewingKey) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type AccountID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *AccountID) Reset() {
	*x = AccountID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountID) ProtoMessage() {}

func (x *AccountID) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountID.ProtoReflect.Descriptor instead.
func (*AccountID) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{5}
}

func (x *AccountID) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type Diversifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *Diversifier) Reset() {
	*x = Diversifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diversifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diversifier) ProtoMessage() {}

func (x *Diversifier) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diversifier.ProtoReflect.Descriptor instead.
func (*Diversifier) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{6}
}

func (x *Diversifier) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type AddressIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *AddressIndex) Reset() {
	*x = AddressIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressIndex) ProtoMessage() {}

func (x *AddressIndex) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressIndex.ProtoReflect.Descriptor instead.
func (*AddressIndex) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{7}
}

func (x *AddressIndex) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type StateCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *StateCommitment) Reset() {
	*x = StateCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateCommitment) ProtoMessage() {}

func (x *StateCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateCommitment.ProtoReflect.Descriptor instead.
func (*StateCommitment) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{8}
}

func (x *StateCommitment) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type BalanceCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *BalanceCommitment) Reset() {
	*x = BalanceCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceCommitment) ProtoMessage() {}

func (x *BalanceCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceCommitment.ProtoReflect.Descriptor instead.
func (*BalanceCommitment) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{9}
}

func (x *BalanceCommitment) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type AssetId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *AssetId) Reset() {
	*x = AssetId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetId) ProtoMessage() {}

func (x *AssetId) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetId.ProtoReflect.Descriptor instead.
func (*AssetId) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{10}
}

func (x *AssetId) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lo uint64 `protobuf:"varint,1,opt,name=lo,proto3" json:"lo,omitempty"`
	Hi uint64 `protobuf:"varint,2,opt,name=hi,proto3" json:"hi,omitempty"`
}

func (x *Amount) Reset() {
	*x = Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amount) ProtoMessage() {}

func (x *Amount) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amount.ProtoReflect.Descriptor instead.
func (*Amount) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{11}
}

func (x *Amount) GetLo() uint64 {
	if x != nil {
		return x.Lo
	}
	return 0
}

func (x *Amount) GetHi() uint64 {
	if x != nil {
		return x.Hi
	}
	return 0
}

type Denom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (x *Denom) Reset() {
	*x = Denom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Denom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Denom) ProtoMessage() {}

func (x *Denom) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Denom.ProtoReflect.Descriptor instead.
func (*Denom) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{12}
}

func (x *Denom) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount  *Amount  `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	AssetId *AssetId `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{13}
}

func (x *Value) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Value) GetAssetId() *AssetId {
	if x != nil {
		return x.AssetId
	}
	return nil
}

type MerkleRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *MerkleRoot) Reset() {
	*x = MerkleRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleRoot) ProtoMessage() {}

func (x *MerkleRoot) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleRoot.ProtoReflect.Descriptor instead.
func (*MerkleRoot) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{14}
}

func (x *MerkleRoot) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type Asset struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *AssetId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Denom *Denom   `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (x *Asset) Reset() {
	*x = Asset{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Asset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Asset) ProtoMessage() {}

func (x *Asset) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Asset.ProtoReflect.Descriptor instead.
func (*Asset) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{15}
}

func (x *Asset) GetId() *AssetId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Asset) GetDenom() *Denom {
	if x != nil {
		return x.Denom
	}
	return nil
}

// A validator's identity key (decaf377-rdsa spendauth verification key).
type IdentityKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ik []byte `protobuf:"bytes,1,opt,name=ik,proto3" json:"ik,omitempty"`
}

func (x *IdentityKey) Reset() {
	*x = IdentityKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityKey) ProtoMessage() {}

func (x *IdentityKey) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityKey.ProtoReflect.Descriptor instead.
func (*IdentityKey) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{16}
}

func (x *IdentityKey) GetIk() []byte {
	if x != nil {
		return x.Ik
	}
	return nil
}

// A validator's governance key (decaf377-rdsa spendauth verification key).
type GovernanceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gk []byte `protobuf:"bytes,1,opt,name=gk,proto3" json:"gk,omitempty"`
}

func (x *GovernanceKey) Reset() {
	*x = GovernanceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernanceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernanceKey) ProtoMessage() {}

func (x *GovernanceKey) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernanceKey.ProtoReflect.Descriptor instead.
func (*GovernanceKey) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{17}
}

func (x *GovernanceKey) GetGk() []byte {
	if x != nil {
		return x.Gk
	}
	return nil
}

type ConsensusKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ConsensusKey) Reset() {
	*x = ConsensusKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusKey) ProtoMessage() {}

func (x *ConsensusKey) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusKey.ProtoReflect.Descriptor instead.
func (*ConsensusKey) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{18}
}

func (x *ConsensusKey) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   *Value   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Rseed   []byte   `protobuf:"bytes,2,opt,name=rseed,proto3" json:"rseed,omitempty"`
	Address *Address `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{19}
}

func (x *Note) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Note) GetRseed() []byte {
	if x != nil {
		return x.Rseed
	}
	return nil
}

func (x *Note) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

// An encrypted note.
// 132 = 1(type) + 11(d) + 8(amount) + 32(asset_id) + 32(rcm) + 32(pk_d) + 16(MAC) bytes.
type NoteCiphertext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *NoteCiphertext) Reset() {
	*x = NoteCiphertext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteCiphertext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteCiphertext) ProtoMessage() {}

func (x *NoteCiphertext) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteCiphertext.ProtoReflect.Descriptor instead.
func (*NoteCiphertext) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{20}
}

func (x *NoteCiphertext) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type Nullifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *Nullifier) Reset() {
	*x = Nullifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nullifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nullifier) ProtoMessage() {}

func (x *Nullifier) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nullifier.ProtoReflect.Descriptor instead.
func (*Nullifier) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{21}
}

func (x *Nullifier) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type SpendAuthSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *SpendAuthSignature) Reset() {
	*x = SpendAuthSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendAuthSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendAuthSignature) ProtoMessage() {}

func (x *SpendAuthSignature) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendAuthSignature.ProtoReflect.Descriptor instead.
func (*SpendAuthSignature) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{22}
}

func (x *SpendAuthSignature) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type BindingSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *BindingSignature) Reset() {
	*x = BindingSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindingSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindingSignature) ProtoMessage() {}

func (x *BindingSignature) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindingSignature.ProtoReflect.Descriptor instead.
func (*BindingSignature) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{23}
}

func (x *BindingSignature) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// The body of an output description, including only the minimal
// data required to scan and process the output.
type NotePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The note commitment for the output note. 32 bytes.
	NoteCommitment *StateCommitment `protobuf:"bytes,1,opt,name=note_commitment,json=noteCommitment,proto3" json:"note_commitment,omitempty"`
	// The encoding of an ephemeral public key. 32 bytes.
	EphemeralKey []byte `protobuf:"bytes,2,opt,name=ephemeral_key,json=ephemeralKey,proto3" json:"ephemeral_key,omitempty"`
	// An encryption of the newly created note.
	// 132 = 1(type) + 11(d) + 8(amount) + 32(asset_id) + 32(rcm) + 32(pk_d) + 16(MAC) bytes.
	EncryptedNote *NoteCiphertext `protobuf:"bytes,3,opt,name=encrypted_note,json=encryptedNote,proto3" json:"encrypted_note,omitempty"`
}

func (x *NotePayload) Reset() {
	*x = NotePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotePayload) ProtoMessage() {}

func (x *NotePayload) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotePayload.ProtoReflect.Descriptor instead.
func (*NotePayload) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{24}
}

func (x *NotePayload) GetNoteCommitment() *StateCommitment {
	if x != nil {
		return x.NoteCommitment
	}
	return nil
}

func (x *NotePayload) GetEphemeralKey() []byte {
	if x != nil {
		return x.EphemeralKey
	}
	return nil
}

func (x *NotePayload) GetEncryptedNote() *NoteCiphertext {
	if x != nil {
		return x.EncryptedNote
	}
	return nil
}

// An authentication path from a state commitment to the root of the state commitment tree.
type StateCommitmentProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteCommitment *StateCommitment   `protobuf:"bytes,1,opt,name=note_commitment,json=noteCommitment,proto3" json:"note_commitment,omitempty"`
	Position       uint64             `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	AuthPath       []*MerklePathChunk `protobuf:"bytes,3,rep,name=auth_path,json=authPath,proto3" json:"auth_path,omitempty"` // always length 24
}

func (x *StateCommitmentProof) Reset() {
	*x = StateCommitmentProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateCommitmentProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateCommitmentProof) ProtoMessage() {}

func (x *StateCommitmentProof) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateCommitmentProof.ProtoReflect.Descriptor instead.
func (*StateCommitmentProof) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{25}
}

func (x *StateCommitmentProof) GetNoteCommitment() *StateCommitment {
	if x != nil {
		return x.NoteCommitment
	}
	return nil
}

func (x *StateCommitmentProof) GetPosition() uint64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *StateCommitmentProof) GetAuthPath() []*MerklePathChunk {
	if x != nil {
		return x.AuthPath
	}
	return nil
}

// A set of 3 sibling hashes in the auth path for some note commitment.
type MerklePathChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sibling_1 []byte `protobuf:"bytes,1,opt,name=sibling_1,json=sibling1,proto3" json:"sibling_1,omitempty"`
	Sibling_2 []byte `protobuf:"bytes,2,opt,name=sibling_2,json=sibling2,proto3" json:"sibling_2,omitempty"`
	Sibling_3 []byte `protobuf:"bytes,3,opt,name=sibling_3,json=sibling3,proto3" json:"sibling_3,omitempty"`
}

func (x *MerklePathChunk) Reset() {
	*x = MerklePathChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerklePathChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerklePathChunk) ProtoMessage() {}

func (x *MerklePathChunk) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerklePathChunk.ProtoReflect.Descriptor instead.
func (*MerklePathChunk) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{26}
}

func (x *MerklePathChunk) GetSibling_1() []byte {
	if x != nil {
		return x.Sibling_1
	}
	return nil
}

func (x *MerklePathChunk) GetSibling_2() []byte {
	if x != nil {
		return x.Sibling_2
	}
	return nil
}

func (x *MerklePathChunk) GetSibling_3() []byte {
	if x != nil {
		return x.Sibling_3
	}
	return nil
}

// A clue for use with Fuzzy Message Detection.
type Clue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *Clue) Reset() {
	*x = Clue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clue) ProtoMessage() {}

func (x *Clue) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clue.ProtoReflect.Descriptor instead.
func (*Clue) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{27}
}

func (x *Clue) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// An authorization hash for a Penumbra transaction.
type EffectHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *EffectHash) Reset() {
	*x = EffectHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffectHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectHash) ProtoMessage() {}

func (x *EffectHash) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectHash.ProtoReflect.Descriptor instead.
func (*EffectHash) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{28}
}

func (x *EffectHash) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

var File_penumbra_core_crypto_v1alpha1_crypto_proto protoreflect.FileDescriptor

var file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0x87, 0x01, 0x0a, 0x03,
	0x46, 0x65, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x1f, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x20, 0x0a, 0x08, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x4b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x14, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x26, 0x0a, 0x0e, 0x46, 0x75, 0x6c, 0x6c, 0x56, 0x69,
	0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x21,
	0x0a, 0x09, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x22, 0x23, 0x0a, 0x0b, 0x44, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x24, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x27, 0x0a, 0x0f,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x29, 0x0a, 0x11, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x22, 0x1f, 0x0a, 0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x22, 0x28, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6c,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x6c, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x68,
	0x69, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x68, 0x69, 0x22, 0x1d, 0x0a, 0x05, 0x44,
	0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x22, 0x89, 0x01, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x22, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x7b, 0x0a, 0x05, 0x41, 0x73,
	0x73, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x05, 0x64,
	0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6e, 0x6f, 0x6d,
	0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x22, 0x1d, 0x0a, 0x0b, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x02, 0x69, 0x6b, 0x22, 0x1f, 0x0a, 0x0d, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x6b, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x02, 0x67, 0x6b, 0x22, 0x24, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x65,
	0x6e, 0x73, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x9a, 0x01,
	0x0a, 0x04, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x72, 0x73, 0x65, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x26, 0x0a, 0x0e, 0x4e, 0x6f,
	0x74, 0x65, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x22, 0x21, 0x0a, 0x09, 0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x2a, 0x0a, 0x12, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75,
	0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x22, 0x28, 0x0a, 0x10, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0xe1, 0x01, 0x0a, 0x0b,
	0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x57, 0x0a, 0x0f, 0x6e,
	0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x65, 0x70, 0x68,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x54, 0x0a, 0x0e, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x22,
	0xd8, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x57, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x65,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4b, 0x0a,
	0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x68, 0x75, 0x6e, 0x6b,
	0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x74, 0x68, 0x22, 0x68, 0x0a, 0x0f, 0x4d, 0x65,
	0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x31, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69,
	0x62, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73,
	0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x62, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x69, 0x62, 0x6c,
	0x69, 0x6e, 0x67, 0x33, 0x22, 0x1c, 0x0a, 0x04, 0x43, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x22, 0x22, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0xa4, 0x02, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0b, 0x43, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5b, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2d, 0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x43, 0x43, 0xaa, 0x02,
	0x1d, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02,
	0x1d, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02,
	0x29, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x43,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x20, 0x50, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x3a, 0x3a, 0x43, 0x6f, 0x72, 0x65, 0x3a, 0x3a, 0x43, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescOnce sync.Once
	file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescData = file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDesc
)

func file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP() []byte {
	file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescOnce.Do(func() {
		file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescData = protoimpl.X.CompressGZIP(file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescData)
	})
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescData
}

var file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_penumbra_core_crypto_v1alpha1_crypto_proto_goTypes = []interface{}{
	(*Fee)(nil),                  // 0: penumbra.core.crypto.v1alpha1.Fee
	(*Address)(nil),              // 1: penumbra.core.crypto.v1alpha1.Address
	(*SpendKey)(nil),             // 2: penumbra.core.crypto.v1alpha1.SpendKey
	(*SpendVerificationKey)(nil), // 3: penumbra.core.crypto.v1alpha1.SpendVerificationKey
	(*FullViewingKey)(nil),       // 4: penumbra.core.crypto.v1alpha1.FullViewingKey
	(*AccountID)(nil),            // 5: penumbra.core.crypto.v1alpha1.AccountID
	(*Diversifier)(nil),          // 6: penumbra.core.crypto.v1alpha1.Diversifier
	(*AddressIndex)(nil),         // 7: penumbra.core.crypto.v1alpha1.AddressIndex
	(*StateCommitment)(nil),      // 8: penumbra.core.crypto.v1alpha1.StateCommitment
	(*BalanceCommitment)(nil),    // 9: penumbra.core.crypto.v1alpha1.BalanceCommitment
	(*AssetId)(nil),              // 10: penumbra.core.crypto.v1alpha1.AssetId
	(*Amount)(nil),               // 11: penumbra.core.crypto.v1alpha1.Amount
	(*Denom)(nil),                // 12: penumbra.core.crypto.v1alpha1.Denom
	(*Value)(nil),                // 13: penumbra.core.crypto.v1alpha1.Value
	(*MerkleRoot)(nil),           // 14: penumbra.core.crypto.v1alpha1.MerkleRoot
	(*Asset)(nil),                // 15: penumbra.core.crypto.v1alpha1.Asset
	(*IdentityKey)(nil),          // 16: penumbra.core.crypto.v1alpha1.IdentityKey
	(*GovernanceKey)(nil),        // 17: penumbra.core.crypto.v1alpha1.GovernanceKey
	(*ConsensusKey)(nil),         // 18: penumbra.core.crypto.v1alpha1.ConsensusKey
	(*Note)(nil),                 // 19: penumbra.core.crypto.v1alpha1.Note
	(*NoteCiphertext)(nil),       // 20: penumbra.core.crypto.v1alpha1.NoteCiphertext
	(*Nullifier)(nil),            // 21: penumbra.core.crypto.v1alpha1.Nullifier
	(*SpendAuthSignature)(nil),   // 22: penumbra.core.crypto.v1alpha1.SpendAuthSignature
	(*BindingSignature)(nil),     // 23: penumbra.core.crypto.v1alpha1.BindingSignature
	(*NotePayload)(nil),          // 24: penumbra.core.crypto.v1alpha1.NotePayload
	(*StateCommitmentProof)(nil), // 25: penumbra.core.crypto.v1alpha1.StateCommitmentProof
	(*MerklePathChunk)(nil),      // 26: penumbra.core.crypto.v1alpha1.MerklePathChunk
	(*Clue)(nil),                 // 27: penumbra.core.crypto.v1alpha1.Clue
	(*EffectHash)(nil),           // 28: penumbra.core.crypto.v1alpha1.EffectHash
}
var file_penumbra_core_crypto_v1alpha1_crypto_proto_depIdxs = []int32{
	11, // 0: penumbra.core.crypto.v1alpha1.Fee.amount:type_name -> penumbra.core.crypto.v1alpha1.Amount
	10, // 1: penumbra.core.crypto.v1alpha1.Fee.asset_id:type_name -> penumbra.core.crypto.v1alpha1.AssetId
	11, // 2: penumbra.core.crypto.v1alpha1.Value.amount:type_name -> penumbra.core.crypto.v1alpha1.Amount
	10, // 3: penumbra.core.crypto.v1alpha1.Value.asset_id:type_name -> penumbra.core.crypto.v1alpha1.AssetId
	10, // 4: penumbra.core.crypto.v1alpha1.Asset.id:type_name -> penumbra.core.crypto.v1alpha1.AssetId
	12, // 5: penumbra.core.crypto.v1alpha1.Asset.denom:type_name -> penumbra.core.crypto.v1alpha1.Denom
	13, // 6: penumbra.core.crypto.v1alpha1.Note.value:type_name -> penumbra.core.crypto.v1alpha1.Value
	1,  // 7: penumbra.core.crypto.v1alpha1.Note.address:type_name -> penumbra.core.crypto.v1alpha1.Address
	8,  // 8: penumbra.core.crypto.v1alpha1.NotePayload.note_commitment:type_name -> penumbra.core.crypto.v1alpha1.StateCommitment
	20, // 9: penumbra.core.crypto.v1alpha1.NotePayload.encrypted_note:type_name -> penumbra.core.crypto.v1alpha1.NoteCiphertext
	8,  // 10: penumbra.core.crypto.v1alpha1.StateCommitmentProof.note_commitment:type_name -> penumbra.core.crypto.v1alpha1.StateCommitment
	26, // 11: penumbra.core.crypto.v1alpha1.StateCommitmentProof.auth_path:type_name -> penumbra.core.crypto.v1alpha1.MerklePathChunk
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_penumbra_core_crypto_v1alpha1_crypto_proto_init() }
func file_penumbra_core_crypto_v1alpha1_crypto_proto_init() {
	if File_penumbra_core_crypto_v1alpha1_crypto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendVerificationKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullViewingKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diversifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Denom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Asset); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernanceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteCiphertext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nullifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendAuthSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindingSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateCommitmentProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerklePathChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffectHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_penumbra_core_crypto_v1alpha1_crypto_proto_goTypes,
		DependencyIndexes: file_penumbra_core_crypto_v1alpha1_crypto_proto_depIdxs,
		MessageInfos:      file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes,
	}.Build()
	File_penumbra_core_crypto_v1alpha1_crypto_proto = out.File
	file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDesc = nil
	file_penumbra_core_crypto_v1alpha1_crypto_proto_goTypes = nil
	file_penumbra_core_crypto_v1alpha1_crypto_proto_depIdxs = nil
}
