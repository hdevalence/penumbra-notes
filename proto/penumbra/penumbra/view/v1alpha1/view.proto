syntax = "proto3";

package penumbra.view.v1alpha1;

import "penumbra/core/chain/v1alpha1/chain.proto";
import "penumbra/core/crypto/v1alpha1/crypto.proto";
import "penumbra/core/dex/v1alpha1/dex.proto";
import "penumbra/core/transaction/v1alpha1/transaction.proto";
import "penumbra/core/ibc/v1alpha1/ibc.proto";
import "penumbra/core/stake/v1alpha1/stake.proto";

// The view protocol is used by a view client, who wants to do some
// transaction-related actions, to request data from a view service, which is
// responsible for synchronizing and scanning the public chain state with one or
// more full viewing keys.
//
// View protocol requests optionally include the account group ID, used to
// identify which set of data to query.
service ViewProtocolService {
  // Get current status of chain sync
  rpc Status(StatusRequest) returns (StatusResponse);

  // Stream sync status updates until the view service has caught up with the core.chain.v1alpha1.
  rpc StatusStream(StatusStreamRequest) returns (stream StatusStreamResponse);

  // Queries for notes that have been accepted by the core.chain.v1alpha1.
  rpc Notes(NotesRequest) returns (stream NotesResponse);

  rpc NotesForVoting(NotesForVotingRequest) returns (stream NotesForVotingResponse);

  // Returns authentication paths for the given note commitments.
  //
  // This method takes a batch of input commitments, rather than just one, so
  // that the client can get a consistent set of authentication paths to a
  // common root.  (Otherwise, if a client made multiple requests, the wallet
  // service could have advanced the state commitment tree state between queries).
  rpc Witness(WitnessRequest) returns (WitnessResponse);

  rpc WitnessAndBuild(WitnessAndBuildRequest) returns (WitnessAndBuildResponse);

  // Queries for assets.
  rpc Assets(AssetsRequest) returns (stream AssetsResponse);

  // Query for the current chain parameters.
  rpc ChainParameters(ChainParametersRequest) returns (ChainParametersResponse);

  // Query for the current FMD parameters.
  rpc FMDParameters(FMDParametersRequest) returns (FMDParametersResponse);

  // Query for an address given an address index
  rpc AddressByIndex(AddressByIndexRequest) returns (AddressByIndexResponse);

    // Query for an address given an address index
  rpc IndexByAddress(IndexByAddressRequest) returns (IndexByAddressResponse);

  // Query for an ephemeral address
  rpc EphemeralAddress(EphemeralAddressRequest) returns (EphemeralAddressResponse);

  // Query for balance of a given address
  rpc BalanceByAddress(BalanceByAddressRequest) returns (stream BalanceByAddressResponse);

  // Query for a note by its note commitment, optionally waiting until the note is detected.
  rpc NoteByCommitment(NoteByCommitmentRequest) returns (NoteByCommitmentResponse);

  // Query for a swap by its swap commitment, optionally waiting until the swap is detected.
  rpc SwapByCommitment(SwapByCommitmentRequest) returns (SwapByCommitmentResponse);

  // Query for whether a nullifier has been spent, optionally waiting until it is spent.
  rpc NullifierStatus(NullifierStatusRequest) returns (NullifierStatusResponse);

  // Query for a given transaction by its hash.
  rpc TransactionInfoByHash(TransactionInfoByHashRequest) returns (TransactionInfoByHashResponse);

  // Query for the full transactions in the given range of blocks.
  rpc TransactionInfo(TransactionInfoRequest) returns (stream TransactionInfoResponse);

  // Query for a transaction plan
  rpc TransactionPlanner(TransactionPlannerRequest) returns (TransactionPlannerResponse);

  // Broadcast a transaction to the network, optionally waiting for full confirmation.
  rpc BroadcastTransaction(BroadcastTransactionRequest) returns (BroadcastTransactionResponse);

  // Query for owned position IDs for the given trading pair and in the given position state.
   rpc OwnedPositionIds(OwnedPositionIdsRequest) returns (OwnedPositionIdsResponse);
}

message BroadcastTransactionRequest {
  // The transaction to broadcast.
  core.transaction.v1alpha1.Transaction transaction = 1;
  // If true, wait for the view service to detect the transaction during sync.
  bool await_detection = 2;
}

message BroadcastTransactionResponse {
  // The hash of the transaction that was broadcast.
  core.transaction.v1alpha1.Id id = 1;
  // The height in which the transaction was detected as included in the chain, if any.
  // Will not be included unless await_detection was true.
  uint64 detection_height = 2;
}

message TransactionPlannerRequest {
    // The expiry height for the requested TransactionPlan
    uint64 expiry_height = 1;
    // The fee for the requested TransactionPlan, if any.
    core.crypto.v1alpha1.Fee fee = 2;
    // The memo for the requested TransactionPlan
    string memo = 3;
    // Identifies the account group to query.
    optional core.crypto.v1alpha1.AccountGroupId account_group_id = 14;

  // Request contents
  repeated Output outputs = 20;
  repeated Swap swaps = 30;
  repeated Delegate delegations = 40;
  repeated Undelegate undelegations = 50;
  repeated penumbra.core.ibc.v1alpha1.IbcAction ibc_actions = 60;

  // Request message subtypes
  message Output {
    core.crypto.v1alpha1.Value value = 1;
    core.crypto.v1alpha1.Address address = 2;
  }
  message Swap {
    core.crypto.v1alpha1.Value value = 1;
    core.crypto.v1alpha1.AssetId target_asset = 2;
    core.crypto.v1alpha1.Fee fee = 3;
  }
  message Delegate {
    core.crypto.v1alpha1.Amount amount = 1;
    core.stake.v1alpha1.RateData rate_data = 3;
  }
  message Undelegate {
    core.crypto.v1alpha1.Value value = 1;
    core.stake.v1alpha1.RateData rate_data = 2;
  }
}

message TransactionPlannerResponse {
  core.transaction.v1alpha1.TransactionPlan plan = 1;
}

message AddressByIndexRequest {
  core.crypto.v1alpha1.AddressIndex address_index = 1;
  bool display_confirm = 2;
}

message AddressByIndexResponse {
  core.crypto.v1alpha1.Address address = 1;
}

message IndexByAddressRequest {
  core.crypto.v1alpha1.Address address = 1;
}

message IndexByAddressResponse {
  // Will be absent if given an address not viewable by this viewing service
  optional core.crypto.v1alpha1.AddressIndex address_index = 1;
}

message EphemeralAddressRequest {
  core.crypto.v1alpha1.AddressIndex address_index = 1;
  bool display_confirm = 2;
}

message EphemeralAddressResponse {
  core.crypto.v1alpha1.Address address = 1;
}

message BalanceByAddressRequest {
  core.crypto.v1alpha1.Address address = 1;
}

message BalanceByAddressResponse {
    core.crypto.v1alpha1.AssetId asset = 1;
    core.crypto.v1alpha1.Amount amount = 2;
}

// Scaffolding for bearer-token authentication for the ViewService.
message ViewAuthToken {
  bytes inner = 1;
}

message ViewAuthRequest {
  core.crypto.v1alpha1.FullViewingKey fvk = 1;
}

message ViewAuthResponse {
  ViewAuthToken token = 1;
}

service ViewAuthService {
  rpc ViewAuth(ViewAuthRequest) returns (ViewAuthResponse);
}

// Requests sync status of the view service.
message StatusRequest {
  // Identifies the account group to query.
  optional core.crypto.v1alpha1.AccountGroupId account_group_id = 14;
}

// Returns the status of the view service and whether it is synchronized with the chain state.
message StatusResponse {
  // The height the view service has synchronized to so far
  uint64 sync_height = 1;
  // Whether the view service is catching up with the chain state
  bool catching_up = 2;
}

// Requests streaming updates on the sync height until the view service is synchronized.
message StatusStreamRequest {
  // Identifies the account group to query.
  optional core.crypto.v1alpha1.AccountGroupId account_group_id = 14;
}

// A streaming sync status update
message StatusStreamResponse {
  uint64 latest_known_block_height = 1;
  uint64 sync_height = 2;
}

// A query for notes known by the view service.
//
// This message uses the fact that all proto fields are optional
// to allow various filtering on the returned notes.
message NotesRequest {
  // If set, return spent notes as well as unspent notes.
  bool include_spent = 2;

  // If set, only return notes with the specified asset id.
  core.crypto.v1alpha1.AssetId asset_id = 3;

  // If set, only return notes with the specified address incore.dex.v1alpha1.
  core.crypto.v1alpha1.AddressIndex address_index = 4;

  // If set, stop returning notes once the total exceeds this amount.
  //
  // Ignored if `asset_id` is unset or if `include_spent` is set.
  core.crypto.v1alpha1.Amount amount_to_spend = 6;

  // Identifies the account group to query.
  optional core.crypto.v1alpha1.AccountGroupId account_group_id = 14;
}

// A query for notes to be used for voting on a proposal.
message NotesForVotingRequest {
  // The starting height of the proposal.
  uint64 votable_at_height = 1;

  // If set, only return notes with the specified asset id.
  core.crypto.v1alpha1.AddressIndex address_index = 3;

  // Identifies the account group to query.
  optional core.crypto.v1alpha1.AccountGroupId account_group_id = 14;
}

message WitnessRequest {
  // The note commitments to obtain auth paths for.
  repeated core.crypto.v1alpha1.StateCommitment note_commitments = 2;

  // The transaction plan to witness
  core.transaction.v1alpha1.TransactionPlan transaction_plan = 3;

  // Identifies the account group to query.
  optional core.crypto.v1alpha1.AccountGroupId account_group_id = 14;
}

message WitnessResponse {
  core.transaction.v1alpha1.WitnessData witness_data = 1;
}

message WitnessAndBuildRequest {
  penumbra.core.transaction.v1alpha1.TransactionPlan transaction_plan = 1;
  penumbra.core.transaction.v1alpha1.AuthorizationData authorization_data = 2;
}

message WitnessAndBuildResponse {
  penumbra.core.transaction.v1alpha1.Transaction transaction = 1;
}

// Requests all assets known to the view service.
message AssetsRequest {
  // If set to false (default), returns all assets, regardless of whether the rest of the fields of
  // the request indicate a filter.
  bool filtered = 1;
  // Include these specific denominations in the response.
  repeated core.crypto.v1alpha1.Denom include_specific_denominations = 2;
  // Include all delegation tokens, to any validator, in the response.
  bool include_delegation_tokens = 3;
  // Include all unbonding tokens, from any validator, in the response.
  bool include_unbonding_tokens = 4;
  // Include all LP NFTs in the response.
  bool include_lp_nfts = 5;
  // Include all proposal NFTs in the response.
  bool include_proposal_nfts = 6;
  // Include all voting receipt tokens in the response.
  bool include_voting_receipt_tokens = 7;
}

// Requests all assets known to the view service.
message AssetsResponse {
  core.crypto.v1alpha1.DenomMetadata denom_metadata = 2;
}

// Requests the current chain parameters from the view service.
message ChainParametersRequest {}

message ChainParametersResponse {
  core.chain.v1alpha1.ChainParameters parameters = 1;
}

// Requests the current FMD parameters from the view service.
message FMDParametersRequest {}

message FMDParametersResponse {
  core.chain.v1alpha1.FmdParameters parameters = 1;
}

message NoteByCommitmentRequest {
  core.crypto.v1alpha1.StateCommitment note_commitment = 2;
  // If set to true, waits to return until the requested note is detected.
  bool await_detection = 3;
  // Identifies the account group to query.
  optional core.crypto.v1alpha1.AccountGroupId account_group_id = 14;
}

message NoteByCommitmentResponse {
  SpendableNoteRecord spendable_note = 1;
}

message SwapByCommitmentRequest {
  core.crypto.v1alpha1.StateCommitment swap_commitment = 2;
  // If set to true, waits to return until the requested swap is detected.
  bool await_detection = 3;
  // Identifies the account group to query.
  optional core.crypto.v1alpha1.AccountGroupId account_group_id = 14;
}

message SwapByCommitmentResponse {
  SwapRecord swap = 1;
}

message NullifierStatusRequest {
  core.crypto.v1alpha1.Nullifier nullifier = 2;
  bool await_detection = 3;
  // Identifies the account group to query.
  optional core.crypto.v1alpha1.AccountGroupId account_group_id = 14;
}

message NullifierStatusResponse {
  bool spent = 1;
}

message TransactionInfoByHashRequest {
  // The transaction hash to query for.
    core.transaction.v1alpha1.Id id = 2;
}

message TransactionInfoRequest {
  // If present, return only transactions after this height.
  optional uint64 start_height = 1;
  // If present, return only transactions before this height.
  optional uint64 end_height = 2;
}

message TransactionInfo {
    // The height the transaction was included in a block, if known.
    optional uint64 height = 1;
    // The hash of the transaction.
    core.transaction.v1alpha1.Id id = 2;
    // The transaction data itself.
    core.transaction.v1alpha1.Transaction transaction = 3;
    // The transaction perspective, as seen by this view server.
    core.transaction.v1alpha1.TransactionPerspective perspective = 4;
    // A precomputed transaction view of `transaction` from `perspective`, included for convenience of clients that don't have support for viewing transactions on their own.
    core.transaction.v1alpha1.TransactionView  view = 5;
}

message TransactionInfoResponse {
   TransactionInfo tx_info = 1;
}

message TransactionInfoByHashResponse {
   TransactionInfo tx_info = 1;
}

message NotesResponse {
  SpendableNoteRecord note_record = 1;
}

message NotesForVotingResponse {
  SpendableNoteRecord note_record = 1;
  core.crypto.v1alpha1.IdentityKey identity_key = 2;
}

// A note plaintext with associated metadata about its status.
message SpendableNoteRecord {
  // The note commitment, identifying the note.
  core.crypto.v1alpha1.StateCommitment note_commitment = 1;
  // The note plaintext itself.
  core.crypto.v1alpha1.Note note = 2;
  // A precomputed decryption of the note's address incore.dex.v1alpha1.
  core.crypto.v1alpha1.AddressIndex address_index = 3;
  // The note's nullifier.
  core.crypto.v1alpha1.Nullifier nullifier = 4;
  // The height at which the note was created.
  uint64 height_created = 5;
  // Records whether the note was spent (and if so, at what height).
  optional uint64 height_spent = 6;
  // The note position.
  uint64 position = 7;
  // The source of the note (a tx hash or otherwise)
  core.chain.v1alpha1.NoteSource source = 8;
}

message SwapRecord {
  core.crypto.v1alpha1.StateCommitment swap_commitment = 1;
  core.dex.v1alpha1.SwapPlaintext swap = 2;
  uint64 position = 3;
  core.crypto.v1alpha1.Nullifier nullifier = 4;
  core.dex.v1alpha1.BatchSwapOutputData output_data = 5;
  optional uint64 height_claimed = 6;
  core.chain.v1alpha1.NoteSource source = 7;
}

message OwnedPositionIdsRequest {
   // If present, return only positions with this position state.
   optional core.dex.v1alpha1.PositionState position_state = 1;
   // If present, return only positions for this trading pair.
   optional core.dex.v1alpha1.TradingPair trading_pair = 2;
 }

 message OwnedPositionIdsResponse {
   repeated core.dex.v1alpha1.PositionId position_ids = 1;
 }