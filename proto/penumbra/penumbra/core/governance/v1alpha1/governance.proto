syntax = "proto3";

package penumbra.core.governance.v1alpha1;

import "google/protobuf/any.proto";
import "penumbra/core/crypto/v1alpha1/crypto.proto";
import "penumbra/core/chain/v1alpha1/chain.proto";

message ProposalSubmit {
  // The proposal to be submitted.
  governance.v1alpha1.Proposal proposal = 1;
  // The amount of the proposal deposit.
  crypto.v1alpha1.Amount deposit_amount = 3;
}

message ProposalWithdraw {
  // The proposal to be withdrawn.
  uint64 proposal = 1;
  // The reason for the proposal being withdrawn.
  string reason = 2;
}

message ProposalDepositClaim {
  // The proposal to claim the deposit for.
  uint64 proposal = 1;
  // The expected deposit amount.
  crypto.v1alpha1.Amount deposit_amount = 2;
  // The outcome of the proposal.
  ProposalOutcome outcome = 3;
}

message ValidatorVote {
  // The effecting data for the vote.
  ValidatorVoteBody body = 1;
  // The vote authorization signature is authorizing data.
  crypto.v1alpha1.SpendAuthSignature auth_sig = 2;
}

message ValidatorVoteBody {
  // The proposal being voted on.
  uint64 proposal = 1;
  // The vote.
  governance.v1alpha1.Vote vote = 2;
  // The validator identity.
  crypto.v1alpha1.IdentityKey identity_key = 3;
  // The validator governance key.
  crypto.v1alpha1.GovernanceKey governance_key = 4;
}

message DelegatorVote {
  // The effecting data for the vote.
  DelegatorVoteBody body = 1;
  // The vote authorization signature is authorizing data.
  crypto.v1alpha1.SpendAuthSignature auth_sig = 2;
  // The vote proof is authorizing data.
  crypto.v1alpha1.ZKDelegatorVoteProof proof = 3;
}

message DelegatorVoteBody {
  // The proposal being voted on.
  uint64 proposal = 1;
  // The start position of the proposal in the TCT.
  uint64 start_position = 2;
  // The vote.
  governance.v1alpha1.Vote vote = 3;
  // The value of the delegation note.
  crypto.v1alpha1.Value value = 4;
  // The amount of the delegation note, in unbonded penumbra.
  crypto.v1alpha1.Amount unbonded_amount = 5;
  // The nullifier of the input note.
  bytes nullifier = 6;
  // The randomized validating key for the spend authorization signature.
  bytes rk = 7;
}

message DelegatorVotePlan {
  // The proposal to vote on.
  uint64 proposal = 1;
  // The start position of the proposal in the TCT.
  uint64 start_position = 2;
  // The vote to cast.
  governance.v1alpha1.Vote vote = 3;
  // The delegation note to prove that we can vote.
  crypto.v1alpha1.Note staked_note = 4;
  // The position of that delegation note.
  uint64 staked_note_position = 5;
  // The unbonded amount equivalent to the delegation note.
  crypto.v1alpha1.Amount unbonded_amount = 6;
  // The randomizer to use for the proof of spend capability.
  bytes randomizer = 7;
  // The first blinding factor to use for the ZK delegator vote proof.
  bytes proof_blinding_r = 8;
  // The second blinding factor to use for the ZK delegator vote proof.
  bytes proof_blinding_s = 9;
}

message DaoDeposit {
    // The value to deposit into the DAO.
    crypto.v1alpha1.Value value = 1;
}

message DaoSpend {
    // The value to spend from the DAO.
    crypto.v1alpha1.Value value = 1;
}

message DaoOutput {
    // The value to output from the DAO.
    crypto.v1alpha1.Value value = 1;
    // The address to send the output to.
    crypto.v1alpha1.Address address = 2;
}

// A vote on a proposal.
message Vote {
  // A vote.
  enum Vote {
    VOTE_UNSPECIFIED = 0;
    VOTE_ABSTAIN = 1;
    VOTE_YES = 2;
    VOTE_NO = 3;
  }

  // The vote.
  Vote vote = 1;
}

// The current state of a proposal.
message ProposalState {
  // Voting is in progress and the proposal has not yet concluded voting or been withdrawn.
  message Voting {}

  // The proposal has been withdrawn but the voting period is not yet concluded.
  message Withdrawn {
    // The reason for the withdrawal.
    string reason = 1;
  }

  // The voting period has ended, and the proposal has been assigned an outcome.
  message Finished {
    ProposalOutcome outcome = 1;
  }

  // The voting period has ended, and the original proposer has claimed their deposit.
  message Claimed {
    ProposalOutcome outcome = 1;
  }

  // The state of the proposal.
  oneof state {
    Voting voting = 2;
    Withdrawn withdrawn = 3;
    Finished finished = 4;
    Claimed claimed = 5;
  }
}

// The outcome of a concluded proposal.
message ProposalOutcome {
  // Whether or not the proposal was withdrawn.
  message Withdrawn {
      // The reason for withdrawing the proposal during the voting period.
      string reason = 1;
  }

  // The proposal was passed.
  message Passed {}

  // The proposal did not pass.
  message Failed {
      // Present if the proposal was withdrawn during the voting period.
      Withdrawn withdrawn = 1;
  }

  // The proposal did not pass, and was slashed.
  message Slashed {
      // Present if the proposal was withdrawn during the voting period.
      Withdrawn withdrawn = 1;
  }

  oneof outcome {
      Passed passed = 1;
      Failed failed = 2;
      Slashed slashed = 3;
  }
}

// A tally of votes on a proposal.
message Tally {
  // The number of votes in favor of the proposal.
  uint64 yes = 1;
  // The number of votes against the proposal.
  uint64 no = 2;
  // The number of abstentions.
  uint64 abstain = 3;
}

// A proposal to be voted upon.
message Proposal {
  // The unique identifier of the proposal.
  uint64 id = 4;

  // A short title for the proposal.
  string title = 1;

  // A natural-language description of the effect of the proposal and its justification.
  string description = 2;

  // The different kinds of proposal. Only one of these should be set.
  Signaling signaling = 5;
  Emergency emergency = 6;
  ParameterChange parameter_change = 7;
  DaoSpend dao_spend = 8;

  // A signaling proposal is meant to register a vote on-chain, but does not have an automatic
  // effect when passed.
  //
  // It optionally contains a reference to a commit which contains code to upgrade the chain.
  message Signaling {
    // The commit to be voted upon, if any is relevant.
    string commit = 1;
  }

  // An emergency proposal can be passed instantaneously by a 2/3 majority of validators, without
  // waiting for the voting period to expire.
  //
  // If the boolean `halt_chain` is set to `true`, then the chain will halt immediately when the
  // proposal is passed.
  message Emergency {
    // If `true`, the chain will halt immediately when the proposal is passed.
    bool halt_chain = 1;
  }

  // A parameter change proposal describes a replacement of the chain parameters, which should take
  // effect when the proposal is passed.
  message ParameterChange {
    // The old chain parameters to be replaced: even if the proposal passes, the update will not be
    // applied if the chain parameters have changed *at all* from these chain parameters. Usually,
    // this should be set to the current chain parameters at time of proposal.
    chain.v1alpha1.ChainParameters old_parameters = 1;

    // The new chain parameters to be set: the *entire* chain parameters will be replaced with these
    // at the time the proposal is passed.
    chain.v1alpha1.ChainParameters new_parameters = 2;
  }

  // A DAO spend proposal describes zero or more transactions to execute on behalf of the DAO, with
  // access to its funds, and zero or more scheduled transactions from previous passed proposals to
  // cancel.
  message DaoSpend {
    // The transaction plan to be executed at the time the proposal is passed. This must be a
    // transaction plan which can be executed by the DAO, which means it can't require any witness
    // data or authorization signatures, but it may use the `DaoSpend` action.
    google.protobuf.Any transaction_plan = 2;
  }
}
