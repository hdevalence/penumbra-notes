syntax = "proto3";

package penumbra.core.crypto.v1alpha1;

// Specifies fees paid by a transaction.
message Fee {
    // The amount of the token used to pay fees.
    Amount amount = 1;
    // If present, the asset ID of the token used to pay fees.
    // If absent, specifies the staking token implicitly.
    AssetId asset_id = 2;
}

// A Penumbra address.
message Address {
    // The bytes of the address.
    bytes inner = 1;
    
    // Alternatively, a Bech32m-encoded string representation of the `inner`
    // bytes.
    // 
    // NOTE: implementations are not required to support parsing this field.
    // Implementations should prefer to encode the bytes in all messages they
    // produce. Implementations must not accept messages with both `inner` and
    // `alt_bech32m` set.
    string alt_bech32m = 2;
}

message AddressView {
    message Visible {
        Address address = 1;
        AddressIndex index = 2;
        AccountGroupId account_group_id = 3;
    }
    message Opaque {
        Address address = 1;
    }
    oneof address_view {
        Visible visible = 1;
        Opaque opaque = 2;
    }
}

message SpendKey {
    bytes inner = 1;
}

message SpendVerificationKey {
    bytes inner = 1;
}

message FullViewingKey {
    bytes inner = 1;
}

message AccountGroupId {
    bytes inner = 1;
}

message Diversifier {
    bytes inner = 1;
}

message AddressIndex {
    uint32 account = 2;
    bytes randomizer = 3;
}

message StateCommitment {
    bytes inner = 1;
}

message BalanceCommitment {
    bytes inner = 1;
}

// A Penumbra asset ID.
message AssetId {
    // The bytes of the asset ID.
    bytes inner = 1;
    
    // Alternatively, a Bech32m-encoded string representation of the `inner`
    // bytes.
    // 
    // NOTE: implementations are not required to support parsing this field.
    // Implementations should prefer to encode the `inner` bytes in all messages they
    // produce. Implementations must not accept messages with both `inner` and
    // `alt_bech32m` set.  This field exists for convenience of RPC users.
    string alt_bech32m = 2;

    // Alternatively, a base denomination string which should be hashed to obtain the asset ID.
    //
    // NOTE: implementations are not required to support parsing this field.
    // Implementations should prefer to encode the bytes in all messages they
    // produce. Implementations must not accept messages with both `inner` and
    // `alt_base_denom` set.  This field exists for convenience of RPC users.
    string alt_base_denom = 3;
}

message Amount {
    uint64 lo = 1;
    uint64 hi = 2;
}

message Denom {
    string denom = 1;
}

// DenomMetadata represents a struct that describes a basic token.
 message DenomMetadata {
     string description = 1;
     // denom_units represents the list of DenomUnit's for a given coin
     repeated DenomUnit denom_units = 2;
     // base represents the base denom (should be the DenomUnit with exponent = 0).
     string base = 3;
     // display indicates the suggested denom that should be
     // displayed in clients.
     string display = 4;
     // name defines the name of the token (eg: Cosmos Atom)
     string name = 5;
     // symbol is the token symbol usually shown on exchanges (eg: ATOM). This can
     // be the same as the display.
     string symbol = 6;
     // URI to a document (on or off-chain) that contains additional information. Optional.
     string uri = 7;
     // URIHash is a sha256 hash of a document pointed by URI. It's used to verify that
     // the document didn't change. Optional.
     string uri_hash = 8;

     // the asset ID on Penumbra for this denomination.
     AssetId penumbra_asset_id = 1984;
 }

 // DenomUnit represents a struct that describes a given denomination unit of the basic token.
 message DenomUnit {
     // denom represents the string name of the given denom unit (e.g uatom).
     string denom = 1;
     // exponent represents power of 10 exponent that one must
     // raise the base_denom to in order to equal the given DenomUnit's denom
     // 1 denom = 10^exponent base_denom
     // (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with
     // exponent = 6, thus: 1 atom = 10^6 uatom).
     uint32 exponent = 2;
     // aliases is a list of string aliases for the given denom
     repeated string aliases = 3;
 }

message Value {
    Amount amount = 1;
    AssetId asset_id = 2;
}

// Represents a value of a known or unknown denomination.
//
// Note: unlike some other View types, we don't just store the underlying
// `Value` message together with an additional `Denom`.  Instead, we record
// either an `Amount` and `Denom` (only) or an `Amount` and `AssetId`.  This is
// because we don't want to allow a situation where the supplied `Denom` doesn't
// match the `AssetId`, and a consumer of the API that doesn't check is tricked.
// This way, the `Denom` will always match, because the consumer is forced to
// recompute it themselves if they want it.
message ValueView {
    // A value whose asset ID has a known denomination.
    message KnownDenom {
        Amount amount = 1;
        DenomMetadata denom = 2;
    }
    message UnknownDenom {
        Amount amount = 1;
        AssetId asset_id = 2;
    }
    oneof value_view {
        KnownDenom known_denom = 1;
        UnknownDenom unknown_denom = 2;
    }
}

message MerkleRoot {
    bytes inner = 1;
}

// A validator's identity key (decaf377-rdsa spendauth verification key).
message IdentityKey {
  bytes ik = 1;
}

// A validator's governance key (decaf377-rdsa spendauth verification key).
message GovernanceKey {
  bytes gk = 1;
}

message ConsensusKey {
    bytes inner = 1;
}

message Note {
    Value value = 1;
    bytes rseed = 2;
    Address address = 3;
}

message NoteView {
    ValueView value = 1;
    bytes rseed = 2;
    AddressView address = 3;
}

// An encrypted note.
// 132 = 1(type) + 11(d) + 8(amount) + 32(asset_id) + 32(rcm) + 32(pk_d) + 16(MAC) bytes.
message NoteCiphertext {
    bytes inner = 1;
}

message Nullifier {
    bytes inner = 1;
}

message SpendAuthSignature {
    bytes inner = 1;
}

message BindingSignature {
    bytes inner = 1;
}

// The body of an output description, including only the minimal
// data required to scan and process the output.
message NotePayload {
  // The note commitment for the output note. 32 bytes.
  StateCommitment note_commitment = 1;
  // The encoding of an ephemeral public key. 32 bytes.
  bytes ephemeral_key = 2;
  // An encryption of the newly created note.
  // 132 = 1(type) + 11(d) + 8(amount) + 32(asset_id) + 32(rcm) + 32(pk_d) + 16(MAC) bytes.
  NoteCiphertext encrypted_note = 3;
}

// An authentication path from a state commitment to the root of the state commitment tree.
message StateCommitmentProof {
  StateCommitment note_commitment = 1;
  uint64 position = 2;
  repeated MerklePathChunk auth_path = 3; // always length 24
}

// A set of 3 sibling hashes in the auth path for some note commitment.
message MerklePathChunk {
    bytes sibling_1 = 1;
    bytes sibling_2 = 2;
    bytes sibling_3 = 3;
}

// A clue for use with Fuzzy Message Detection.
message Clue {
  bytes inner = 1;
}

// An authorization hash for a Penumbra transaction.
message EffectHash {
  bytes inner = 1;
}

// A Penumbra ZK output proof.
message ZKOutputProof {
  bytes inner = 1;
}

// A Penumbra ZK spend proof.
message ZKSpendProof {
  bytes inner = 1;
}

// A Penumbra ZK swap proof.
message ZKSwapProof {
    bytes inner = 1;
}

// A Penumbra ZK swap claim proof.
message ZKSwapClaimProof {
    bytes inner = 1;
}

// A Penumbra ZK undelegate claim proof.
message ZKUndelegateClaimProof {
    bytes inner = 1;
}

// A Penumbra ZK delegator vote proof.
message ZKDelegatorVoteProof {
    bytes inner = 1;
}

// A Penumbra ZK nullifier derivation proof.
message ZKNullifierDerivationProof {
  bytes inner = 1;
}
