version: v1
managed:
  enabled: true
  go_package_prefix:
    default: github.com/penumbra-zone/penumbra/proto/go/gen
    except:
      - buf.build/cosmos/ibc
plugins:
  - plugin: buf.build/protocolbuffers/go
    # We write the golang protos to the top-level dir, rather than burying them
    # inappropriately in the rust crate.
    out: go/gen
    opt: paths=source_relative

  - plugin: buf.build/community/neoeinstein-prost:v0.2.2
    # We write the rustlang protos to `src/gen/` inside the "proto" crate,
    # so the proto definitions can be `include`d and re-exported from the rust code.
    out: ../crates/proto/src/gen
    opt:
      # Specify which parts of the protos should have their `bytes` fields
      # converted to Rust `Bytes` (= zero-copy view into a shared buffer) rather
      # than `Vec<u8>`.
      #
      # The upside of using the `Bytes` type is that it avoids copies while
      # parsing the protos.
      #
      # The downside is that the underlying buffer is kept alive as long as there
      # is at least one view into it, so holding on to a small amount of data
      # (e.g., a hash) could keep a much larger buffer live for a long time,
      # increasing memory use.
      #
      # Getting this tradeoff perfect isn't essential, but it's useful to keep in mind.
      #
      # Transactions have a lot of `bytes` fields that need to be converted
      # into fixed-size byte arrays anyways, so there's no point allocating
      # into a temporary vector.
      - bytes=.penumbra.core.transaction
      # The byte fields in a compact block will also be converted to fixed-size
      # byte arrays and then discarded.
      - bytes=.penumbra.core.chain.v1alpha1.CompactBlock
      - bytes=.penumbra.core.crypto.v1alpha1.NotePayload
      - file_descriptor_set=true
      - compile_well_known_types=true
      - extern_path=.google.protobuf=::pbjson_types
      - extern_path=.ibc=::ibc_proto::ibc
      - extern_path=.ics23=::ics23

  - plugin: buf.build/community/neoeinstein-tonic:v0.2.2
    out: ../crates/proto/src/gen
    opt:
      - compile_well_known_types
      - extern_path=.google.protobuf=::pbjson_types
      - extern_path=.ibc=::ibc_proto::ibc
      - extern_path=.ics23=::ics23

      # For the client code, we also want to generate RPC instances, so compile via tonic:
      - server_mod_attribute=penumbra.client.v1alpha1=#[cfg(feature = "rpc")]
      - client_mod_attribute=penumbra.client.v1alpha1=#[cfg(feature = "rpc")]

      - server_mod_attribute=penumbra.view.v1alpha1=#[cfg(feature = "rpc")]
      - client_mod_attribute=penumbra.view.v1alpha1=#[cfg(feature = "rpc")]

      - server_mod_attribute=penumbra.custody.v1alpha1=#[cfg(feature = "rpc")]
      - client_mod_attribute=penumbra.custody.v1alpha1=#[cfg(feature = "rpc")]

      - server_mod_attribute=penumbra.narsil.ledger.v1alpha1=#[cfg(feature = "rpc")]
      - client_mod_attribute=penumbra.narsil.ledger.v1alpha1=#[cfg(feature = "rpc")]

      - server_mod_attribute=cosmos.base.tendermint.v1beta1=#[cfg(feature = "rpc")]
      - client_mod_attribute=cosmos.base.tendermint.v1beta1=#[cfg(feature = "rpc")]
