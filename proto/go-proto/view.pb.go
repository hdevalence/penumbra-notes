// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: view.proto

package go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NoteByCommitmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FvkHash        *FullViewingKeyHash `protobuf:"bytes,1,opt,name=fvk_hash,json=fvkHash,proto3" json:"fvk_hash,omitempty"`
	NoteCommitment *NoteCommitment     `protobuf:"bytes,2,opt,name=note_commitment,json=noteCommitment,proto3" json:"note_commitment,omitempty"`
	// If set to true, waits to return until the requested note is detected.
	AwaitDetection bool `protobuf:"varint,3,opt,name=await_detection,json=awaitDetection,proto3" json:"await_detection,omitempty"`
}

func (x *NoteByCommitmentRequest) Reset() {
	*x = NoteByCommitmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteByCommitmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteByCommitmentRequest) ProtoMessage() {}

func (x *NoteByCommitmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteByCommitmentRequest.ProtoReflect.Descriptor instead.
func (*NoteByCommitmentRequest) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{0}
}

func (x *NoteByCommitmentRequest) GetFvkHash() *FullViewingKeyHash {
	if x != nil {
		return x.FvkHash
	}
	return nil
}

func (x *NoteByCommitmentRequest) GetNoteCommitment() *NoteCommitment {
	if x != nil {
		return x.NoteCommitment
	}
	return nil
}

func (x *NoteByCommitmentRequest) GetAwaitDetection() bool {
	if x != nil {
		return x.AwaitDetection
	}
	return false
}

// Requests the current chain parameters from the view service.
type ChainParamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChainParamsRequest) Reset() {
	*x = ChainParamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChainParamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChainParamsRequest) ProtoMessage() {}

func (x *ChainParamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChainParamsRequest.ProtoReflect.Descriptor instead.
func (*ChainParamsRequest) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{1}
}

// Requests all assets known to the view service.
type AssetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AssetRequest) Reset() {
	*x = AssetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetRequest) ProtoMessage() {}

func (x *AssetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetRequest.ProtoReflect.Descriptor instead.
func (*AssetRequest) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{2}
}

// Requests sync status of the view service.
type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the FVK for the notes to query.
	FvkHash *FullViewingKeyHash `protobuf:"bytes,1,opt,name=fvk_hash,json=fvkHash,proto3" json:"fvk_hash,omitempty"`
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{3}
}

func (x *StatusRequest) GetFvkHash() *FullViewingKeyHash {
	if x != nil {
		return x.FvkHash
	}
	return nil
}

// Returns the status of the view service and whether it is synchronized with the chain state.
type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The height the view service has synchronized to so far
	SyncHeight uint64 `protobuf:"varint,1,opt,name=sync_height,json=syncHeight,proto3" json:"sync_height,omitempty"`
	// Whether the view service is catching up with the chain state
	CatchingUp bool `protobuf:"varint,2,opt,name=catching_up,json=catchingUp,proto3" json:"catching_up,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{4}
}

func (x *StatusResponse) GetSyncHeight() uint64 {
	if x != nil {
		return x.SyncHeight
	}
	return 0
}

func (x *StatusResponse) GetCatchingUp() bool {
	if x != nil {
		return x.CatchingUp
	}
	return false
}

// Requests streaming updates on the sync height until the view service is synchronized.
type StatusStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the FVK for the notes to query.
	FvkHash *FullViewingKeyHash `protobuf:"bytes,1,opt,name=fvk_hash,json=fvkHash,proto3" json:"fvk_hash,omitempty"`
}

func (x *StatusStreamRequest) Reset() {
	*x = StatusStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusStreamRequest) ProtoMessage() {}

func (x *StatusStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusStreamRequest.ProtoReflect.Descriptor instead.
func (*StatusStreamRequest) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{5}
}

func (x *StatusStreamRequest) GetFvkHash() *FullViewingKeyHash {
	if x != nil {
		return x.FvkHash
	}
	return nil
}

// A streaming sync status update
type StatusStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatestKnownBlockHeight uint64 `protobuf:"varint,1,opt,name=latest_known_block_height,json=latestKnownBlockHeight,proto3" json:"latest_known_block_height,omitempty"`
	SyncHeight             uint64 `protobuf:"varint,2,opt,name=sync_height,json=syncHeight,proto3" json:"sync_height,omitempty"`
}

func (x *StatusStreamResponse) Reset() {
	*x = StatusStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusStreamResponse) ProtoMessage() {}

func (x *StatusStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusStreamResponse.ProtoReflect.Descriptor instead.
func (*StatusStreamResponse) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{6}
}

func (x *StatusStreamResponse) GetLatestKnownBlockHeight() uint64 {
	if x != nil {
		return x.LatestKnownBlockHeight
	}
	return 0
}

func (x *StatusStreamResponse) GetSyncHeight() uint64 {
	if x != nil {
		return x.SyncHeight
	}
	return 0
}

// A note plaintext with associated metadata about its status.
type SpendableNoteRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The note commitment, identifying the note.
	NoteCommitment *NoteCommitment `protobuf:"bytes,1,opt,name=note_commitment,json=noteCommitment,proto3" json:"note_commitment,omitempty"`
	// The note plaintext itself.
	Note *Note `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	// A precomputed decryption of the note's address index.
	AddressIndex *AddressIndex `protobuf:"bytes,3,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
	// The note's nullifier.
	Nullifier *Nullifier `protobuf:"bytes,4,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	// The height at which the note was created.
	HeightCreated uint64 `protobuf:"varint,5,opt,name=height_created,json=heightCreated,proto3" json:"height_created,omitempty"`
	// Records whether the note was spent (and if so, at what height).
	HeightSpent *uint64 `protobuf:"varint,6,opt,name=height_spent,json=heightSpent,proto3,oneof" json:"height_spent,omitempty"`
	// The note position.
	Position uint64 `protobuf:"varint,7,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *SpendableNoteRecord) Reset() {
	*x = SpendableNoteRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendableNoteRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendableNoteRecord) ProtoMessage() {}

func (x *SpendableNoteRecord) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendableNoteRecord.ProtoReflect.Descriptor instead.
func (*SpendableNoteRecord) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{7}
}

func (x *SpendableNoteRecord) GetNoteCommitment() *NoteCommitment {
	if x != nil {
		return x.NoteCommitment
	}
	return nil
}

func (x *SpendableNoteRecord) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *SpendableNoteRecord) GetAddressIndex() *AddressIndex {
	if x != nil {
		return x.AddressIndex
	}
	return nil
}

func (x *SpendableNoteRecord) GetNullifier() *Nullifier {
	if x != nil {
		return x.Nullifier
	}
	return nil
}

func (x *SpendableNoteRecord) GetHeightCreated() uint64 {
	if x != nil {
		return x.HeightCreated
	}
	return 0
}

func (x *SpendableNoteRecord) GetHeightSpent() uint64 {
	if x != nil && x.HeightSpent != nil {
		return *x.HeightSpent
	}
	return 0
}

func (x *SpendableNoteRecord) GetPosition() uint64 {
	if x != nil {
		return x.Position
	}
	return 0
}

// A query for notes known by the view service.
//
// This message uses the fact that all proto fields are optional
// to allow various filtering on the returned notes.
type NotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the FVK for the notes to query.
	FvkHash *FullViewingKeyHash `protobuf:"bytes,1,opt,name=fvk_hash,json=fvkHash,proto3" json:"fvk_hash,omitempty"`
	// If set, return spent notes as well as unspent notes.
	IncludeSpent bool `protobuf:"varint,2,opt,name=include_spent,json=includeSpent,proto3" json:"include_spent,omitempty"`
	// If set, only return notes with the specified asset id.
	AssetId *AssetId `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
	// If set, only return notes with the specified address index.
	AddressIndex *AddressIndex `protobuf:"bytes,4,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
	// If set, stop returning notes once the total exceeds this amount.
	//
	// Ignored if `asset_id` is unset or if `include_spent` is set.
	AmountToSpend uint64 `protobuf:"varint,5,opt,name=amount_to_spend,json=amountToSpend,proto3" json:"amount_to_spend,omitempty"`
}

func (x *NotesRequest) Reset() {
	*x = NotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotesRequest) ProtoMessage() {}

func (x *NotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotesRequest.ProtoReflect.Descriptor instead.
func (*NotesRequest) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{8}
}

func (x *NotesRequest) GetFvkHash() *FullViewingKeyHash {
	if x != nil {
		return x.FvkHash
	}
	return nil
}

func (x *NotesRequest) GetIncludeSpent() bool {
	if x != nil {
		return x.IncludeSpent
	}
	return false
}

func (x *NotesRequest) GetAssetId() *AssetId {
	if x != nil {
		return x.AssetId
	}
	return nil
}

func (x *NotesRequest) GetAddressIndex() *AddressIndex {
	if x != nil {
		return x.AddressIndex
	}
	return nil
}

func (x *NotesRequest) GetAmountToSpend() uint64 {
	if x != nil {
		return x.AmountToSpend
	}
	return 0
}

type WitnessRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the FVK for the note commitments to query.
	FvkHash *FullViewingKeyHash `protobuf:"bytes,1,opt,name=fvk_hash,json=fvkHash,proto3" json:"fvk_hash,omitempty"`
	// The note commitments to obtain auth paths for.
	NoteCommitments []*NoteCommitment `protobuf:"bytes,2,rep,name=note_commitments,json=noteCommitments,proto3" json:"note_commitments,omitempty"`
}

func (x *WitnessRequest) Reset() {
	*x = WitnessRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WitnessRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WitnessRequest) ProtoMessage() {}

func (x *WitnessRequest) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WitnessRequest.ProtoReflect.Descriptor instead.
func (*WitnessRequest) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{9}
}

func (x *WitnessRequest) GetFvkHash() *FullViewingKeyHash {
	if x != nil {
		return x.FvkHash
	}
	return nil
}

func (x *WitnessRequest) GetNoteCommitments() []*NoteCommitment {
	if x != nil {
		return x.NoteCommitments
	}
	return nil
}

// The plaintext of a note that has been quarantined until the end of an unbonding period.
type QuarantinedNoteRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The note commitment, identifying the note.
	NoteCommitment *NoteCommitment `protobuf:"bytes,1,opt,name=note_commitment,json=noteCommitment,proto3" json:"note_commitment,omitempty"`
	// The note plaintext itself.
	Note *Note `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	// A precomputed decryption of the note's address index.
	AddressIndex *AddressIndex `protobuf:"bytes,3,opt,name=address_index,json=addressIndex,proto3" json:"address_index,omitempty"`
	// The height at which the note was created.
	HeightCreated uint64 `protobuf:"varint,4,opt,name=height_created,json=heightCreated,proto3" json:"height_created,omitempty"`
	// The epoch at which the note will exit quarantine, if unbonding is not interrupted by slashing.
	UnbondingEpoch uint64 `protobuf:"varint,5,opt,name=unbonding_epoch,json=unbondingEpoch,proto3" json:"unbonding_epoch,omitempty"`
	// The validator identity the quarantining is bound to.
	IdentityKey *IdentityKey `protobuf:"bytes,6,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
}

func (x *QuarantinedNoteRecord) Reset() {
	*x = QuarantinedNoteRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuarantinedNoteRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuarantinedNoteRecord) ProtoMessage() {}

func (x *QuarantinedNoteRecord) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuarantinedNoteRecord.ProtoReflect.Descriptor instead.
func (*QuarantinedNoteRecord) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{10}
}

func (x *QuarantinedNoteRecord) GetNoteCommitment() *NoteCommitment {
	if x != nil {
		return x.NoteCommitment
	}
	return nil
}

func (x *QuarantinedNoteRecord) GetNote() *Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *QuarantinedNoteRecord) GetAddressIndex() *AddressIndex {
	if x != nil {
		return x.AddressIndex
	}
	return nil
}

func (x *QuarantinedNoteRecord) GetHeightCreated() uint64 {
	if x != nil {
		return x.HeightCreated
	}
	return 0
}

func (x *QuarantinedNoteRecord) GetUnbondingEpoch() uint64 {
	if x != nil {
		return x.UnbondingEpoch
	}
	return 0
}

func (x *QuarantinedNoteRecord) GetIdentityKey() *IdentityKey {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

// A query for quarantined notes known by the view service.
type QuarantinedNotesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifies the FVK for the notes to query.
	FvkHash *FullViewingKeyHash `protobuf:"bytes,1,opt,name=fvk_hash,json=fvkHash,proto3" json:"fvk_hash,omitempty"`
}

func (x *QuarantinedNotesRequest) Reset() {
	*x = QuarantinedNotesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_view_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuarantinedNotesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuarantinedNotesRequest) ProtoMessage() {}

func (x *QuarantinedNotesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_view_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuarantinedNotesRequest.ProtoReflect.Descriptor instead.
func (*QuarantinedNotesRequest) Descriptor() ([]byte, []int) {
	return file_view_proto_rawDescGZIP(), []int{11}
}

func (x *QuarantinedNotesRequest) GetFvkHash() *FullViewingKeyHash {
	if x != nil {
		return x.FvkHash
	}
	return nil
}

var File_view_proto protoreflect.FileDescriptor

var file_view_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x1a, 0x11, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcc, 0x01, 0x0a, 0x17, 0x4e, 0x6f,
	0x74, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x66, 0x76, 0x6b, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x56, 0x69,
	0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x07, 0x66, 0x76,
	0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x48, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x0e, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x61, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x61, 0x77, 0x61, 0x69, 0x74, 0x44,
	0x65, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x14, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e,
	0x0a, 0x0c, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x4f,
	0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x08, 0x66, 0x76, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b,
	0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x07, 0x66, 0x76, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22,
	0x52, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x48, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x5f, 0x75,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e,
	0x67, 0x55, 0x70, 0x22, 0x55, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x66, 0x76,
	0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x46,
	0x75, 0x6c, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73,
	0x68, 0x52, 0x07, 0x66, 0x76, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x22, 0x72, 0x0a, 0x14, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x4b, 0x6e, 0x6f,
	0x77, 0x6e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0a, 0x73, 0x79, 0x6e, 0x63, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0xfb,
	0x02, 0x0a, 0x0a, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x48, 0x0a,
	0x0f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f,
	0x74, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x75, 0x6c, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0c, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52,
	0x0b, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x53, 0x70, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x22, 0x94, 0x02, 0x0a,
	0x0c, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a,
	0x08, 0x66, 0x76, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79,
	0x48, 0x61, 0x73, 0x68, 0x52, 0x07, 0x66, 0x76, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x70, 0x65,
	0x6e, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x52, 0x07,
	0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0c, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x22, 0x9c, 0x01, 0x0a, 0x0e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x08, 0x66, 0x76, 0x6b, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x56,
	0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x07, 0x66,
	0x76, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x4a, 0x0a, 0x10, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0f, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x22, 0xe1, 0x02, 0x0a, 0x15, 0x51, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e,
	0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x48, 0x0a, 0x0f,
	0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74,
	0x65, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0c, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x3f, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x59, 0x0a, 0x17, 0x51, 0x75, 0x61, 0x72, 0x61, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x08, 0x66, 0x76, 0x6b, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e,
	0x67, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x73, 0x68, 0x52, 0x07, 0x66, 0x76, 0x6b, 0x48, 0x61, 0x73,
	0x68, 0x32, 0x8b, 0x05, 0x0a, 0x0c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x12, 0x45, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0c, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x41, 0x0a, 0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x30, 0x01, 0x12, 0x62, 0x0a, 0x10, 0x51, 0x75, 0x61, 0x72, 0x61,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x51, 0x75, 0x61, 0x72,
	0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x64, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x76,
	0x69, 0x65, 0x77, 0x2e, 0x51, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x64, 0x4e,
	0x6f, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x30, 0x01, 0x12, 0x4b, 0x0a, 0x07, 0x57,
	0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x69, 0x74,
	0x6e, 0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x3f, 0x0a, 0x06, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x73, 0x12, 0x1b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x76, 0x69,
	0x65, 0x77, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x30, 0x01, 0x12, 0x4d, 0x0a, 0x0b, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x55, 0x0a, 0x10, 0x4e, 0x6f, 0x74, 0x65,
	0x42, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x76, 0x69, 0x65, 0x77, 0x2e, 0x4e, 0x6f, 0x74,
	0x65, 0x42, 0x79, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x76, 0x69, 0x65, 0x77, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42,
	0x32, 0x5a, 0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2d, 0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_view_proto_rawDescOnce sync.Once
	file_view_proto_rawDescData = file_view_proto_rawDesc
)

func file_view_proto_rawDescGZIP() []byte {
	file_view_proto_rawDescOnce.Do(func() {
		file_view_proto_rawDescData = protoimpl.X.CompressGZIP(file_view_proto_rawDescData)
	})
	return file_view_proto_rawDescData
}

var file_view_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_view_proto_goTypes = []interface{}{
	(*NoteByCommitmentRequest)(nil), // 0: penumbra.view.NoteByCommitmentRequest
	(*ChainParamsRequest)(nil),      // 1: penumbra.view.ChainParamsRequest
	(*AssetRequest)(nil),            // 2: penumbra.view.AssetRequest
	(*StatusRequest)(nil),           // 3: penumbra.view.StatusRequest
	(*StatusResponse)(nil),          // 4: penumbra.view.StatusResponse
	(*StatusStreamRequest)(nil),     // 5: penumbra.view.StatusStreamRequest
	(*StatusStreamResponse)(nil),    // 6: penumbra.view.StatusStreamResponse
	(*SpendableNoteRecord)(nil),              // 7: penumbra.view.SpendableNoteRecord
	(*NotesRequest)(nil),            // 8: penumbra.view.NotesRequest
	(*WitnessRequest)(nil),          // 9: penumbra.view.WitnessRequest
	(*QuarantinedNoteRecord)(nil),   // 10: penumbra.view.QuarantinedNoteRecord
	(*QuarantinedNotesRequest)(nil), // 11: penumbra.view.QuarantinedNotesRequest
	(*FullViewingKeyHash)(nil),      // 12: penumbra.crypto.FullViewingKeyHash
	(*NoteCommitment)(nil),          // 13: penumbra.crypto.NoteCommitment
	(*Note)(nil),                    // 14: penumbra.crypto.Note
	(*AddressIndex)(nil),            // 15: penumbra.crypto.AddressIndex
	(*Nullifier)(nil),               // 16: penumbra.crypto.Nullifier
	(*AssetId)(nil),                 // 17: penumbra.crypto.AssetId
	(*IdentityKey)(nil),             // 18: penumbra.crypto.IdentityKey
	(*WitnessData)(nil),             // 19: penumbra.transaction.WitnessData
	(*Asset)(nil),                   // 20: penumbra.crypto.Asset
	(*ChainParameters)(nil),             // 21: penumbra.chain.ChainParameters
}
var file_view_proto_depIdxs = []int32{
	12, // 0: penumbra.view.NoteByCommitmentRequest.fvk_hash:type_name -> penumbra.crypto.FullViewingKeyHash
	13, // 1: penumbra.view.NoteByCommitmentRequest.note_commitment:type_name -> penumbra.crypto.NoteCommitment
	12, // 2: penumbra.view.StatusRequest.fvk_hash:type_name -> penumbra.crypto.FullViewingKeyHash
	12, // 3: penumbra.view.StatusStreamRequest.fvk_hash:type_name -> penumbra.crypto.FullViewingKeyHash
	13, // 4: penumbra.view.SpendableNoteRecord.note_commitment:type_name -> penumbra.crypto.NoteCommitment
	14, // 5: penumbra.view.SpendableNoteRecord.note:type_name -> penumbra.crypto.Note
	15, // 6: penumbra.view.SpendableNoteRecord.address_index:type_name -> penumbra.crypto.AddressIndex
	16, // 7: penumbra.view.SpendableNoteRecord.nullifier:type_name -> penumbra.crypto.Nullifier
	12, // 8: penumbra.view.NotesRequest.fvk_hash:type_name -> penumbra.crypto.FullViewingKeyHash
	17, // 9: penumbra.view.NotesRequest.asset_id:type_name -> penumbra.crypto.AssetId
	15, // 10: penumbra.view.NotesRequest.address_index:type_name -> penumbra.crypto.AddressIndex
	12, // 11: penumbra.view.WitnessRequest.fvk_hash:type_name -> penumbra.crypto.FullViewingKeyHash
	13, // 12: penumbra.view.WitnessRequest.note_commitments:type_name -> penumbra.crypto.NoteCommitment
	13, // 13: penumbra.view.QuarantinedNoteRecord.note_commitment:type_name -> penumbra.crypto.NoteCommitment
	14, // 14: penumbra.view.QuarantinedNoteRecord.note:type_name -> penumbra.crypto.Note
	15, // 15: penumbra.view.QuarantinedNoteRecord.address_index:type_name -> penumbra.crypto.AddressIndex
	18, // 16: penumbra.view.QuarantinedNoteRecord.identity_key:type_name -> penumbra.crypto.IdentityKey
	12, // 17: penumbra.view.QuarantinedNotesRequest.fvk_hash:type_name -> penumbra.crypto.FullViewingKeyHash
	3,  // 18: penumbra.view.ViewProtocol.Status:input_type -> penumbra.view.StatusRequest
	5,  // 19: penumbra.view.ViewProtocol.StatusStream:input_type -> penumbra.view.StatusStreamRequest
	8,  // 20: penumbra.view.ViewProtocol.Notes:input_type -> penumbra.view.NotesRequest
	11, // 21: penumbra.view.ViewProtocol.QuarantinedNotes:input_type -> penumbra.view.QuarantinedNotesRequest
	9,  // 22: penumbra.view.ViewProtocol.Witness:input_type -> penumbra.view.WitnessRequest
	2,  // 23: penumbra.view.ViewProtocol.Assets:input_type -> penumbra.view.AssetRequest
	1,  // 24: penumbra.view.ViewProtocol.ChainParameters:input_type -> penumbra.view.ChainParamsRequest
	0,  // 25: penumbra.view.ViewProtocol.NoteByCommitment:input_type -> penumbra.view.NoteByCommitmentRequest
	4,  // 26: penumbra.view.ViewProtocol.Status:output_type -> penumbra.view.StatusResponse
	6,  // 27: penumbra.view.ViewProtocol.StatusStream:output_type -> penumbra.view.StatusStreamResponse
	7,  // 28: penumbra.view.ViewProtocol.Notes:output_type -> penumbra.view.SpendableNoteRecord
	10, // 29: penumbra.view.ViewProtocol.QuarantinedNotes:output_type -> penumbra.view.QuarantinedNoteRecord
	19, // 30: penumbra.view.ViewProtocol.Witness:output_type -> penumbra.transaction.WitnessData
	20, // 31: penumbra.view.ViewProtocol.Assets:output_type -> penumbra.crypto.Asset
	21, // 32: penumbra.view.ViewProtocol.ChainParameters:output_type -> penumbra.chain.ChainParameters
	7,  // 33: penumbra.view.ViewProtocol.NoteByCommitment:output_type -> penumbra.view.SpendableNoteRecord
	26, // [26:34] is the sub-list for method output_type
	18, // [18:26] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_view_proto_init() }
func file_view_proto_init() {
	if File_view_proto != nil {
		return
	}
	file_transaction_proto_init()
	file_crypto_proto_init()
	file_chain_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_view_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteByCommitmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChainParamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendableNoteRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WitnessRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuarantinedNoteRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_view_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuarantinedNotesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_view_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_view_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_view_proto_goTypes,
		DependencyIndexes: file_view_proto_depIdxs,
		MessageInfos:      file_view_proto_msgTypes,
	}.Build()
	File_view_proto = out.File
	file_view_proto_rawDesc = nil
	file_view_proto_goTypes = nil
	file_view_proto_depIdxs = nil
}
