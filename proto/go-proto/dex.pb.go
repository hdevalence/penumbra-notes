// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: dex.proto

package go_proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A transaction action that submits a swap to the dex.
type Swap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Zkproof []byte `protobuf:"bytes,1,opt,name=zkproof,proto3" json:"zkproof,omitempty"`
	// Encrypted amount of asset 1 of the trading pair.
	EncAmount_1 *MockFlowCiphertext `protobuf:"bytes,2,opt,name=enc_amount_1,json=encAmount1,proto3" json:"enc_amount_1,omitempty"`
	// Encrypted amount of asset 2 of the trading pair.
	EncAmount_2 *MockFlowCiphertext `protobuf:"bytes,3,opt,name=enc_amount_2,json=encAmount2,proto3" json:"enc_amount_2,omitempty"`
	// Encapsulates the authorized fields of the Swap transaction, used in signing.
	Body *SwapBody `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Swap) Reset() {
	*x = Swap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swap) ProtoMessage() {}

func (x *Swap) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swap.ProtoReflect.Descriptor instead.
func (*Swap) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{0}
}

func (x *Swap) GetZkproof() []byte {
	if x != nil {
		return x.Zkproof
	}
	return nil
}

func (x *Swap) GetEncAmount_1() *MockFlowCiphertext {
	if x != nil {
		return x.EncAmount_1
	}
	return nil
}

func (x *Swap) GetEncAmount_2() *MockFlowCiphertext {
	if x != nil {
		return x.EncAmount_2
	}
	return nil
}

func (x *Swap) GetBody() *SwapBody {
	if x != nil {
		return x.Body
	}
	return nil
}

// A transaction action that obtains assets previously confirmed
// via a Swap transaction. Does not include a spend authorization
// signature, as it is only capable of consuming the NFT from a
// Swap transaction.
type SwapClaim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Proves the spent note records 1 unit of the swap NFT.
	Zkproof []byte `protobuf:"bytes,1,opt,name=zkproof,proto3" json:"zkproof,omitempty"`
	// The nullifier for the Swap NFT to be consumed.
	Nullifier *Nullifier `protobuf:"bytes,2,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	// The fee allows `SwapClaim` without an additional `Spend`.
	Fee *Fee `protobuf:"bytes,3,opt,name=fee,proto3" json:"fee,omitempty"`
	// Note output for asset 1.
	Output_1 *NotePayload `protobuf:"bytes,4,opt,name=output_1,json=output1,proto3" json:"output_1,omitempty"`
	// Note output for asset 2.
	Output_2 *NotePayload `protobuf:"bytes,5,opt,name=output_2,json=output2,proto3" json:"output_2,omitempty"`
	// Block root for the associated `Swap` action, identifying the block the `Swap` was included in.
	Anchor *MerkleRoot `protobuf:"bytes,6,opt,name=anchor,proto3" json:"anchor,omitempty"`
	// Price for asset 1 in the associated `Swap`.
	Price_1 uint64 `protobuf:"varint,7,opt,name=price_1,json=price1,proto3" json:"price_1,omitempty"`
	// Price for asset 2 in the associated `Swap`.
	Price_2 uint64 `protobuf:"varint,8,opt,name=price_2,json=price2,proto3" json:"price_2,omitempty"`
}

func (x *SwapClaim) Reset() {
	*x = SwapClaim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapClaim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapClaim) ProtoMessage() {}

func (x *SwapClaim) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapClaim.ProtoReflect.Descriptor instead.
func (*SwapClaim) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{1}
}

func (x *SwapClaim) GetZkproof() []byte {
	if x != nil {
		return x.Zkproof
	}
	return nil
}

func (x *SwapClaim) GetNullifier() *Nullifier {
	if x != nil {
		return x.Nullifier
	}
	return nil
}

func (x *SwapClaim) GetFee() *Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *SwapClaim) GetOutput_1() *NotePayload {
	if x != nil {
		return x.Output_1
	}
	return nil
}

func (x *SwapClaim) GetOutput_2() *NotePayload {
	if x != nil {
		return x.Output_2
	}
	return nil
}

func (x *SwapClaim) GetAnchor() *MerkleRoot {
	if x != nil {
		return x.Anchor
	}
	return nil
}

func (x *SwapClaim) GetPrice_1() uint64 {
	if x != nil {
		return x.Price_1
	}
	return 0
}

func (x *SwapClaim) GetPrice_2() uint64 {
	if x != nil {
		return x.Price_2
	}
	return 0
}

// The authorized data of a Swap transaction.
type SwapBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The trading pair to swap.
	TradingPair *TradingPair `protobuf:"bytes,1,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
	// Commitment to the amount for asset 1 (delta 1).
	Ca1 []byte `protobuf:"bytes,2,opt,name=ca1,proto3" json:"ca1,omitempty"`
	// Commitment to the amount for asset 2 (delta 2).
	Ca2 []byte `protobuf:"bytes,3,opt,name=ca2,proto3" json:"ca2,omitempty"`
	// A commitment to the fee's contribution to the transaction's value balance.
	Cf []byte `protobuf:"bytes,4,opt,name=cf,proto3" json:"cf,omitempty"`
	// Swap NFT recording the user's contribution.
	SwapNft *NotePayload `protobuf:"bytes,5,opt,name=swap_nft,json=swapNft,proto3" json:"swap_nft,omitempty"`
	// Encrypted version of the original `Swap`, symmetrically encrypted w/ viewing key.
	SwapCiphertext []byte `protobuf:"bytes,6,opt,name=swap_ciphertext,json=swapCiphertext,proto3" json:"swap_ciphertext,omitempty"`
}

func (x *SwapBody) Reset() {
	*x = SwapBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapBody) ProtoMessage() {}

func (x *SwapBody) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapBody.ProtoReflect.Descriptor instead.
func (*SwapBody) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{2}
}

func (x *SwapBody) GetTradingPair() *TradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

func (x *SwapBody) GetCa1() []byte {
	if x != nil {
		return x.Ca1
	}
	return nil
}

func (x *SwapBody) GetCa2() []byte {
	if x != nil {
		return x.Ca2
	}
	return nil
}

func (x *SwapBody) GetCf() []byte {
	if x != nil {
		return x.Cf
	}
	return nil
}

func (x *SwapBody) GetSwapNft() *NotePayload {
	if x != nil {
		return x.SwapNft
	}
	return nil
}

func (x *SwapBody) GetSwapCiphertext() []byte {
	if x != nil {
		return x.SwapCiphertext
	}
	return nil
}

type SwapPlaintext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The trading pair to swap.
	TradingPair *TradingPair `protobuf:"bytes,1,opt,name=trading_pair,json=tradingPair,proto3" json:"trading_pair,omitempty"`
	// Amount of asset 1
	T1 uint64 `protobuf:"varint,2,opt,name=t1,proto3" json:"t1,omitempty"`
	// Amount of asset 2
	T2 uint64 `protobuf:"varint,3,opt,name=t2,proto3" json:"t2,omitempty"`
	// Fee
	Fee *Fee `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee,omitempty"`
	// Diversified basepoint
	BD []byte `protobuf:"bytes,5,opt,name=b_d,json=bD,proto3" json:"b_d,omitempty"`
	// Diversified public key
	PkD []byte `protobuf:"bytes,6,opt,name=pk_d,json=pkD,proto3" json:"pk_d,omitempty"`
}

func (x *SwapPlaintext) Reset() {
	*x = SwapPlaintext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapPlaintext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapPlaintext) ProtoMessage() {}

func (x *SwapPlaintext) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapPlaintext.ProtoReflect.Descriptor instead.
func (*SwapPlaintext) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{3}
}

func (x *SwapPlaintext) GetTradingPair() *TradingPair {
	if x != nil {
		return x.TradingPair
	}
	return nil
}

func (x *SwapPlaintext) GetT1() uint64 {
	if x != nil {
		return x.T1
	}
	return 0
}

func (x *SwapPlaintext) GetT2() uint64 {
	if x != nil {
		return x.T2
	}
	return 0
}

func (x *SwapPlaintext) GetFee() *Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *SwapPlaintext) GetBD() []byte {
	if x != nil {
		return x.BD
	}
	return nil
}

func (x *SwapPlaintext) GetPkD() []byte {
	if x != nil {
		return x.PkD
	}
	return nil
}

type MockFlowCiphertext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *MockFlowCiphertext) Reset() {
	*x = MockFlowCiphertext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MockFlowCiphertext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MockFlowCiphertext) ProtoMessage() {}

func (x *MockFlowCiphertext) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MockFlowCiphertext.ProtoReflect.Descriptor instead.
func (*MockFlowCiphertext) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{4}
}

func (x *MockFlowCiphertext) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Holds two asset IDs. Ordering doesn't reflect trading direction, however
// since the `AssetId` type is `Ord + PartialOrd`, there can be only one
// `TradingPair` per asset pair.
type TradingPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first asset of the pair.
	Asset_1 *AssetId `protobuf:"bytes,1,opt,name=asset_1,json=asset1,proto3" json:"asset_1,omitempty"`
	// The second asset of the pair.
	Asset_2 *AssetId `protobuf:"bytes,2,opt,name=asset_2,json=asset2,proto3" json:"asset_2,omitempty"`
}

func (x *TradingPair) Reset() {
	*x = TradingPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dex_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradingPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradingPair) ProtoMessage() {}

func (x *TradingPair) ProtoReflect() protoreflect.Message {
	mi := &file_dex_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradingPair.ProtoReflect.Descriptor instead.
func (*TradingPair) Descriptor() ([]byte, []int) {
	return file_dex_proto_rawDescGZIP(), []int{5}
}

func (x *TradingPair) GetAsset_1() *AssetId {
	if x != nil {
		return x.Asset_1
	}
	return nil
}

func (x *TradingPair) GetAsset_2() *AssetId {
	if x != nil {
		return x.Asset_2
	}
	return nil
}

var File_dex_proto protoreflect.FileDescriptor

var file_dex_proto_rawDesc = []byte{
	0x0a, 0x09, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x1a, 0x0c, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x01, 0x0a, 0x04, 0x53,
	0x77, 0x61, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x42, 0x0a,
	0x0c, 0x65, 0x6e, 0x63, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x31, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64,
	0x65, 0x78, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x31, 0x12, 0x42, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x4d, 0x6f, 0x63, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x43,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x32, 0x12, 0x2a, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64,
	0x65, 0x78, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0xe5, 0x02, 0x0a, 0x09, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12,
	0x18, 0x0a, 0x07, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x07, 0x7a, 0x6b, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x38, 0x0a, 0x09, 0x6e, 0x75, 0x6c,
	0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e,
	0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65,
	0x12, 0x37, 0x0a, 0x08, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x31, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x31, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x5f, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x6f,
	0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x32, 0x12, 0x33, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52,
	0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x5f, 0x31, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x31,
	0x12, 0x17, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x32, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x70, 0x72, 0x69, 0x63, 0x65, 0x32, 0x22, 0xde, 0x01, 0x0a, 0x08, 0x53, 0x77,
	0x61, 0x70, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3c, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x50, 0x61, 0x69, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x03, 0x63, 0x61, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x61, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x63, 0x61, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x63, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x63, 0x66, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x6e, 0x66, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x74,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x73, 0x77, 0x61, 0x70, 0x4e, 0x66,
	0x74, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x77, 0x61, 0x70,
	0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x22, 0xbe, 0x01, 0x0a, 0x0d, 0x53,
	0x77, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3c, 0x0a, 0x0c,
	0x74, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x64, 0x65,
	0x78, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x31,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x32,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x74, 0x32, 0x12, 0x2b, 0x0a, 0x03, 0x66, 0x65,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x0f, 0x0a, 0x03, 0x62, 0x5f, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x62, 0x44, 0x12, 0x11, 0x0a, 0x04, 0x70, 0x6b, 0x5f, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x70, 0x6b, 0x44, 0x22, 0x2a, 0x0a, 0x12, 0x4d,
	0x6f, 0x63, 0x6b, 0x46, 0x6c, 0x6f, 0x77, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x73, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x69, 0x72, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x31, 0x12, 0x31, 0x0a, 0x07, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x41, 0x73, 0x73,
	0x65, 0x74, 0x49, 0x64, 0x52, 0x06, 0x61, 0x73, 0x73, 0x65, 0x74, 0x32, 0x42, 0x32, 0x5a, 0x30,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2d, 0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dex_proto_rawDescOnce sync.Once
	file_dex_proto_rawDescData = file_dex_proto_rawDesc
)

func file_dex_proto_rawDescGZIP() []byte {
	file_dex_proto_rawDescOnce.Do(func() {
		file_dex_proto_rawDescData = protoimpl.X.CompressGZIP(file_dex_proto_rawDescData)
	})
	return file_dex_proto_rawDescData
}

var file_dex_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_dex_proto_goTypes = []interface{}{
	(*Swap)(nil),               // 0: penumbra.dex.Swap
	(*SwapClaim)(nil),          // 1: penumbra.dex.SwapClaim
	(*SwapBody)(nil),           // 2: penumbra.dex.SwapBody
	(*SwapPlaintext)(nil),      // 3: penumbra.dex.SwapPlaintext
	(*MockFlowCiphertext)(nil), // 4: penumbra.dex.MockFlowCiphertext
	(*TradingPair)(nil),        // 5: penumbra.dex.TradingPair
	(*Nullifier)(nil),          // 6: penumbra.crypto.Nullifier
	(*Fee)(nil),                // 7: penumbra.transaction.Fee
	(*NotePayload)(nil),        // 8: penumbra.crypto.NotePayload
	(*MerkleRoot)(nil),         // 9: penumbra.crypto.MerkleRoot
	(*AssetId)(nil),            // 10: penumbra.crypto.AssetId
}
var file_dex_proto_depIdxs = []int32{
	4,  // 0: penumbra.dex.Swap.enc_amount_1:type_name -> penumbra.dex.MockFlowCiphertext
	4,  // 1: penumbra.dex.Swap.enc_amount_2:type_name -> penumbra.dex.MockFlowCiphertext
	2,  // 2: penumbra.dex.Swap.body:type_name -> penumbra.dex.SwapBody
	6,  // 3: penumbra.dex.SwapClaim.nullifier:type_name -> penumbra.crypto.Nullifier
	7,  // 4: penumbra.dex.SwapClaim.fee:type_name -> penumbra.transaction.Fee
	8,  // 5: penumbra.dex.SwapClaim.output_1:type_name -> penumbra.crypto.NotePayload
	8,  // 6: penumbra.dex.SwapClaim.output_2:type_name -> penumbra.crypto.NotePayload
	9,  // 7: penumbra.dex.SwapClaim.anchor:type_name -> penumbra.crypto.MerkleRoot
	5,  // 8: penumbra.dex.SwapBody.trading_pair:type_name -> penumbra.dex.TradingPair
	8,  // 9: penumbra.dex.SwapBody.swap_nft:type_name -> penumbra.crypto.NotePayload
	5,  // 10: penumbra.dex.SwapPlaintext.trading_pair:type_name -> penumbra.dex.TradingPair
	7,  // 11: penumbra.dex.SwapPlaintext.fee:type_name -> penumbra.transaction.Fee
	10, // 12: penumbra.dex.TradingPair.asset_1:type_name -> penumbra.crypto.AssetId
	10, // 13: penumbra.dex.TradingPair.asset_2:type_name -> penumbra.crypto.AssetId
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_dex_proto_init() }
func file_dex_proto_init() {
	if File_dex_proto != nil {
		return
	}
	file_crypto_proto_init()
	file_transaction_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_dex_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Swap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapClaim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapPlaintext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MockFlowCiphertext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dex_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradingPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dex_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dex_proto_goTypes,
		DependencyIndexes: file_dex_proto_depIdxs,
		MessageInfos:      file_dex_proto_msgTypes,
	}.Build()
	File_dex_proto = out.File
	file_dex_proto_rawDesc = nil
	file_dex_proto_goTypes = nil
	file_dex_proto_depIdxs = nil
}
