syntax = "proto3";

package penumbra.client.v1alpha1;

// TODO: clean up import paths (this is pulling from the ibc-go-vendor root)
import "proofs.proto";

import "penumbra/core/crypto/v1alpha1/crypto.proto";
import "penumbra/core/chain/v1alpha1/chain.proto";
import "penumbra/core/stake/v1alpha1/stake.proto";
import "penumbra/core/dex/v1alpha1/dex.proto";
import "penumbra/core/governance/v1alpha1/governance.proto";

// Methods for accessing chain state that are "oblivious" in the sense that they
// do not request specific portions of the chain state that could reveal private
// client data.  For instance, requesting all asset denominations is oblivious,
// but requesting the asset denomination for a specific asset id is not, because
// it reveals that the client has an interest in that asset specifically.
service ObliviousQuery {
  rpc CompactBlockRange(CompactBlockRangeRequest) returns (stream core.chain.v1alpha1.CompactBlock);
  rpc ChainParameters(ChainParamsRequest) returns (core.chain.v1alpha1.ChainParameters);
  rpc MutableParameters(MutableParametersRequest) returns (stream core.governance.v1alpha1.MutableChainParameter);
  rpc ValidatorInfo(ValidatorInfoRequest) returns (stream core.stake.v1alpha1.ValidatorInfo);
  rpc AssetList(AssetListRequest) returns (core.chain.v1alpha1.KnownAssets);
}

// Lists all assets in Asset Registry
message AssetListRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
}

// Requests a range of compact block data.
message CompactBlockRangeRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // The start height of the range.
  uint64 start_height = 2;
  // The end height of the range.
  //
  // If unset, defaults to the latest block height.
  uint64 end_height = 3;
  // If set, keep the connection alive past end_height,
  // streaming new compact blocks as they are created.
  bool keep_alive = 4;
}

// Requests the governance-mutable parameters available for the chain.
message MutableParametersRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
}

// Requests the global configuration data for the chain.
message ChainParamsRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
}

// Requests information on the chain's validators.
message ValidatorInfoRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // Whether or not to return inactive validators
  bool show_inactive = 2;
}

// Methods for accessing chain state that are "specific" in the sense that they
// request specific portions of the chain state that could reveal private
// client data.  For instance, requesting all asset denominations is oblivious,
// but requesting the asset denomination for a specific asset id is not, because
// it reveals that the client has an interest in that asset specifically.
service SpecificQuery {
  rpc TransactionByNote(core.crypto.v1alpha1.NoteCommitment) returns (core.chain.v1alpha1.NoteSource);
  rpc ValidatorStatus(ValidatorStatusRequest) returns (core.stake.v1alpha1.ValidatorStatus);
  rpc NextValidatorRate(core.crypto.v1alpha1.IdentityKey) returns (core.stake.v1alpha1.RateData);
  rpc BatchSwapOutputData(BatchSwapOutputDataRequest) returns (core.dex.v1alpha1.BatchSwapOutputData);
  rpc StubCPMMReserves(StubCPMMReservesRequest) returns (core.dex.v1alpha1.Reserves);

  // General-purpose key-value state query API, that can be used to query
  // arbitrary keys in the JMT storage.
  rpc KeyValue(KeyValueRequest) returns (KeyValueResponse);
}

// Requests batch swap data associated with a given height and trading pair from the view service.
message BatchSwapOutputDataRequest {
    uint64 height = 1;
    core.dex.v1alpha1.TradingPair trading_pair = 2;
}

// Requests CPMM reserves data associated with a given trading pair from the view service.
message StubCPMMReservesRequest {
    core.dex.v1alpha1.TradingPair trading_pair = 1;
}

message ValidatorStatusRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  core.crypto.v1alpha1.IdentityKey identity_key = 2;
}

// Performs a key-value query, either by key or by key hash.
//
// Proofs are only supported by key.
message KeyValueRequest {
  // The expected chain id (empty string if no expectation).
  string chain_id = 1;
  // If set, the key to fetch from storage.
  bytes key = 2;
  // whether to return a proof
  bool proof = 3;
}

message KeyValueResponse {
  bytes value = 1;

  .ics23.CommitmentProof proof = 2;
}
