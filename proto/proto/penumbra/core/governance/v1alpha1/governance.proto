syntax = "proto3";
option go_package = "github.com/penumbra-zone/penumbra/proto/go-proto";

package penumbra.core.governance.v1alpha1;

import "google/protobuf/any.proto";
import "penumbra/core/crypto/v1alpha1/crypto.proto";

// A vote on a proposal.
message Vote {
  // A vote.
  enum Vote {
    VOTE_UNSPECIFIED = 0;
    VOTE_ABSTAIN = 1;
    VOTE_YES = 2;
    VOTE_NO = 3;
    VOTE_NO_WITH_VETO = 4;
  }

  // The vote.
  Vote vote = 1;
}

// A chain parameter that can be modified by governance.
message MutableChainParameter {
    // The identifier of the parameter, used for submitting change proposals.
    string identifier = 1;
    // A textual description of the parameter and valid values.
    string description = 2;
}

// The current state of a proposal.
message ProposalState {
    // Voting is in progress and the proposal has not yet concluded voting or been withdrawn.
    message Voting {}

    // The proposal has been withdrawn but the voting period is not yet concluded.
    message Withdrawn {
        // The reason for the withdrawal.
        string reason = 1;
    }

    // The voting period has ended, and the proposal has been assigned an outcome.
    message Finished {
        ProposalOutcome outcome = 1;
    }

    // The state of the proposal.
    oneof state {
        Voting voting = 2;
        Withdrawn withdrawn = 3;
        Finished finished = 4;
    }
}

// The outcome of a concluded proposal.
message ProposalOutcome {
    // The proposal was passed.
    message Passed {}

    // The proposal did not pass.
    message Failed {
        // The proposal was withdrawn during the voting period.
        optional string withdrawn_with_reason = 1;
    }

    // The proposal did not pass, and was vetoed.
    message Vetoed {
        // The proposal was withdrawn during the voting period.
        optional string withdrawn_with_reason = 1;
    }

    oneof outcome {
        Passed passed = 1;
        Failed failed = 2;
        Vetoed vetoed = 3;
    }
}

// A list of proposal ids.
message ProposalList {
    repeated uint64 proposals = 1;
}

// A proposal to be voted upon.
message Proposal {
  string title = 1;

  // A natural-language description of the effect of the proposal and its justification.
  string description = 2;

  // The kind of the proposal and details relevant only to that kind of proposal.
  message Payload {
    oneof payload {
      // A signaling proposal.
      Signaling signaling = 2;
      // An emergency proposal.
      Emergency emergency = 3;
      // A parameter change proposal.
      ParameterChange parameter_change = 4;
      // A DAO spend proposal.
      DaoSpend dao_spend = 5;
    }
  }

  // The payload of the proposal.
  Payload payload = 3;

  // A signaling proposal is meant to register a vote on-chain, but does not have an automatic
  // effect when passed.

  // It optionally contains a reference to a commit which contains code to upgrade the chain.
  message Signaling {
    // The commit to be voted upon, if any is relevant.
    optional string commit = 1;
  }

  // An emergency proposal can be passed instantaneously by a 2/3 majority of validators, without
  // waiting for the voting period to expire.
  //
  // If the boolean `halt_chain` is set to `true`, then the chain will halt immediately when the
  // proposal is passed.
  message Emergency {
    // If `true`, the chain will halt immediately when the proposal is passed.
    bool halt_chain = 1;
  }

  // A parameter change proposal describes an alteration to one or more chain parameters, which
  // should take effect at a particular block height `effective_height` (which should be at least
  // the height when the proposal would be passed).
  message ParameterChange {
    // The height at which the change should take effect.
    uint64 effective_height = 1;

    // The set of changes to chain parameters.
    repeated SetParameter new_parameters = 2;

    // A single change to an individual chain parameter.
    message SetParameter {
      // The name of the parameter.
      string parameter = 1;
      // Its new value, as a string (this will be parsed as appropriate for the parameter's type).
      string value = 2;
    }
  }

  // A DAO spend proposal describes zero or more transactions to execute on behalf of the DAO, with
  // access to its funds, and zero or more scheduled transactions from previous passed proposals to
  // cancel.
  message DaoSpend {
    // The sequence of transactions to schedule for execution.
    repeated ScheduleTransaction schedule_transactions = 1;

    // A sequence of previously-scheduled transactions to cancel before they are executed.
    repeated CancelTransaction cancel_transactions = 2;

    // A transaction to be executed as a consequence of this proposal.
    //
    // It is permissible for there to be duplicate transactions scheduled for a given height; they
    // will both be executed.
    message ScheduleTransaction {
      // The height at which the transaction should be executed.
      uint64 execute_at_height = 1;
      // The transaction to be executed.
      google.protobuf.Any transaction = 2;
    }

    // A transaction to be canceled as a consequence of this proposal.
    //
    // If there are multiple duplicate transactions at the height, this cancels only the first.
    // To cancel more of them, specify duplicate cancellations.
    message CancelTransaction {
      // The height for which the transaction was scheduled.
      uint64 scheduled_at_height = 1;
      // The auth hash of the transaction to cancel.
      crypto.v1alpha1.EffectHash effect_hash = 2;
    }
  }
}