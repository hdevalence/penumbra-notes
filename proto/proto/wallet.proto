syntax = "proto3";
package penumbra.wallet;

import "transaction.proto";
import "crypto.proto";

// The wallet protocol is used by a wallet client, who wants to do some
// transaction-related actions, to request data from a wallet service, which is
// responsible for synchronizing and scanning the public chain state with one or
// more full viewing keys.
//
// Wallet protocol requests include a hash of the full viewing key, used to
// identify which set of data to query.  This also works as a pseudo-auth system
// (assuming transport security, the client has to know the FVK to request its
// data).  (TODO: refine this)
service WalletProtocol {
    // Get current status of chain sync
    rpc Status(StatusRequest) returns (StatusResponse);

    // Queries for notes.
    rpc Notes(NotesRequest) returns (stream NoteRecord);

    // Returns authentication paths for the given note commitments.
    //
    // This method takes a batch of input commitments, rather than just one, so
    // that the client can get a consistent set of authentication paths to a
    // common root.  (Otherwise, if a client made multiple requests, the wallet
    // service could have advanced the note commitment tree state between queries).
    rpc AuthPaths(AuthPathsRequest) returns (AuthPathsResponse);
}

// Requests sync status of the wallet service.
message StatusRequest {
    // Identifies the FVK for the notes to query.
    crypto.FullViewingKeyHash fvk_hash = 1;
}

// Returns the status of the wallet server and whether it is synchronized with the chain state.
message StatusResponse {
    /// Whether the wallet service is synchronized with the chain state.
    bool synchronized = 1;
    // The height reported by the full node
    uint64 chain_height = 2;
    // The height the wallet has synchronized to so far
    uint64 sync_height = 3;
}

// A note plaintext with associated metadata about its status.
message NoteRecord {
    // The note commitment, identifying the note.
    crypto.NoteCommitment note_commitment = 1;
    // The note plaintext itself.
    crypto.Note note = 2;
    // A precomputed decryption of the note's diversifier index.
    crypto.DiversifierIndex diversifier_index = 3;
    // The note's nullifier.
    crypto.Nullifier nullifier = 4;
    // The height at which the note was created.
    uint64 height_created = 5;
    // Records whether the note was spent (and if so, at what height).
    optional uint64 height_spent = 6;
}

// A query for notes known by the wallet service.
//
// This message uses the fact that all proto fields are optional
// to allow various filtering on the returned notes.
message NotesRequest {
    // Identifies the FVK for the notes to query.
    crypto.FullViewingKeyHash fvk_hash = 1;

    // If set, return spent notes as well as unspent notes.
    bool include_spent = 2;

    // If set, only return notes with the specified asset id.
    crypto.AssetId asset_id = 3;

    // If set, only return notes with the specified diversifier index.
    crypto.DiversifierIndex diversifier_index = 4;

    // If set, stop returning notes once the total exceeds this amount.
    //
    // Ignored if `asset_id` is unset or if `include_spent` is set.
    uint64 amount_to_spend = 5;
}

message AuthPathsRequest {
    // Identifies the FVK for the note commitments to query.
    crypto.FullViewingKeyHash fvk_hash = 1;

    // The note commitments to obtain auth paths for.
    repeated crypto.NoteCommitment notes = 2;
}

message AuthPathsResponse {
    // The note commitment tree root the auth paths were constructed to.
    crypto.MerkleRoot root = 1;
    // An authentication path for each of the note commitments in the request.
    repeated crypto.AuthPath paths = 2;
}
