syntax = "proto3";
package penumbra.wallet;

import "transaction.proto";

// A wallet service.
service Wallet {
  rpc CompactBlockRange(CompactBlockRangeRequest) returns (stream CompactBlock);
  rpc TransactionByNote(TransactionByNoteRequest) returns (TransactionDetail);
}

// Requests a range of compact block data.
message CompactBlockRangeRequest {
  // The start height of the range.
  uint32 start_height = 1;
  // The end height of the range.
  uint32 end_height = 2;
}

message CompactBlock {
  uint32 height = 1;
  repeated StateFragment fragments = 2;
}

// Contains the minimum data needed to update client state.
message StateFragment {
  // The note commitment for the output note. 32 bytes.
  bytes note_commitment = 2;
  // The encoding of an ephemeral public key. 32 bytes.
  bytes ephemeral_key = 3;
  // An encryption of the newly created note.
  // 132 = 1(type) + 11(d) + 8(amount) + 32(asset_id) + 32(rcm) + 32(pk_d) + 16(MAC) bytes.
  bytes encrypted_note = 4;
}

// Requests the transaction containing a given output note commitment.
// Note: this is bad for privacy, address private fetching later.
message TransactionByNoteRequest {
  // The note commitment we're interested in.
  bytes cm = 1;
}

message TransactionDetail {
  bytes id = 1;
}
