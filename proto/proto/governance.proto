syntax = "proto3";
package penumbra.governance;
option go_package = "github.com/penumbra-zone/penumbra/proto/go-proto";

import "transaction.proto";

// A proposal to be voted upon.
message Proposal {
  // A natural-language description of the effect of the proposal and its justification.
  string description = 1;

  // The kind of the proposal and details relevant only to that kind of proposal.
  oneof kind {
    // A signaling proposal.
    Signaling signaling = 2;
    // An emergency proposal.
    Emergency emergency = 3;
    // A parameter change proposal.
    ParameterChange parameter_change = 4;
    // A DAO spend proposal.
    DaoSpend dao_spend = 5;
  }

  // A signaling proposal is meant to register a vote on-chain, but does not have an automatic
  // effect when passed.

  // It optionally contains a reference to a commit which contains code to upgrade the chain.
  message Signaling {
    // The commit to be voted upon, if any is relevant.
    optional string commit = 1;
  }

  // An emergency proposal can be passed instantaneously by a 2/3 majority of validators, without
  // waiting for the voting period to expire.
  //
  // If the boolean `halt_chain` is set to `true`, then the chain will halt immediately when the
  // proposal is passed.
  message Emergency {
    // If `true`, the chain will halt immediately when the proposal is passed.
    bool halt_chain = 1;
  }

  // A parameter change proposal describes an alteration to one or more chain parameters, which
  // should take effect at a particular block height `effective_height` (which should be at least
  // the height when the proposal would be passed).
  message ParameterChange {
    // The height at which the change should take effect.
    uint64 effective_height = 1;

    // The set of changes to chain parameters.
    repeated SetParameter new_parameters = 2;

    // A single change to an individual chain parameter.
    message SetParameter {
      // The name of the parameter.
      string parameter = 1;
      // Its new value, as a string (this will be parsed as appropriate for the parameter's type).
      string value = 2;
    }
  }

  // A DAO spend proposal describes zero or more transactions to execute on behalf of the DAO, with
  // access to its funds, and zero or more scheduled transactions from previous passed proposals to
  // cancel.
  message DaoSpend {
    // The sequence of transactions to schedule for execution.
    repeated ScheduledTransaction schedule_transactions = 1;

    // A set of previously-scheduled transactions to cancel before they are executed.
    repeated ScheduledTransaction cancel_transactions = 2;

    // A transaction to be executed (or canceled) as a consequence of this proposal.
    message ScheduledTransaction {
      // The height at which the transaction should be executed.
      uint64 execution_height = 1;
      // The transaction to be executed.
      transaction.Transaction transaction = 2;
    }
  }
}