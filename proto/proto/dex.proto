syntax = "proto3";
package penumbra.dex;
option go_package = "github.com/penumbra-zone/penumbra/proto/go-proto";

import "crypto.proto";
import "transaction.proto";

// A transaction action that submits a swap to the dex.
message Swap {
  bytes zkproof = 1;
  // Encrypted amount of asset 1 of the trading pair.
  MockFlowCiphertext enc_amount_1 = 2;
  // Encrypted amount of asset 2 of the trading pair.
  MockFlowCiphertext enc_amount_2 = 3;
  // Encapsulates the authorized fields of the Swap transaction, used in signing.
  SwapBody body = 4;
}

// A transaction action that obtains assets previously confirmed
// via a Swap transaction. Does not include a spend authorization
// signature, as it is only capable of consuming the NFT from a
// Swap transaction.
message SwapClaim {
  // Proves the spent note records 1 unit of the swap NFT.
  bytes zkproof = 1;
  // The nullifier for the Swap NFT to be consumed.
  crypto.Nullifier nullifier = 2;
  // The fee allows `SwapClaim` without an additional `Spend`.
  transaction.Fee fee = 3;
  // Note output for asset 1.
  crypto.NotePayload output_1 = 4;
  // Note output for asset 2.
  crypto.NotePayload output_2 = 5;
  // Block root for the associated `Swap` action, identifying the block the `Swap` was included in.
  crypto.MerkleRoot anchor = 6;
  // Price for asset 1 in the associated `Swap`.
  uint64 price_1 = 7;
  // Price for asset 2 in the associated `Swap`.
  uint64 price_2 = 8;
}

// The authorized data of a Swap transaction.
message SwapBody {
  // The trading pair to swap.
  TradingPair trading_pair = 1;
  // Commitment to the amount for asset 1 (delta 1).
  bytes ca1 = 2;
  // Commitment to the amount for asset 2 (delta 2).
  bytes ca2 = 3;
  // A commitment to the fee's contribution to the transaction's value balance.
  bytes cf = 4;
  // Swap NFT recording the user's contribution.
  crypto.NotePayload swap_nft = 5;
  // Encrypted version of the original `Swap`, symmetrically encrypted w/ viewing key.
  bytes swap_ciphertext = 6;
}

message SwapPlaintext {
    // The trading pair to swap.
    TradingPair trading_pair = 1;
    // Amount of asset 1
    uint64 t1 = 2;
    // Amount of asset 2
    uint64 t2 = 3;
    // Fee
    transaction.Fee fee = 4;
    // Diversified basepoint
    bytes b_d = 5;
    // Diversified public key
    bytes pk_d = 6;
}

message MockFlowCiphertext {
    uint64 value = 1;
}

// Holds two asset IDs. Ordering doesn't reflect trading direction, however
// since the `AssetId` type is `Ord + PartialOrd`, there can be only one
// `TradingPair` per asset pair.
message TradingPair {
  // The first asset of the pair.
  crypto.AssetId asset_1 = 1;
  // The second asset of the pair.
  crypto.AssetId asset_2 = 2;
}