syntax = "proto3";
package penumbra.chain;
option go_package = "github.com/penumbra-zone/penumbra/proto/go-proto";

import "crypto.proto";
import "stake.proto";

// Global chain configuration data, such as chain ID, epoch duration, etc.
message ChainParameters {
  // The identifier of the chain.
  string chain_id = 1;
  // The duration of each epoch, in number of blocks.
  uint64 epoch_duration = 2;

  // The number of epochs an unbonding note for before being released.
  uint64 unbonding_epochs = 3;
  // The maximum number of validators in the consensus set.
  uint64 active_validator_limit = 4;
  // The base reward rate, expressed in basis points of basis points
  uint64 base_reward_rate = 9;
  // The penalty for slashing due to misbehavior, expressed in basis points.
  uint64 slashing_penalty_misbehavior_bps = 5;
  // The penalty for slashing due to downtime, expressed in basis points.
  uint64 slashing_penalty_downtime_bps = 10;
  // The number of blocks in the window to check for downtime.
  uint64 signed_blocks_window_len = 11;
  // The maximum number of blocks in the window each validator can miss signing without slashing.
  uint64 missed_blocks_maximum = 12;

  /// Whether IBC (forming connections, processing IBC packets) is enabled.
  bool ibc_enabled = 6;
  /// Whether inbound ICS-20 transfers are enabled
  bool inbound_ics20_transfers_enabled = 7;
  /// Whether outbound ICS-20 transfers are enabled
  bool outbound_ics20_transfers_enabled = 8;
}

// TODO: delete with legacy code
// Information about a given asset at a given time (as specified by block
// height). Currently this only contains the total supply.
message AssetInfo {
  crypto.AssetId asset_id = 1;
  crypto.Denom denom = 2;
  uint64 as_of_block_height = 3;
  uint64 total_supply = 4;
}

// Contains the minimum data needed to update client state.
message CompactBlock {
  uint64 height = 1;
  // NotePayloads describing new notes.
  repeated AnnotatedNotePayload note_payloads = 2;
  // Nullifiers identifying spent notes.
  repeated crypto.Nullifier nullifiers = 3;
  // The block root of this block.
  crypto.MerkleRoot block_root = 4;
  // The epoch root of this epoch (only present when the block is the last in an epoch).
  crypto.MerkleRoot epoch_root = 5;
  // Newly quarantined things in this block.
  Quarantined quarantined = 6;
  // Validators slashed in this block.
  repeated crypto.IdentityKey slashed = 16;
}

// A note payload, annotated with the note source.
message AnnotatedNotePayload {
  crypto.NotePayload payload = 1;
  NoteSource source = 2;
}

message KnownAssets {
  repeated crypto.Asset assets = 1;
}

// A spicy transaction ID
message NoteSource {
  bytes inner = 1;
}

// A spicier transaction ID: one which can be missing
message DelibleNoteSource {
  NoteSource source = 1;
}

message GenesisAppState {
    message Allocation {
        uint64 amount = 1;
        string denom = 2;
        crypto.Address address = 3;
    }

    chain.ChainParameters chain_params = 1;
    repeated stake.Validator validators = 2;
    repeated Allocation allocations = 3;
}

message Quarantined {
  message Unbonding {
    repeated AnnotatedNotePayload note_payloads = 1;
    repeated crypto.Nullifier nullifiers = 2;
  }

  message ValidatorEntry {
    crypto.IdentityKey identity_key = 1;
    Unbonding unbonding = 2;
  }

  message Scheduled {
    repeated ValidatorEntry per_validator = 1;
  }

  message EpochEntry {
    uint64 unbonding_epoch = 1;
    Scheduled scheduled = 2;
  }

  repeated EpochEntry per_epoch = 1;
}

message Slashed {
  repeated crypto.IdentityKey validators = 1;
}
