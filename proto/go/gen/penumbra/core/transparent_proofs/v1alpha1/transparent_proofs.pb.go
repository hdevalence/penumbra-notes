// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: penumbra/core/transparent_proofs/v1alpha1/transparent_proofs.proto

package transparent_proofsv1alpha1

import (
	v1alpha11 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/crypto/v1alpha1"
	v1alpha1 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/dex/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A Penumbra transparent SwapClaimProof.
type SwapClaimProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The swap being claimed
	SwapPlaintext *v1alpha1.SwapPlaintext `protobuf:"bytes,1,opt,name=swap_plaintext,json=swapPlaintext,proto3" json:"swap_plaintext,omitempty"`
	// Inclusion proof for the swap commitment
	SwapCommitmentProof *v1alpha11.StateCommitmentProof `protobuf:"bytes,4,opt,name=swap_commitment_proof,json=swapCommitmentProof,proto3" json:"swap_commitment_proof,omitempty"`
	// The nullifier key used to derive the swap nullifier
	Nk []byte `protobuf:"bytes,6,opt,name=nk,proto3" json:"nk,omitempty"`
	// *
	// @exclude
	// Describes output amounts
	Lambda_1I *v1alpha11.Amount `protobuf:"bytes,20,opt,name=lambda_1_i,json=lambda1I,proto3" json:"lambda_1_i,omitempty"`
	Lambda_2I *v1alpha11.Amount `protobuf:"bytes,21,opt,name=lambda_2_i,json=lambda2I,proto3" json:"lambda_2_i,omitempty"`
}

func (x *SwapClaimProof) Reset() {
	*x = SwapClaimProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwapClaimProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwapClaimProof) ProtoMessage() {}

func (x *SwapClaimProof) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwapClaimProof.ProtoReflect.Descriptor instead.
func (*SwapClaimProof) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_rawDescGZIP(), []int{0}
}

func (x *SwapClaimProof) GetSwapPlaintext() *v1alpha1.SwapPlaintext {
	if x != nil {
		return x.SwapPlaintext
	}
	return nil
}

func (x *SwapClaimProof) GetSwapCommitmentProof() *v1alpha11.StateCommitmentProof {
	if x != nil {
		return x.SwapCommitmentProof
	}
	return nil
}

func (x *SwapClaimProof) GetNk() []byte {
	if x != nil {
		return x.Nk
	}
	return nil
}

func (x *SwapClaimProof) GetLambda_1I() *v1alpha11.Amount {
	if x != nil {
		return x.Lambda_1I
	}
	return nil
}

func (x *SwapClaimProof) GetLambda_2I() *v1alpha11.Amount {
	if x != nil {
		return x.Lambda_2I
	}
	return nil
}

var File_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto protoreflect.FileDescriptor

var file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_rawDesc = []byte{
	0x0a, 0x42, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x29, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a,
	0x2a, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x65, 0x78, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xe5, 0x02, 0x0a, 0x0e, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x50, 0x0a, 0x0e, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x78,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x50, 0x6c,
	0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x73, 0x77, 0x61, 0x70, 0x50, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x67, 0x0a, 0x15, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x13, 0x73, 0x77, 0x61, 0x70,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x0e, 0x0a, 0x02, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x6e, 0x6b, 0x12,
	0x43, 0x0a, 0x0a, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x5f, 0x31, 0x5f, 0x69, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x08, 0x6c, 0x61, 0x6d, 0x62,
	0x64, 0x61, 0x31, 0x49, 0x12, 0x43, 0x0a, 0x0a, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x5f, 0x32,
	0x5f, 0x69, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x08, 0x6c, 0x61, 0x6d, 0x62, 0x64, 0x61, 0x32, 0x49, 0x42, 0xff, 0x02, 0x0a, 0x2d, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x16, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x73, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2d, 0x7a, 0x6f, 0x6e, 0x65, 0x2f,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63,
	0x6f, 0x72, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x73, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x43, 0x54,
	0xaa, 0x02, 0x28, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x72, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x73, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x28, 0x50, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x5c, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x34, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x2b,
	0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x3a, 0x3a, 0x43, 0x6f, 0x72, 0x65, 0x3a, 0x3a,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x73, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_rawDescOnce sync.Once
	file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_rawDescData = file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_rawDesc
)

func file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_rawDescGZIP() []byte {
	file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_rawDescOnce.Do(func() {
		file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_rawDescData = protoimpl.X.CompressGZIP(file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_rawDescData)
	})
	return file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_rawDescData
}

var file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_goTypes = []interface{}{
	(*SwapClaimProof)(nil),                 // 0: penumbra.core.transparent_proofs.v1alpha1.SwapClaimProof
	(*v1alpha1.SwapPlaintext)(nil),         // 1: penumbra.core.dex.v1alpha1.SwapPlaintext
	(*v1alpha11.StateCommitmentProof)(nil), // 2: penumbra.core.crypto.v1alpha1.StateCommitmentProof
	(*v1alpha11.Amount)(nil),               // 3: penumbra.core.crypto.v1alpha1.Amount
}
var file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_depIdxs = []int32{
	1, // 0: penumbra.core.transparent_proofs.v1alpha1.SwapClaimProof.swap_plaintext:type_name -> penumbra.core.dex.v1alpha1.SwapPlaintext
	2, // 1: penumbra.core.transparent_proofs.v1alpha1.SwapClaimProof.swap_commitment_proof:type_name -> penumbra.core.crypto.v1alpha1.StateCommitmentProof
	3, // 2: penumbra.core.transparent_proofs.v1alpha1.SwapClaimProof.lambda_1_i:type_name -> penumbra.core.crypto.v1alpha1.Amount
	3, // 3: penumbra.core.transparent_proofs.v1alpha1.SwapClaimProof.lambda_2_i:type_name -> penumbra.core.crypto.v1alpha1.Amount
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_init() }
func file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_init() {
	if File_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwapClaimProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_goTypes,
		DependencyIndexes: file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_depIdxs,
		MessageInfos:      file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_msgTypes,
	}.Build()
	File_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto = out.File
	file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_rawDesc = nil
	file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_goTypes = nil
	file_penumbra_core_transparent_proofs_v1alpha1_transparent_proofs_proto_depIdxs = nil
}
