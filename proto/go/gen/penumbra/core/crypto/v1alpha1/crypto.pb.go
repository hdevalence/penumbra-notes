// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: penumbra/core/crypto/v1alpha1/crypto.proto

package cryptov1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Specifies fees paid by a transaction.
type Fee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The amount of the token used to pay fees.
	Amount *Amount `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// If present, the asset ID of the token used to pay fees.
	// If absent, specifies the staking token implicitly.
	AssetId *AssetId `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *Fee) Reset() {
	*x = Fee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fee) ProtoMessage() {}

func (x *Fee) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fee.ProtoReflect.Descriptor instead.
func (*Fee) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{0}
}

func (x *Fee) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Fee) GetAssetId() *AssetId {
	if x != nil {
		return x.AssetId
	}
	return nil
}

// A Penumbra address.
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bytes of the address.
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
	// Alternatively, a Bech32m-encoded string representation of the `inner`
	// bytes.
	//
	// NOTE: implementations are not required to support parsing this field.
	// Implementations should prefer to encode the bytes in all messages they
	// produce. Implementations must not accept messages with both `inner` and
	// `alt_bech32m` set.
	AltBech32M string `protobuf:"bytes,2,opt,name=alt_bech32m,json=altBech32m,proto3" json:"alt_bech32m,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{1}
}

func (x *Address) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *Address) GetAltBech32M() string {
	if x != nil {
		return x.AltBech32M
	}
	return ""
}

type AddressView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AddressView:
	//
	//	*AddressView_Visible_
	//	*AddressView_Opaque_
	AddressView isAddressView_AddressView `protobuf_oneof:"address_view"`
}

func (x *AddressView) Reset() {
	*x = AddressView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressView) ProtoMessage() {}

func (x *AddressView) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressView.ProtoReflect.Descriptor instead.
func (*AddressView) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{2}
}

func (m *AddressView) GetAddressView() isAddressView_AddressView {
	if m != nil {
		return m.AddressView
	}
	return nil
}

func (x *AddressView) GetVisible() *AddressView_Visible {
	if x, ok := x.GetAddressView().(*AddressView_Visible_); ok {
		return x.Visible
	}
	return nil
}

func (x *AddressView) GetOpaque() *AddressView_Opaque {
	if x, ok := x.GetAddressView().(*AddressView_Opaque_); ok {
		return x.Opaque
	}
	return nil
}

type isAddressView_AddressView interface {
	isAddressView_AddressView()
}

type AddressView_Visible_ struct {
	Visible *AddressView_Visible `protobuf:"bytes,1,opt,name=visible,proto3,oneof"`
}

type AddressView_Opaque_ struct {
	Opaque *AddressView_Opaque `protobuf:"bytes,2,opt,name=opaque,proto3,oneof"`
}

func (*AddressView_Visible_) isAddressView_AddressView() {}

func (*AddressView_Opaque_) isAddressView_AddressView() {}

type SpendKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *SpendKey) Reset() {
	*x = SpendKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendKey) ProtoMessage() {}

func (x *SpendKey) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendKey.ProtoReflect.Descriptor instead.
func (*SpendKey) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{3}
}

func (x *SpendKey) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type SpendVerificationKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *SpendVerificationKey) Reset() {
	*x = SpendVerificationKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendVerificationKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendVerificationKey) ProtoMessage() {}

func (x *SpendVerificationKey) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendVerificationKey.ProtoReflect.Descriptor instead.
func (*SpendVerificationKey) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{4}
}

func (x *SpendVerificationKey) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type FullViewingKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *FullViewingKey) Reset() {
	*x = FullViewingKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FullViewingKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FullViewingKey) ProtoMessage() {}

func (x *FullViewingKey) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FullViewingKey.ProtoReflect.Descriptor instead.
func (*FullViewingKey) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{5}
}

func (x *FullViewingKey) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type AccountGroupId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *AccountGroupId) Reset() {
	*x = AccountGroupId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountGroupId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountGroupId) ProtoMessage() {}

func (x *AccountGroupId) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountGroupId.ProtoReflect.Descriptor instead.
func (*AccountGroupId) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{6}
}

func (x *AccountGroupId) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type Diversifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *Diversifier) Reset() {
	*x = Diversifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diversifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diversifier) ProtoMessage() {}

func (x *Diversifier) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diversifier.ProtoReflect.Descriptor instead.
func (*Diversifier) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{7}
}

func (x *Diversifier) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type AddressIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account    uint32 `protobuf:"varint,2,opt,name=account,proto3" json:"account,omitempty"`
	Randomizer []byte `protobuf:"bytes,3,opt,name=randomizer,proto3" json:"randomizer,omitempty"`
}

func (x *AddressIndex) Reset() {
	*x = AddressIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressIndex) ProtoMessage() {}

func (x *AddressIndex) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressIndex.ProtoReflect.Descriptor instead.
func (*AddressIndex) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{8}
}

func (x *AddressIndex) GetAccount() uint32 {
	if x != nil {
		return x.Account
	}
	return 0
}

func (x *AddressIndex) GetRandomizer() []byte {
	if x != nil {
		return x.Randomizer
	}
	return nil
}

type StateCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *StateCommitment) Reset() {
	*x = StateCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateCommitment) ProtoMessage() {}

func (x *StateCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateCommitment.ProtoReflect.Descriptor instead.
func (*StateCommitment) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{9}
}

func (x *StateCommitment) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type BalanceCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *BalanceCommitment) Reset() {
	*x = BalanceCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BalanceCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceCommitment) ProtoMessage() {}

func (x *BalanceCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceCommitment.ProtoReflect.Descriptor instead.
func (*BalanceCommitment) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{10}
}

func (x *BalanceCommitment) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// A Penumbra asset ID.
type AssetId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The bytes of the asset ID.
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
	// Alternatively, a Bech32m-encoded string representation of the `inner`
	// bytes.
	//
	// NOTE: implementations are not required to support parsing this field.
	// Implementations should prefer to encode the bytes in all messages they
	// produce. Implementations must not accept messages with both `inner` and
	// `alt_bech32m` set.
	AltBech32M string `protobuf:"bytes,2,opt,name=alt_bech32m,json=altBech32m,proto3" json:"alt_bech32m,omitempty"`
}

func (x *AssetId) Reset() {
	*x = AssetId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssetId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssetId) ProtoMessage() {}

func (x *AssetId) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssetId.ProtoReflect.Descriptor instead.
func (*AssetId) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{11}
}

func (x *AssetId) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *AssetId) GetAltBech32M() string {
	if x != nil {
		return x.AltBech32M
	}
	return ""
}

type Amount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lo uint64 `protobuf:"varint,1,opt,name=lo,proto3" json:"lo,omitempty"`
	Hi uint64 `protobuf:"varint,2,opt,name=hi,proto3" json:"hi,omitempty"`
}

func (x *Amount) Reset() {
	*x = Amount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Amount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Amount) ProtoMessage() {}

func (x *Amount) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Amount.ProtoReflect.Descriptor instead.
func (*Amount) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{12}
}

func (x *Amount) GetLo() uint64 {
	if x != nil {
		return x.Lo
	}
	return 0
}

func (x *Amount) GetHi() uint64 {
	if x != nil {
		return x.Hi
	}
	return 0
}

type Denom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (x *Denom) Reset() {
	*x = Denom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Denom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Denom) ProtoMessage() {}

func (x *Denom) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Denom.ProtoReflect.Descriptor instead.
func (*Denom) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{13}
}

func (x *Denom) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

// DenomMetadata represents a struct that describes a basic token.
type DenomMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	// denom_units represents the list of DenomUnit's for a given coin
	DenomUnits []*DenomUnit `protobuf:"bytes,2,rep,name=denom_units,json=denomUnits,proto3" json:"denom_units,omitempty"`
	// base represents the base denom (should be the DenomUnit with exponent = 0).
	Base string `protobuf:"bytes,3,opt,name=base,proto3" json:"base,omitempty"`
	// display indicates the suggested denom that should be
	// displayed in clients.
	Display string `protobuf:"bytes,4,opt,name=display,proto3" json:"display,omitempty"`
	// name defines the name of the token (eg: Cosmos Atom)
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// symbol is the token symbol usually shown on exchanges (eg: ATOM). This can
	// be the same as the display.
	Symbol string `protobuf:"bytes,6,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// URI to a document (on or off-chain) that contains additional information. Optional.
	Uri string `protobuf:"bytes,7,opt,name=uri,proto3" json:"uri,omitempty"`
	// URIHash is a sha256 hash of a document pointed by URI. It's used to verify that
	// the document didn't change. Optional.
	UriHash string `protobuf:"bytes,8,opt,name=uri_hash,json=uriHash,proto3" json:"uri_hash,omitempty"`
	// the asset ID on Penumbra for this denomination.
	PenumbraAssetId *AssetId `protobuf:"bytes,1984,opt,name=penumbra_asset_id,json=penumbraAssetId,proto3" json:"penumbra_asset_id,omitempty"`
}

func (x *DenomMetadata) Reset() {
	*x = DenomMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DenomMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenomMetadata) ProtoMessage() {}

func (x *DenomMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenomMetadata.ProtoReflect.Descriptor instead.
func (*DenomMetadata) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{14}
}

func (x *DenomMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DenomMetadata) GetDenomUnits() []*DenomUnit {
	if x != nil {
		return x.DenomUnits
	}
	return nil
}

func (x *DenomMetadata) GetBase() string {
	if x != nil {
		return x.Base
	}
	return ""
}

func (x *DenomMetadata) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *DenomMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DenomMetadata) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *DenomMetadata) GetUri() string {
	if x != nil {
		return x.Uri
	}
	return ""
}

func (x *DenomMetadata) GetUriHash() string {
	if x != nil {
		return x.UriHash
	}
	return ""
}

func (x *DenomMetadata) GetPenumbraAssetId() *AssetId {
	if x != nil {
		return x.PenumbraAssetId
	}
	return nil
}

// DenomUnit represents a struct that describes a given denomination unit of the basic token.
type DenomUnit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// denom represents the string name of the given denom unit (e.g uatom).
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// exponent represents power of 10 exponent that one must
	// raise the base_denom to in order to equal the given DenomUnit's denom
	// 1 denom = 10^exponent base_denom
	// (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with
	// exponent = 6, thus: 1 atom = 10^6 uatom).
	Exponent uint32 `protobuf:"varint,2,opt,name=exponent,proto3" json:"exponent,omitempty"`
	// aliases is a list of string aliases for the given denom
	Aliases []string `protobuf:"bytes,3,rep,name=aliases,proto3" json:"aliases,omitempty"`
}

func (x *DenomUnit) Reset() {
	*x = DenomUnit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DenomUnit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DenomUnit) ProtoMessage() {}

func (x *DenomUnit) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DenomUnit.ProtoReflect.Descriptor instead.
func (*DenomUnit) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{15}
}

func (x *DenomUnit) GetDenom() string {
	if x != nil {
		return x.Denom
	}
	return ""
}

func (x *DenomUnit) GetExponent() uint32 {
	if x != nil {
		return x.Exponent
	}
	return 0
}

func (x *DenomUnit) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount  *Amount  `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	AssetId *AssetId `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{16}
}

func (x *Value) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *Value) GetAssetId() *AssetId {
	if x != nil {
		return x.AssetId
	}
	return nil
}

// Represents a value of a known or unknown denomination.
//
// Note: unlike some other View types, we don't just store the underlying
// `Value` message together with an additional `Denom`.  Instead, we record
// either an `Amount` and `Denom` (only) or an `Amount` and `AssetId`.  This is
// because we don't want to allow a situation where the supplied `Denom` doesn't
// match the `AssetId`, and a consumer of the API that doesn't check is tricked.
// This way, the `Denom` will always match, because the consumer is forced to
// recompute it themselves if they want it.
type ValueView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ValueView:
	//
	//	*ValueView_KnownDenom_
	//	*ValueView_UnknownDenom_
	ValueView isValueView_ValueView `protobuf_oneof:"value_view"`
}

func (x *ValueView) Reset() {
	*x = ValueView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueView) ProtoMessage() {}

func (x *ValueView) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueView.ProtoReflect.Descriptor instead.
func (*ValueView) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{17}
}

func (m *ValueView) GetValueView() isValueView_ValueView {
	if m != nil {
		return m.ValueView
	}
	return nil
}

func (x *ValueView) GetKnownDenom() *ValueView_KnownDenom {
	if x, ok := x.GetValueView().(*ValueView_KnownDenom_); ok {
		return x.KnownDenom
	}
	return nil
}

func (x *ValueView) GetUnknownDenom() *ValueView_UnknownDenom {
	if x, ok := x.GetValueView().(*ValueView_UnknownDenom_); ok {
		return x.UnknownDenom
	}
	return nil
}

type isValueView_ValueView interface {
	isValueView_ValueView()
}

type ValueView_KnownDenom_ struct {
	KnownDenom *ValueView_KnownDenom `protobuf:"bytes,1,opt,name=known_denom,json=knownDenom,proto3,oneof"`
}

type ValueView_UnknownDenom_ struct {
	UnknownDenom *ValueView_UnknownDenom `protobuf:"bytes,2,opt,name=unknown_denom,json=unknownDenom,proto3,oneof"`
}

func (*ValueView_KnownDenom_) isValueView_ValueView() {}

func (*ValueView_UnknownDenom_) isValueView_ValueView() {}

type MerkleRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *MerkleRoot) Reset() {
	*x = MerkleRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerkleRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerkleRoot) ProtoMessage() {}

func (x *MerkleRoot) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerkleRoot.ProtoReflect.Descriptor instead.
func (*MerkleRoot) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{18}
}

func (x *MerkleRoot) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// A validator's identity key (decaf377-rdsa spendauth verification key).
type IdentityKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ik []byte `protobuf:"bytes,1,opt,name=ik,proto3" json:"ik,omitempty"`
}

func (x *IdentityKey) Reset() {
	*x = IdentityKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityKey) ProtoMessage() {}

func (x *IdentityKey) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityKey.ProtoReflect.Descriptor instead.
func (*IdentityKey) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{19}
}

func (x *IdentityKey) GetIk() []byte {
	if x != nil {
		return x.Ik
	}
	return nil
}

// A validator's governance key (decaf377-rdsa spendauth verification key).
type GovernanceKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gk []byte `protobuf:"bytes,1,opt,name=gk,proto3" json:"gk,omitempty"`
}

func (x *GovernanceKey) Reset() {
	*x = GovernanceKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GovernanceKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GovernanceKey) ProtoMessage() {}

func (x *GovernanceKey) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GovernanceKey.ProtoReflect.Descriptor instead.
func (*GovernanceKey) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{20}
}

func (x *GovernanceKey) GetGk() []byte {
	if x != nil {
		return x.Gk
	}
	return nil
}

type ConsensusKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ConsensusKey) Reset() {
	*x = ConsensusKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusKey) ProtoMessage() {}

func (x *ConsensusKey) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusKey.ProtoReflect.Descriptor instead.
func (*ConsensusKey) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{21}
}

func (x *ConsensusKey) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type Note struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   *Value   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Rseed   []byte   `protobuf:"bytes,2,opt,name=rseed,proto3" json:"rseed,omitempty"`
	Address *Address `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *Note) Reset() {
	*x = Note{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Note) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Note) ProtoMessage() {}

func (x *Note) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Note.ProtoReflect.Descriptor instead.
func (*Note) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{22}
}

func (x *Note) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *Note) GetRseed() []byte {
	if x != nil {
		return x.Rseed
	}
	return nil
}

func (x *Note) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

type NoteView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value   *ValueView   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Rseed   []byte       `protobuf:"bytes,2,opt,name=rseed,proto3" json:"rseed,omitempty"`
	Address *AddressView `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *NoteView) Reset() {
	*x = NoteView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteView) ProtoMessage() {}

func (x *NoteView) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteView.ProtoReflect.Descriptor instead.
func (*NoteView) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{23}
}

func (x *NoteView) GetValue() *ValueView {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *NoteView) GetRseed() []byte {
	if x != nil {
		return x.Rseed
	}
	return nil
}

func (x *NoteView) GetAddress() *AddressView {
	if x != nil {
		return x.Address
	}
	return nil
}

// An encrypted note.
// 132 = 1(type) + 11(d) + 8(amount) + 32(asset_id) + 32(rcm) + 32(pk_d) + 16(MAC) bytes.
type NoteCiphertext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *NoteCiphertext) Reset() {
	*x = NoteCiphertext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoteCiphertext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoteCiphertext) ProtoMessage() {}

func (x *NoteCiphertext) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoteCiphertext.ProtoReflect.Descriptor instead.
func (*NoteCiphertext) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{24}
}

func (x *NoteCiphertext) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type Nullifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *Nullifier) Reset() {
	*x = Nullifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nullifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nullifier) ProtoMessage() {}

func (x *Nullifier) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nullifier.ProtoReflect.Descriptor instead.
func (*Nullifier) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{25}
}

func (x *Nullifier) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type SpendAuthSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *SpendAuthSignature) Reset() {
	*x = SpendAuthSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendAuthSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendAuthSignature) ProtoMessage() {}

func (x *SpendAuthSignature) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendAuthSignature.ProtoReflect.Descriptor instead.
func (*SpendAuthSignature) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{26}
}

func (x *SpendAuthSignature) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type BindingSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *BindingSignature) Reset() {
	*x = BindingSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindingSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindingSignature) ProtoMessage() {}

func (x *BindingSignature) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindingSignature.ProtoReflect.Descriptor instead.
func (*BindingSignature) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{27}
}

func (x *BindingSignature) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// The body of an output description, including only the minimal
// data required to scan and process the output.
type NotePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The note commitment for the output note. 32 bytes.
	NoteCommitment *StateCommitment `protobuf:"bytes,1,opt,name=note_commitment,json=noteCommitment,proto3" json:"note_commitment,omitempty"`
	// The encoding of an ephemeral public key. 32 bytes.
	EphemeralKey []byte `protobuf:"bytes,2,opt,name=ephemeral_key,json=ephemeralKey,proto3" json:"ephemeral_key,omitempty"`
	// An encryption of the newly created note.
	// 132 = 1(type) + 11(d) + 8(amount) + 32(asset_id) + 32(rcm) + 32(pk_d) + 16(MAC) bytes.
	EncryptedNote *NoteCiphertext `protobuf:"bytes,3,opt,name=encrypted_note,json=encryptedNote,proto3" json:"encrypted_note,omitempty"`
}

func (x *NotePayload) Reset() {
	*x = NotePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotePayload) ProtoMessage() {}

func (x *NotePayload) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotePayload.ProtoReflect.Descriptor instead.
func (*NotePayload) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{28}
}

func (x *NotePayload) GetNoteCommitment() *StateCommitment {
	if x != nil {
		return x.NoteCommitment
	}
	return nil
}

func (x *NotePayload) GetEphemeralKey() []byte {
	if x != nil {
		return x.EphemeralKey
	}
	return nil
}

func (x *NotePayload) GetEncryptedNote() *NoteCiphertext {
	if x != nil {
		return x.EncryptedNote
	}
	return nil
}

// An authentication path from a state commitment to the root of the state commitment tree.
type StateCommitmentProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NoteCommitment *StateCommitment   `protobuf:"bytes,1,opt,name=note_commitment,json=noteCommitment,proto3" json:"note_commitment,omitempty"`
	Position       uint64             `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	AuthPath       []*MerklePathChunk `protobuf:"bytes,3,rep,name=auth_path,json=authPath,proto3" json:"auth_path,omitempty"` // always length 24
}

func (x *StateCommitmentProof) Reset() {
	*x = StateCommitmentProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StateCommitmentProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateCommitmentProof) ProtoMessage() {}

func (x *StateCommitmentProof) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateCommitmentProof.ProtoReflect.Descriptor instead.
func (*StateCommitmentProof) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{29}
}

func (x *StateCommitmentProof) GetNoteCommitment() *StateCommitment {
	if x != nil {
		return x.NoteCommitment
	}
	return nil
}

func (x *StateCommitmentProof) GetPosition() uint64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *StateCommitmentProof) GetAuthPath() []*MerklePathChunk {
	if x != nil {
		return x.AuthPath
	}
	return nil
}

// A set of 3 sibling hashes in the auth path for some note commitment.
type MerklePathChunk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sibling_1 []byte `protobuf:"bytes,1,opt,name=sibling_1,json=sibling1,proto3" json:"sibling_1,omitempty"`
	Sibling_2 []byte `protobuf:"bytes,2,opt,name=sibling_2,json=sibling2,proto3" json:"sibling_2,omitempty"`
	Sibling_3 []byte `protobuf:"bytes,3,opt,name=sibling_3,json=sibling3,proto3" json:"sibling_3,omitempty"`
}

func (x *MerklePathChunk) Reset() {
	*x = MerklePathChunk{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MerklePathChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MerklePathChunk) ProtoMessage() {}

func (x *MerklePathChunk) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MerklePathChunk.ProtoReflect.Descriptor instead.
func (*MerklePathChunk) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{30}
}

func (x *MerklePathChunk) GetSibling_1() []byte {
	if x != nil {
		return x.Sibling_1
	}
	return nil
}

func (x *MerklePathChunk) GetSibling_2() []byte {
	if x != nil {
		return x.Sibling_2
	}
	return nil
}

func (x *MerklePathChunk) GetSibling_3() []byte {
	if x != nil {
		return x.Sibling_3
	}
	return nil
}

// A clue for use with Fuzzy Message Detection.
type Clue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *Clue) Reset() {
	*x = Clue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Clue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Clue) ProtoMessage() {}

func (x *Clue) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Clue.ProtoReflect.Descriptor instead.
func (*Clue) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{31}
}

func (x *Clue) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// An authorization hash for a Penumbra transaction.
type EffectHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *EffectHash) Reset() {
	*x = EffectHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffectHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectHash) ProtoMessage() {}

func (x *EffectHash) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectHash.ProtoReflect.Descriptor instead.
func (*EffectHash) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{32}
}

func (x *EffectHash) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// A Penumbra ZK output proof.
type ZKOutputProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ZKOutputProof) Reset() {
	*x = ZKOutputProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZKOutputProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZKOutputProof) ProtoMessage() {}

func (x *ZKOutputProof) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZKOutputProof.ProtoReflect.Descriptor instead.
func (*ZKOutputProof) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{33}
}

func (x *ZKOutputProof) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// A Penumbra ZK spend proof.
type ZKSpendProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ZKSpendProof) Reset() {
	*x = ZKSpendProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZKSpendProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZKSpendProof) ProtoMessage() {}

func (x *ZKSpendProof) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZKSpendProof.ProtoReflect.Descriptor instead.
func (*ZKSpendProof) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{34}
}

func (x *ZKSpendProof) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// A Penumbra ZK swap proof.
type ZKSwapProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ZKSwapProof) Reset() {
	*x = ZKSwapProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZKSwapProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZKSwapProof) ProtoMessage() {}

func (x *ZKSwapProof) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZKSwapProof.ProtoReflect.Descriptor instead.
func (*ZKSwapProof) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{35}
}

func (x *ZKSwapProof) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// A Penumbra ZK swap claim proof.
type ZKSwapClaimProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ZKSwapClaimProof) Reset() {
	*x = ZKSwapClaimProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZKSwapClaimProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZKSwapClaimProof) ProtoMessage() {}

func (x *ZKSwapClaimProof) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZKSwapClaimProof.ProtoReflect.Descriptor instead.
func (*ZKSwapClaimProof) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{36}
}

func (x *ZKSwapClaimProof) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// A Penumbra ZK undelegate claim proof.
type ZKUndelegateClaimProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ZKUndelegateClaimProof) Reset() {
	*x = ZKUndelegateClaimProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZKUndelegateClaimProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZKUndelegateClaimProof) ProtoMessage() {}

func (x *ZKUndelegateClaimProof) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZKUndelegateClaimProof.ProtoReflect.Descriptor instead.
func (*ZKUndelegateClaimProof) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{37}
}

func (x *ZKUndelegateClaimProof) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// A Penumbra ZK delegator vote proof.
type ZKDelegatorVoteProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ZKDelegatorVoteProof) Reset() {
	*x = ZKDelegatorVoteProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZKDelegatorVoteProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZKDelegatorVoteProof) ProtoMessage() {}

func (x *ZKDelegatorVoteProof) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZKDelegatorVoteProof.ProtoReflect.Descriptor instead.
func (*ZKDelegatorVoteProof) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{38}
}

func (x *ZKDelegatorVoteProof) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// A Penumbra ZK nullifier derivation proof.
type ZKNullifierDerivationProof struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ZKNullifierDerivationProof) Reset() {
	*x = ZKNullifierDerivationProof{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZKNullifierDerivationProof) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZKNullifierDerivationProof) ProtoMessage() {}

func (x *ZKNullifierDerivationProof) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZKNullifierDerivationProof.ProtoReflect.Descriptor instead.
func (*ZKNullifierDerivationProof) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{39}
}

func (x *ZKNullifierDerivationProof) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type AddressView_Visible struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address        *Address        `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Index          *AddressIndex   `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	AccountGroupId *AccountGroupId `protobuf:"bytes,3,opt,name=account_group_id,json=accountGroupId,proto3" json:"account_group_id,omitempty"`
}

func (x *AddressView_Visible) Reset() {
	*x = AddressView_Visible{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressView_Visible) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressView_Visible) ProtoMessage() {}

func (x *AddressView_Visible) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressView_Visible.ProtoReflect.Descriptor instead.
func (*AddressView_Visible) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{2, 0}
}

func (x *AddressView_Visible) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *AddressView_Visible) GetIndex() *AddressIndex {
	if x != nil {
		return x.Index
	}
	return nil
}

func (x *AddressView_Visible) GetAccountGroupId() *AccountGroupId {
	if x != nil {
		return x.AccountGroupId
	}
	return nil
}

type AddressView_Opaque struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (x *AddressView_Opaque) Reset() {
	*x = AddressView_Opaque{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddressView_Opaque) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddressView_Opaque) ProtoMessage() {}

func (x *AddressView_Opaque) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddressView_Opaque.ProtoReflect.Descriptor instead.
func (*AddressView_Opaque) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{2, 1}
}

func (x *AddressView_Opaque) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

// A value whose asset ID has a known denomination.
type ValueView_KnownDenom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount *Amount        `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	Denom  *DenomMetadata `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (x *ValueView_KnownDenom) Reset() {
	*x = ValueView_KnownDenom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueView_KnownDenom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueView_KnownDenom) ProtoMessage() {}

func (x *ValueView_KnownDenom) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueView_KnownDenom.ProtoReflect.Descriptor instead.
func (*ValueView_KnownDenom) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{17, 0}
}

func (x *ValueView_KnownDenom) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ValueView_KnownDenom) GetDenom() *DenomMetadata {
	if x != nil {
		return x.Denom
	}
	return nil
}

type ValueView_UnknownDenom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount  *Amount  `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	AssetId *AssetId `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id,omitempty"`
}

func (x *ValueView_UnknownDenom) Reset() {
	*x = ValueView_UnknownDenom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValueView_UnknownDenom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValueView_UnknownDenom) ProtoMessage() {}

func (x *ValueView_UnknownDenom) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValueView_UnknownDenom.ProtoReflect.Descriptor instead.
func (*ValueView_UnknownDenom) Descriptor() ([]byte, []int) {
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP(), []int{17, 1}
}

func (x *ValueView_UnknownDenom) GetAmount() *Amount {
	if x != nil {
		return x.Amount
	}
	return nil
}

func (x *ValueView_UnknownDenom) GetAssetId() *AssetId {
	if x != nil {
		return x.AssetId
	}
	return nil
}

var File_penumbra_core_crypto_v1alpha1_crypto_proto protoreflect.FileDescriptor

var file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDesc = []byte{
	0x0a, 0x2a, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x22, 0x87, 0x01, 0x0a, 0x03,
	0x46, 0x65, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x73,
	0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x74, 0x5f, 0x62, 0x65,
	0x63, 0x68, 0x33, 0x32, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x74,
	0x42, 0x65, 0x63, 0x68, 0x33, 0x32, 0x6d, 0x22, 0xf0, 0x03, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x56, 0x69, 0x65, 0x77, 0x12, 0x4e, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x56, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07,
	0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56,
	0x69, 0x65, 0x77, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70,
	0x61, 0x71, 0x75, 0x65, 0x1a, 0xe7, 0x01, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x12, 0x40, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x41, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x57, 0x0a, 0x10, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x52, 0x0e,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x1a, 0x4a,
	0x0a, 0x06, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0x20, 0x0a, 0x08, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x14,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x26, 0x0a, 0x0e, 0x46, 0x75,
	0x6c, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x22, 0x26, 0x0a, 0x0e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x23, 0x0a, 0x0b, 0x44, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22,
	0x48, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x6e,
	0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72,
	0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x22, 0x27, 0x0a, 0x0f, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x22, 0x29, 0x0a, 0x11, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x40, 0x0a,
	0x07, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1f,
	0x0a, 0x0b, 0x61, 0x6c, 0x74, 0x5f, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x6d, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x74, 0x42, 0x65, 0x63, 0x68, 0x33, 0x32, 0x6d, 0x22,
	0x28, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6c, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x6c, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x68, 0x69, 0x22, 0x1d, 0x0a, 0x05, 0x44, 0x65, 0x6e,
	0x6f, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x22, 0xd8, 0x02, 0x0a, 0x0d, 0x44, 0x65, 0x6e,
	0x6f, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x0b,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0a, 0x64, 0x65, 0x6e,
	0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x61, 0x73, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x61, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x75, 0x72, 0x69, 0x12, 0x19, 0x0a, 0x08, 0x75, 0x72, 0x69, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x75, 0x72, 0x69, 0x48, 0x61, 0x73, 0x68, 0x12, 0x53,
	0x0a, 0x11, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0xc0, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74,
	0x49, 0x64, 0x52, 0x0f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x41, 0x73, 0x73, 0x65,
	0x74, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x09, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x55, 0x6e, 0x69, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x78, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x22, 0x89, 0x01, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x52,
	0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x22, 0xf4, 0x03, 0x0a, 0x09, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x56, 0x69, 0x65, 0x77, 0x12, 0x56, 0x0a, 0x0b, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d,
	0x48, 0x00, 0x52, 0x0a, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x5c,
	0x0a, 0x0d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x69, 0x65, 0x77, 0x2e,
	0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x48, 0x00, 0x52, 0x0c,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x1a, 0x8f, 0x01, 0x0a,
	0x0a, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12, 0x3d, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x42, 0x0a, 0x05, 0x64, 0x65,
	0x6e, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x1a, 0x90,
	0x01, 0x0a, 0x0c, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x12,
	0x3d, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41,
	0x0a, 0x08, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x64, 0x52, 0x07, 0x61, 0x73, 0x73, 0x65, 0x74, 0x49,
	0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22,
	0x22, 0x0a, 0x0a, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x22, 0x1d, 0x0a, 0x0b, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b,
	0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x6b, 0x22, 0x1f, 0x0a, 0x0d, 0x47, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x4b, 0x65, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x67, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x02, 0x67, 0x6b, 0x22, 0x24, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x9a, 0x01, 0x0a, 0x04, 0x4e, 0x6f,
	0x74, 0x65, 0x12, 0x3a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x72, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x72,
	0x73, 0x65, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x65, 0x56,
	0x69, 0x65, 0x77, 0x12, 0x3e, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x72, 0x73, 0x65, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x56, 0x69, 0x65, 0x77, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22,
	0x26, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x21, 0x0a, 0x09, 0x4e, 0x75, 0x6c, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x2a, 0x0a, 0x12, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x28, 0x0a, 0x10, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x22, 0xe1, 0x01, 0x0a, 0x0b, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x57, 0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x70, 0x68,
	0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x65, 0x70, 0x68, 0x65, 0x6d, 0x65, 0x72, 0x61, 0x6c, 0x4b, 0x65, 0x79, 0x12, 0x54,
	0x0a, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x43, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x74, 0x65, 0x22, 0xd8, 0x01, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x57, 0x0a,
	0x0f, 0x6e, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x6e, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x4b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x68, 0x0a, 0x0f, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x43, 0x68, 0x75,
	0x6e, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x31, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x31, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x32, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x32, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x33, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x73, 0x69, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x33, 0x22, 0x1c, 0x0a, 0x04, 0x43, 0x6c, 0x75,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x22, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x25, 0x0a, 0x0d, 0x5a,
	0x4b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x22, 0x24, 0x0a, 0x0c, 0x5a, 0x4b, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x6f, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x23, 0x0a, 0x0b, 0x5a, 0x4b, 0x53, 0x77,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x28, 0x0a,
	0x10, 0x5a, 0x4b, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x2e, 0x0a, 0x16, 0x5a, 0x4b, 0x55, 0x6e, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x72, 0x6f, 0x6f,
	0x66, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x2c, 0x0a, 0x14, 0x5a, 0x4b, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x32, 0x0a, 0x1a, 0x5a, 0x4b, 0x4e, 0x75, 0x6c, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x44, 0x65, 0x72, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x6f, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0xa4, 0x02, 0x0a, 0x21, 0x63, 0x6f,
	0x6d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42,
	0x0b, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2d, 0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x43,
	0x43, 0xaa, 0x02, 0x1d, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x72,
	0x65, 0x2e, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0xca, 0x02, 0x1d, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x5c, 0x43, 0x6f, 0x72,
	0x65, 0x5c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0xe2, 0x02, 0x29, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x5c, 0x43, 0x6f, 0x72,
	0x65, 0x5c, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x20,
	0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x3a, 0x3a, 0x43, 0x6f, 0x72, 0x65, 0x3a, 0x3a,
	0x43, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescOnce sync.Once
	file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescData = file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDesc
)

func file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescGZIP() []byte {
	file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescOnce.Do(func() {
		file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescData = protoimpl.X.CompressGZIP(file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescData)
	})
	return file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDescData
}

var file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes = make([]protoimpl.MessageInfo, 44)
var file_penumbra_core_crypto_v1alpha1_crypto_proto_goTypes = []interface{}{
	(*Fee)(nil),                        // 0: penumbra.core.crypto.v1alpha1.Fee
	(*Address)(nil),                    // 1: penumbra.core.crypto.v1alpha1.Address
	(*AddressView)(nil),                // 2: penumbra.core.crypto.v1alpha1.AddressView
	(*SpendKey)(nil),                   // 3: penumbra.core.crypto.v1alpha1.SpendKey
	(*SpendVerificationKey)(nil),       // 4: penumbra.core.crypto.v1alpha1.SpendVerificationKey
	(*FullViewingKey)(nil),             // 5: penumbra.core.crypto.v1alpha1.FullViewingKey
	(*AccountGroupId)(nil),             // 6: penumbra.core.crypto.v1alpha1.AccountGroupId
	(*Diversifier)(nil),                // 7: penumbra.core.crypto.v1alpha1.Diversifier
	(*AddressIndex)(nil),               // 8: penumbra.core.crypto.v1alpha1.AddressIndex
	(*StateCommitment)(nil),            // 9: penumbra.core.crypto.v1alpha1.StateCommitment
	(*BalanceCommitment)(nil),          // 10: penumbra.core.crypto.v1alpha1.BalanceCommitment
	(*AssetId)(nil),                    // 11: penumbra.core.crypto.v1alpha1.AssetId
	(*Amount)(nil),                     // 12: penumbra.core.crypto.v1alpha1.Amount
	(*Denom)(nil),                      // 13: penumbra.core.crypto.v1alpha1.Denom
	(*DenomMetadata)(nil),              // 14: penumbra.core.crypto.v1alpha1.DenomMetadata
	(*DenomUnit)(nil),                  // 15: penumbra.core.crypto.v1alpha1.DenomUnit
	(*Value)(nil),                      // 16: penumbra.core.crypto.v1alpha1.Value
	(*ValueView)(nil),                  // 17: penumbra.core.crypto.v1alpha1.ValueView
	(*MerkleRoot)(nil),                 // 18: penumbra.core.crypto.v1alpha1.MerkleRoot
	(*IdentityKey)(nil),                // 19: penumbra.core.crypto.v1alpha1.IdentityKey
	(*GovernanceKey)(nil),              // 20: penumbra.core.crypto.v1alpha1.GovernanceKey
	(*ConsensusKey)(nil),               // 21: penumbra.core.crypto.v1alpha1.ConsensusKey
	(*Note)(nil),                       // 22: penumbra.core.crypto.v1alpha1.Note
	(*NoteView)(nil),                   // 23: penumbra.core.crypto.v1alpha1.NoteView
	(*NoteCiphertext)(nil),             // 24: penumbra.core.crypto.v1alpha1.NoteCiphertext
	(*Nullifier)(nil),                  // 25: penumbra.core.crypto.v1alpha1.Nullifier
	(*SpendAuthSignature)(nil),         // 26: penumbra.core.crypto.v1alpha1.SpendAuthSignature
	(*BindingSignature)(nil),           // 27: penumbra.core.crypto.v1alpha1.BindingSignature
	(*NotePayload)(nil),                // 28: penumbra.core.crypto.v1alpha1.NotePayload
	(*StateCommitmentProof)(nil),       // 29: penumbra.core.crypto.v1alpha1.StateCommitmentProof
	(*MerklePathChunk)(nil),            // 30: penumbra.core.crypto.v1alpha1.MerklePathChunk
	(*Clue)(nil),                       // 31: penumbra.core.crypto.v1alpha1.Clue
	(*EffectHash)(nil),                 // 32: penumbra.core.crypto.v1alpha1.EffectHash
	(*ZKOutputProof)(nil),              // 33: penumbra.core.crypto.v1alpha1.ZKOutputProof
	(*ZKSpendProof)(nil),               // 34: penumbra.core.crypto.v1alpha1.ZKSpendProof
	(*ZKSwapProof)(nil),                // 35: penumbra.core.crypto.v1alpha1.ZKSwapProof
	(*ZKSwapClaimProof)(nil),           // 36: penumbra.core.crypto.v1alpha1.ZKSwapClaimProof
	(*ZKUndelegateClaimProof)(nil),     // 37: penumbra.core.crypto.v1alpha1.ZKUndelegateClaimProof
	(*ZKDelegatorVoteProof)(nil),       // 38: penumbra.core.crypto.v1alpha1.ZKDelegatorVoteProof
	(*ZKNullifierDerivationProof)(nil), // 39: penumbra.core.crypto.v1alpha1.ZKNullifierDerivationProof
	(*AddressView_Visible)(nil),        // 40: penumbra.core.crypto.v1alpha1.AddressView.Visible
	(*AddressView_Opaque)(nil),         // 41: penumbra.core.crypto.v1alpha1.AddressView.Opaque
	(*ValueView_KnownDenom)(nil),       // 42: penumbra.core.crypto.v1alpha1.ValueView.KnownDenom
	(*ValueView_UnknownDenom)(nil),     // 43: penumbra.core.crypto.v1alpha1.ValueView.UnknownDenom
}
var file_penumbra_core_crypto_v1alpha1_crypto_proto_depIdxs = []int32{
	12, // 0: penumbra.core.crypto.v1alpha1.Fee.amount:type_name -> penumbra.core.crypto.v1alpha1.Amount
	11, // 1: penumbra.core.crypto.v1alpha1.Fee.asset_id:type_name -> penumbra.core.crypto.v1alpha1.AssetId
	40, // 2: penumbra.core.crypto.v1alpha1.AddressView.visible:type_name -> penumbra.core.crypto.v1alpha1.AddressView.Visible
	41, // 3: penumbra.core.crypto.v1alpha1.AddressView.opaque:type_name -> penumbra.core.crypto.v1alpha1.AddressView.Opaque
	15, // 4: penumbra.core.crypto.v1alpha1.DenomMetadata.denom_units:type_name -> penumbra.core.crypto.v1alpha1.DenomUnit
	11, // 5: penumbra.core.crypto.v1alpha1.DenomMetadata.penumbra_asset_id:type_name -> penumbra.core.crypto.v1alpha1.AssetId
	12, // 6: penumbra.core.crypto.v1alpha1.Value.amount:type_name -> penumbra.core.crypto.v1alpha1.Amount
	11, // 7: penumbra.core.crypto.v1alpha1.Value.asset_id:type_name -> penumbra.core.crypto.v1alpha1.AssetId
	42, // 8: penumbra.core.crypto.v1alpha1.ValueView.known_denom:type_name -> penumbra.core.crypto.v1alpha1.ValueView.KnownDenom
	43, // 9: penumbra.core.crypto.v1alpha1.ValueView.unknown_denom:type_name -> penumbra.core.crypto.v1alpha1.ValueView.UnknownDenom
	16, // 10: penumbra.core.crypto.v1alpha1.Note.value:type_name -> penumbra.core.crypto.v1alpha1.Value
	1,  // 11: penumbra.core.crypto.v1alpha1.Note.address:type_name -> penumbra.core.crypto.v1alpha1.Address
	17, // 12: penumbra.core.crypto.v1alpha1.NoteView.value:type_name -> penumbra.core.crypto.v1alpha1.ValueView
	2,  // 13: penumbra.core.crypto.v1alpha1.NoteView.address:type_name -> penumbra.core.crypto.v1alpha1.AddressView
	9,  // 14: penumbra.core.crypto.v1alpha1.NotePayload.note_commitment:type_name -> penumbra.core.crypto.v1alpha1.StateCommitment
	24, // 15: penumbra.core.crypto.v1alpha1.NotePayload.encrypted_note:type_name -> penumbra.core.crypto.v1alpha1.NoteCiphertext
	9,  // 16: penumbra.core.crypto.v1alpha1.StateCommitmentProof.note_commitment:type_name -> penumbra.core.crypto.v1alpha1.StateCommitment
	30, // 17: penumbra.core.crypto.v1alpha1.StateCommitmentProof.auth_path:type_name -> penumbra.core.crypto.v1alpha1.MerklePathChunk
	1,  // 18: penumbra.core.crypto.v1alpha1.AddressView.Visible.address:type_name -> penumbra.core.crypto.v1alpha1.Address
	8,  // 19: penumbra.core.crypto.v1alpha1.AddressView.Visible.index:type_name -> penumbra.core.crypto.v1alpha1.AddressIndex
	6,  // 20: penumbra.core.crypto.v1alpha1.AddressView.Visible.account_group_id:type_name -> penumbra.core.crypto.v1alpha1.AccountGroupId
	1,  // 21: penumbra.core.crypto.v1alpha1.AddressView.Opaque.address:type_name -> penumbra.core.crypto.v1alpha1.Address
	12, // 22: penumbra.core.crypto.v1alpha1.ValueView.KnownDenom.amount:type_name -> penumbra.core.crypto.v1alpha1.Amount
	14, // 23: penumbra.core.crypto.v1alpha1.ValueView.KnownDenom.denom:type_name -> penumbra.core.crypto.v1alpha1.DenomMetadata
	12, // 24: penumbra.core.crypto.v1alpha1.ValueView.UnknownDenom.amount:type_name -> penumbra.core.crypto.v1alpha1.Amount
	11, // 25: penumbra.core.crypto.v1alpha1.ValueView.UnknownDenom.asset_id:type_name -> penumbra.core.crypto.v1alpha1.AssetId
	26, // [26:26] is the sub-list for method output_type
	26, // [26:26] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_penumbra_core_crypto_v1alpha1_crypto_proto_init() }
func file_penumbra_core_crypto_v1alpha1_crypto_proto_init() {
	if File_penumbra_core_crypto_v1alpha1_crypto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendVerificationKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FullViewingKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountGroupId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diversifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BalanceCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssetId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Amount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Denom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DenomMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DenomUnit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerkleRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GovernanceKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Note); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoteCiphertext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nullifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendAuthSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindingSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StateCommitmentProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MerklePathChunk); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Clue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffectHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZKOutputProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZKSpendProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZKSwapProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZKSwapClaimProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZKUndelegateClaimProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZKDelegatorVoteProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZKNullifierDerivationProof); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressView_Visible); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddressView_Opaque); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueView_KnownDenom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValueView_UnknownDenom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*AddressView_Visible_)(nil),
		(*AddressView_Opaque_)(nil),
	}
	file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*ValueView_KnownDenom_)(nil),
		(*ValueView_UnknownDenom_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   44,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_penumbra_core_crypto_v1alpha1_crypto_proto_goTypes,
		DependencyIndexes: file_penumbra_core_crypto_v1alpha1_crypto_proto_depIdxs,
		MessageInfos:      file_penumbra_core_crypto_v1alpha1_crypto_proto_msgTypes,
	}.Build()
	File_penumbra_core_crypto_v1alpha1_crypto_proto = out.File
	file_penumbra_core_crypto_v1alpha1_crypto_proto_rawDesc = nil
	file_penumbra_core_crypto_v1alpha1_crypto_proto_goTypes = nil
	file_penumbra_core_crypto_v1alpha1_crypto_proto_depIdxs = nil
}
