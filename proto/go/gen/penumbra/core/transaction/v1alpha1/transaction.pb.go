// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: penumbra/core/transaction/v1alpha1/transaction.proto

package transactionv1alpha1

import (
	v1alpha1 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/crypto/v1alpha1"
	v1alpha11 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/dex/v1alpha1"
	v1alpha14 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/governance/v1alpha1"
	v1alpha13 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/ibc/v1alpha1"
	v1alpha12 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/stake/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A Penumbra transaction.
type Transaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body *TransactionBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// The binding signature is stored separately from the transaction body that it signs.
	BindingSig []byte `protobuf:"bytes,2,opt,name=binding_sig,json=bindingSig,proto3" json:"binding_sig,omitempty"`
	// The root of some previous state of the state commitment tree, used as an anchor for all
	// ZK state transition proofs.
	Anchor *v1alpha1.MerkleRoot `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
}

func (x *Transaction) Reset() {
	*x = Transaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Transaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transaction) ProtoMessage() {}

func (x *Transaction) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transaction.ProtoReflect.Descriptor instead.
func (*Transaction) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{0}
}

func (x *Transaction) GetBody() *TransactionBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Transaction) GetBindingSig() []byte {
	if x != nil {
		return x.BindingSig
	}
	return nil
}

func (x *Transaction) GetAnchor() *v1alpha1.MerkleRoot {
	if x != nil {
		return x.Anchor
	}
	return nil
}

// A transaction ID, the Sha256 hash of a transaction.
type Id struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash []byte `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (x *Id) Reset() {
	*x = Id{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Id) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Id) ProtoMessage() {}

func (x *Id) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Id.ProtoReflect.Descriptor instead.
func (*Id) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{1}
}

func (x *Id) GetHash() []byte {
	if x != nil {
		return x.Hash
	}
	return nil
}

type EffectHash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *EffectHash) Reset() {
	*x = EffectHash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EffectHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EffectHash) ProtoMessage() {}

func (x *EffectHash) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EffectHash.ProtoReflect.Descriptor instead.
func (*EffectHash) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{2}
}

func (x *EffectHash) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// The body of a transaction.
type TransactionBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of actions (state changes) performed by this transaction.
	Actions []*Action `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	// The maximum height that this transaction can be included in the chain.
	//
	// If zero, there is no maximum.
	ExpiryHeight uint64 `protobuf:"varint,2,opt,name=expiry_height,json=expiryHeight,proto3" json:"expiry_height,omitempty"`
	// The chain this transaction is intended for.  Including this prevents
	// replaying a transaction on one chain onto a different chain.
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The transaction fee.
	Fee *v1alpha1.Fee `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee,omitempty"`
	// A list of clues for use with Fuzzy Message Detection.
	FmdClues []*v1alpha1.Clue `protobuf:"bytes,5,rep,name=fmd_clues,json=fmdClues,proto3" json:"fmd_clues,omitempty"`
	// An optional encrypted memo. It will only be populated if there are
	// outputs in the actions of this transaction. 528 bytes.
	EncryptedMemo []byte `protobuf:"bytes,6,opt,name=encrypted_memo,json=encryptedMemo,proto3,oneof" json:"encrypted_memo,omitempty"`
}

func (x *TransactionBody) Reset() {
	*x = TransactionBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBody) ProtoMessage() {}

func (x *TransactionBody) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBody.ProtoReflect.Descriptor instead.
func (*TransactionBody) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{3}
}

func (x *TransactionBody) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *TransactionBody) GetExpiryHeight() uint64 {
	if x != nil {
		return x.ExpiryHeight
	}
	return 0
}

func (x *TransactionBody) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *TransactionBody) GetFee() *v1alpha1.Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *TransactionBody) GetFmdClues() []*v1alpha1.Clue {
	if x != nil {
		return x.FmdClues
	}
	return nil
}

func (x *TransactionBody) GetEncryptedMemo() []byte {
	if x != nil {
		return x.EncryptedMemo
	}
	return nil
}

// A state change performed by a transaction.
type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*Action_Spend
	//	*Action_Output
	//	*Action_Swap
	//	*Action_SwapClaim
	//	*Action_ValidatorDefinition
	//	*Action_IbcAction
	//	*Action_ProposalSubmit
	//	*Action_ProposalWithdraw
	//	*Action_ValidatorVote
	//	*Action_DelegatorVote
	//	*Action_ProposalDepositClaim
	//	*Action_PositionOpen
	//	*Action_PositionClose
	//	*Action_PositionWithdraw
	//	*Action_PositionRewardClaim
	//	*Action_Delegate
	//	*Action_Undelegate
	//	*Action_UndelegateClaim
	//	*Action_DaoSpend
	//	*Action_DaoOutput
	//	*Action_DaoDeposit
	//	*Action_Ics20Withdrawal
	Action isAction_Action `protobuf_oneof:"action"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{4}
}

func (m *Action) GetAction() isAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *Action) GetSpend() *Spend {
	if x, ok := x.GetAction().(*Action_Spend); ok {
		return x.Spend
	}
	return nil
}

func (x *Action) GetOutput() *Output {
	if x, ok := x.GetAction().(*Action_Output); ok {
		return x.Output
	}
	return nil
}

func (x *Action) GetSwap() *v1alpha11.Swap {
	if x, ok := x.GetAction().(*Action_Swap); ok {
		return x.Swap
	}
	return nil
}

func (x *Action) GetSwapClaim() *v1alpha11.SwapClaim {
	if x, ok := x.GetAction().(*Action_SwapClaim); ok {
		return x.SwapClaim
	}
	return nil
}

func (x *Action) GetValidatorDefinition() *v1alpha12.ValidatorDefinition {
	if x, ok := x.GetAction().(*Action_ValidatorDefinition); ok {
		return x.ValidatorDefinition
	}
	return nil
}

func (x *Action) GetIbcAction() *v1alpha13.IbcAction {
	if x, ok := x.GetAction().(*Action_IbcAction); ok {
		return x.IbcAction
	}
	return nil
}

func (x *Action) GetProposalSubmit() *v1alpha14.ProposalSubmit {
	if x, ok := x.GetAction().(*Action_ProposalSubmit); ok {
		return x.ProposalSubmit
	}
	return nil
}

func (x *Action) GetProposalWithdraw() *v1alpha14.ProposalWithdraw {
	if x, ok := x.GetAction().(*Action_ProposalWithdraw); ok {
		return x.ProposalWithdraw
	}
	return nil
}

func (x *Action) GetValidatorVote() *v1alpha14.ValidatorVote {
	if x, ok := x.GetAction().(*Action_ValidatorVote); ok {
		return x.ValidatorVote
	}
	return nil
}

func (x *Action) GetDelegatorVote() *v1alpha14.DelegatorVote {
	if x, ok := x.GetAction().(*Action_DelegatorVote); ok {
		return x.DelegatorVote
	}
	return nil
}

func (x *Action) GetProposalDepositClaim() *v1alpha14.ProposalDepositClaim {
	if x, ok := x.GetAction().(*Action_ProposalDepositClaim); ok {
		return x.ProposalDepositClaim
	}
	return nil
}

func (x *Action) GetPositionOpen() *v1alpha11.PositionOpen {
	if x, ok := x.GetAction().(*Action_PositionOpen); ok {
		return x.PositionOpen
	}
	return nil
}

func (x *Action) GetPositionClose() *v1alpha11.PositionClose {
	if x, ok := x.GetAction().(*Action_PositionClose); ok {
		return x.PositionClose
	}
	return nil
}

func (x *Action) GetPositionWithdraw() *v1alpha11.PositionWithdraw {
	if x, ok := x.GetAction().(*Action_PositionWithdraw); ok {
		return x.PositionWithdraw
	}
	return nil
}

func (x *Action) GetPositionRewardClaim() *v1alpha11.PositionRewardClaim {
	if x, ok := x.GetAction().(*Action_PositionRewardClaim); ok {
		return x.PositionRewardClaim
	}
	return nil
}

func (x *Action) GetDelegate() *v1alpha12.Delegate {
	if x, ok := x.GetAction().(*Action_Delegate); ok {
		return x.Delegate
	}
	return nil
}

func (x *Action) GetUndelegate() *v1alpha12.Undelegate {
	if x, ok := x.GetAction().(*Action_Undelegate); ok {
		return x.Undelegate
	}
	return nil
}

func (x *Action) GetUndelegateClaim() *v1alpha12.UndelegateClaim {
	if x, ok := x.GetAction().(*Action_UndelegateClaim); ok {
		return x.UndelegateClaim
	}
	return nil
}

func (x *Action) GetDaoSpend() *v1alpha14.DaoSpend {
	if x, ok := x.GetAction().(*Action_DaoSpend); ok {
		return x.DaoSpend
	}
	return nil
}

func (x *Action) GetDaoOutput() *v1alpha14.DaoOutput {
	if x, ok := x.GetAction().(*Action_DaoOutput); ok {
		return x.DaoOutput
	}
	return nil
}

func (x *Action) GetDaoDeposit() *v1alpha14.DaoDeposit {
	if x, ok := x.GetAction().(*Action_DaoDeposit); ok {
		return x.DaoDeposit
	}
	return nil
}

func (x *Action) GetIcs20Withdrawal() *v1alpha13.Ics20Withdrawal {
	if x, ok := x.GetAction().(*Action_Ics20Withdrawal); ok {
		return x.Ics20Withdrawal
	}
	return nil
}

type isAction_Action interface {
	isAction_Action()
}

type Action_Spend struct {
	Spend *Spend `protobuf:"bytes,1,opt,name=spend,proto3,oneof"`
}

type Action_Output struct {
	Output *Output `protobuf:"bytes,2,opt,name=output,proto3,oneof"`
}

type Action_Swap struct {
	Swap *v1alpha11.Swap `protobuf:"bytes,3,opt,name=swap,proto3,oneof"`
}

type Action_SwapClaim struct {
	SwapClaim *v1alpha11.SwapClaim `protobuf:"bytes,4,opt,name=swap_claim,json=swapClaim,proto3,oneof"`
}

type Action_ValidatorDefinition struct {
	ValidatorDefinition *v1alpha12.ValidatorDefinition `protobuf:"bytes,16,opt,name=validator_definition,json=validatorDefinition,proto3,oneof"`
}

type Action_IbcAction struct {
	IbcAction *v1alpha13.IbcAction `protobuf:"bytes,17,opt,name=ibc_action,json=ibcAction,proto3,oneof"`
}

type Action_ProposalSubmit struct {
	// Governance:
	ProposalSubmit *v1alpha14.ProposalSubmit `protobuf:"bytes,18,opt,name=proposal_submit,json=proposalSubmit,proto3,oneof"`
}

type Action_ProposalWithdraw struct {
	ProposalWithdraw *v1alpha14.ProposalWithdraw `protobuf:"bytes,19,opt,name=proposal_withdraw,json=proposalWithdraw,proto3,oneof"`
}

type Action_ValidatorVote struct {
	ValidatorVote *v1alpha14.ValidatorVote `protobuf:"bytes,20,opt,name=validator_vote,json=validatorVote,proto3,oneof"`
}

type Action_DelegatorVote struct {
	DelegatorVote *v1alpha14.DelegatorVote `protobuf:"bytes,21,opt,name=delegator_vote,json=delegatorVote,proto3,oneof"`
}

type Action_ProposalDepositClaim struct {
	ProposalDepositClaim *v1alpha14.ProposalDepositClaim `protobuf:"bytes,22,opt,name=proposal_deposit_claim,json=proposalDepositClaim,proto3,oneof"`
}

type Action_PositionOpen struct {
	// Positions
	PositionOpen *v1alpha11.PositionOpen `protobuf:"bytes,30,opt,name=position_open,json=positionOpen,proto3,oneof"`
}

type Action_PositionClose struct {
	PositionClose *v1alpha11.PositionClose `protobuf:"bytes,31,opt,name=position_close,json=positionClose,proto3,oneof"`
}

type Action_PositionWithdraw struct {
	PositionWithdraw *v1alpha11.PositionWithdraw `protobuf:"bytes,32,opt,name=position_withdraw,json=positionWithdraw,proto3,oneof"`
}

type Action_PositionRewardClaim struct {
	PositionRewardClaim *v1alpha11.PositionRewardClaim `protobuf:"bytes,34,opt,name=position_reward_claim,json=positionRewardClaim,proto3,oneof"`
}

type Action_Delegate struct {
	// (un)delegation
	Delegate *v1alpha12.Delegate `protobuf:"bytes,40,opt,name=delegate,proto3,oneof"`
}

type Action_Undelegate struct {
	Undelegate *v1alpha12.Undelegate `protobuf:"bytes,41,opt,name=undelegate,proto3,oneof"`
}

type Action_UndelegateClaim struct {
	UndelegateClaim *v1alpha12.UndelegateClaim `protobuf:"bytes,42,opt,name=undelegate_claim,json=undelegateClaim,proto3,oneof"`
}

type Action_DaoSpend struct {
	// DAO
	DaoSpend *v1alpha14.DaoSpend `protobuf:"bytes,50,opt,name=dao_spend,json=daoSpend,proto3,oneof"`
}

type Action_DaoOutput struct {
	DaoOutput *v1alpha14.DaoOutput `protobuf:"bytes,51,opt,name=dao_output,json=daoOutput,proto3,oneof"`
}

type Action_DaoDeposit struct {
	DaoDeposit *v1alpha14.DaoDeposit `protobuf:"bytes,52,opt,name=dao_deposit,json=daoDeposit,proto3,oneof"`
}

type Action_Ics20Withdrawal struct {
	Ics20Withdrawal *v1alpha13.Ics20Withdrawal `protobuf:"bytes,200,opt,name=ics20_withdrawal,json=ics20Withdrawal,proto3,oneof"`
}

func (*Action_Spend) isAction_Action() {}

func (*Action_Output) isAction_Action() {}

func (*Action_Swap) isAction_Action() {}

func (*Action_SwapClaim) isAction_Action() {}

func (*Action_ValidatorDefinition) isAction_Action() {}

func (*Action_IbcAction) isAction_Action() {}

func (*Action_ProposalSubmit) isAction_Action() {}

func (*Action_ProposalWithdraw) isAction_Action() {}

func (*Action_ValidatorVote) isAction_Action() {}

func (*Action_DelegatorVote) isAction_Action() {}

func (*Action_ProposalDepositClaim) isAction_Action() {}

func (*Action_PositionOpen) isAction_Action() {}

func (*Action_PositionClose) isAction_Action() {}

func (*Action_PositionWithdraw) isAction_Action() {}

func (*Action_PositionRewardClaim) isAction_Action() {}

func (*Action_Delegate) isAction_Action() {}

func (*Action_Undelegate) isAction_Action() {}

func (*Action_UndelegateClaim) isAction_Action() {}

func (*Action_DaoSpend) isAction_Action() {}

func (*Action_DaoOutput) isAction_Action() {}

func (*Action_DaoDeposit) isAction_Action() {}

func (*Action_Ics20Withdrawal) isAction_Action() {}

// A transaction perspective is a bundle of key material and commitment openings
// that allow generating a view of a transaction from that perspective.
type TransactionPerspective struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayloadKeys     []*PayloadKeyWithCommitment `protobuf:"bytes,1,rep,name=payload_keys,json=payloadKeys,proto3" json:"payload_keys,omitempty"`
	SpendNullifiers []*NullifierWithNote        `protobuf:"bytes,2,rep,name=spend_nullifiers,json=spendNullifiers,proto3" json:"spend_nullifiers,omitempty"`
	// The openings of note commitments referred to in the transaction
	// but not included in the transaction.
	AdviceNotes []*v1alpha1.Note `protobuf:"bytes,3,rep,name=advice_notes,json=adviceNotes,proto3" json:"advice_notes,omitempty"`
	// Any relevant address views.
	AddressViews []*v1alpha1.AddressView `protobuf:"bytes,4,rep,name=address_views,json=addressViews,proto3" json:"address_views,omitempty"`
	// Any relevant denoms for viewed assets.
	Denoms []*v1alpha1.DenomMetadata `protobuf:"bytes,5,rep,name=denoms,proto3" json:"denoms,omitempty"`
	// The transaction ID associated with this TransactionPerspective
	TransactionId *Id `protobuf:"bytes,6,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
}

func (x *TransactionPerspective) Reset() {
	*x = TransactionPerspective{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionPerspective) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPerspective) ProtoMessage() {}

func (x *TransactionPerspective) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPerspective.ProtoReflect.Descriptor instead.
func (*TransactionPerspective) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionPerspective) GetPayloadKeys() []*PayloadKeyWithCommitment {
	if x != nil {
		return x.PayloadKeys
	}
	return nil
}

func (x *TransactionPerspective) GetSpendNullifiers() []*NullifierWithNote {
	if x != nil {
		return x.SpendNullifiers
	}
	return nil
}

func (x *TransactionPerspective) GetAdviceNotes() []*v1alpha1.Note {
	if x != nil {
		return x.AdviceNotes
	}
	return nil
}

func (x *TransactionPerspective) GetAddressViews() []*v1alpha1.AddressView {
	if x != nil {
		return x.AddressViews
	}
	return nil
}

func (x *TransactionPerspective) GetDenoms() []*v1alpha1.DenomMetadata {
	if x != nil {
		return x.Denoms
	}
	return nil
}

func (x *TransactionPerspective) GetTransactionId() *Id {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

type PayloadKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *PayloadKey) Reset() {
	*x = PayloadKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadKey) ProtoMessage() {}

func (x *PayloadKey) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadKey.ProtoReflect.Descriptor instead.
func (*PayloadKey) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{6}
}

func (x *PayloadKey) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type PayloadKeyWithCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PayloadKey *PayloadKey               `protobuf:"bytes,1,opt,name=payload_key,json=payloadKey,proto3" json:"payload_key,omitempty"`
	Commitment *v1alpha1.StateCommitment `protobuf:"bytes,2,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (x *PayloadKeyWithCommitment) Reset() {
	*x = PayloadKeyWithCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PayloadKeyWithCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PayloadKeyWithCommitment) ProtoMessage() {}

func (x *PayloadKeyWithCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PayloadKeyWithCommitment.ProtoReflect.Descriptor instead.
func (*PayloadKeyWithCommitment) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{7}
}

func (x *PayloadKeyWithCommitment) GetPayloadKey() *PayloadKey {
	if x != nil {
		return x.PayloadKey
	}
	return nil
}

func (x *PayloadKeyWithCommitment) GetCommitment() *v1alpha1.StateCommitment {
	if x != nil {
		return x.Commitment
	}
	return nil
}

type NullifierWithNote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nullifier *v1alpha1.Nullifier `protobuf:"bytes,1,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	Note      *v1alpha1.Note      `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *NullifierWithNote) Reset() {
	*x = NullifierWithNote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullifierWithNote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullifierWithNote) ProtoMessage() {}

func (x *NullifierWithNote) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullifierWithNote.ProtoReflect.Descriptor instead.
func (*NullifierWithNote) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{8}
}

func (x *NullifierWithNote) GetNullifier() *v1alpha1.Nullifier {
	if x != nil {
		return x.Nullifier
	}
	return nil
}

func (x *NullifierWithNote) GetNote() *v1alpha1.Note {
	if x != nil {
		return x.Note
	}
	return nil
}

// View of a Penumbra transaction.
type TransactionView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// View of the transaction body
	BodyView *TransactionBodyView `protobuf:"bytes,1,opt,name=body_view,json=bodyView,proto3" json:"body_view,omitempty"`
	// The binding signature is stored separately from the transaction body that it signs.
	BindingSig []byte `protobuf:"bytes,2,opt,name=binding_sig,json=bindingSig,proto3" json:"binding_sig,omitempty"`
	// The root of some previous state of the state commitment tree, used as an anchor for all
	// ZK state transition proofs.
	Anchor *v1alpha1.MerkleRoot `protobuf:"bytes,3,opt,name=anchor,proto3" json:"anchor,omitempty"`
}

func (x *TransactionView) Reset() {
	*x = TransactionView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionView) ProtoMessage() {}

func (x *TransactionView) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionView.ProtoReflect.Descriptor instead.
func (*TransactionView) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{9}
}

func (x *TransactionView) GetBodyView() *TransactionBodyView {
	if x != nil {
		return x.BodyView
	}
	return nil
}

func (x *TransactionView) GetBindingSig() []byte {
	if x != nil {
		return x.BindingSig
	}
	return nil
}

func (x *TransactionView) GetAnchor() *v1alpha1.MerkleRoot {
	if x != nil {
		return x.Anchor
	}
	return nil
}

type TransactionBodyView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list views into of actions (state changes) performed by this transaction.
	ActionViews []*ActionView `protobuf:"bytes,1,rep,name=action_views,json=actionViews,proto3" json:"action_views,omitempty"`
	// The maximum height that this transaction can be included in the chain.
	//
	// If zero, there is no maximum.
	ExpiryHeight uint64 `protobuf:"varint,2,opt,name=expiry_height,json=expiryHeight,proto3" json:"expiry_height,omitempty"`
	// The chain this transaction is intended for.  Including this prevents
	// replaying a transaction on one chain onto a different chain.
	ChainId string `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// The transaction fee.
	Fee *v1alpha1.Fee `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee,omitempty"`
	// A list of clues for use with Fuzzy Message Detection.
	FmdClues []*v1alpha1.Clue `protobuf:"bytes,5,rep,name=fmd_clues,json=fmdClues,proto3" json:"fmd_clues,omitempty"`
	// An optional view of a transaction memo. It will only be populated if there are
	// outputs in the actions of this transaction.
	MemoView *MemoView `protobuf:"bytes,6,opt,name=memo_view,json=memoView,proto3,oneof" json:"memo_view,omitempty"`
}

func (x *TransactionBodyView) Reset() {
	*x = TransactionBodyView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionBodyView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionBodyView) ProtoMessage() {}

func (x *TransactionBodyView) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionBodyView.ProtoReflect.Descriptor instead.
func (*TransactionBodyView) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{10}
}

func (x *TransactionBodyView) GetActionViews() []*ActionView {
	if x != nil {
		return x.ActionViews
	}
	return nil
}

func (x *TransactionBodyView) GetExpiryHeight() uint64 {
	if x != nil {
		return x.ExpiryHeight
	}
	return 0
}

func (x *TransactionBodyView) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *TransactionBodyView) GetFee() *v1alpha1.Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *TransactionBodyView) GetFmdClues() []*v1alpha1.Clue {
	if x != nil {
		return x.FmdClues
	}
	return nil
}

func (x *TransactionBodyView) GetMemoView() *MemoView {
	if x != nil {
		return x.MemoView
	}
	return nil
}

// A view of a specific state change action performed by a transaction.
type ActionView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ActionView:
	//
	//	*ActionView_Spend
	//	*ActionView_Output
	//	*ActionView_Swap
	//	*ActionView_SwapClaim
	//	*ActionView_ValidatorDefinition
	//	*ActionView_IbcAction
	//	*ActionView_ProposalSubmit
	//	*ActionView_ProposalWithdraw
	//	*ActionView_ValidatorVote
	//	*ActionView_DelegatorVote
	//	*ActionView_ProposalDepositClaim
	//	*ActionView_PositionOpen
	//	*ActionView_PositionClose
	//	*ActionView_PositionWithdraw
	//	*ActionView_PositionRewardClaim
	//	*ActionView_Delegate
	//	*ActionView_Undelegate
	//	*ActionView_DaoSpend
	//	*ActionView_DaoOutput
	//	*ActionView_DaoDeposit
	//	*ActionView_UndelegateClaim
	//	*ActionView_Ics20Withdrawal
	ActionView isActionView_ActionView `protobuf_oneof:"action_view"`
}

func (x *ActionView) Reset() {
	*x = ActionView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionView) ProtoMessage() {}

func (x *ActionView) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionView.ProtoReflect.Descriptor instead.
func (*ActionView) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{11}
}

func (m *ActionView) GetActionView() isActionView_ActionView {
	if m != nil {
		return m.ActionView
	}
	return nil
}

func (x *ActionView) GetSpend() *SpendView {
	if x, ok := x.GetActionView().(*ActionView_Spend); ok {
		return x.Spend
	}
	return nil
}

func (x *ActionView) GetOutput() *OutputView {
	if x, ok := x.GetActionView().(*ActionView_Output); ok {
		return x.Output
	}
	return nil
}

func (x *ActionView) GetSwap() *v1alpha11.SwapView {
	if x, ok := x.GetActionView().(*ActionView_Swap); ok {
		return x.Swap
	}
	return nil
}

func (x *ActionView) GetSwapClaim() *v1alpha11.SwapClaimView {
	if x, ok := x.GetActionView().(*ActionView_SwapClaim); ok {
		return x.SwapClaim
	}
	return nil
}

func (x *ActionView) GetValidatorDefinition() *v1alpha12.ValidatorDefinition {
	if x, ok := x.GetActionView().(*ActionView_ValidatorDefinition); ok {
		return x.ValidatorDefinition
	}
	return nil
}

func (x *ActionView) GetIbcAction() *v1alpha13.IbcAction {
	if x, ok := x.GetActionView().(*ActionView_IbcAction); ok {
		return x.IbcAction
	}
	return nil
}

func (x *ActionView) GetProposalSubmit() *v1alpha14.ProposalSubmit {
	if x, ok := x.GetActionView().(*ActionView_ProposalSubmit); ok {
		return x.ProposalSubmit
	}
	return nil
}

func (x *ActionView) GetProposalWithdraw() *v1alpha14.ProposalWithdraw {
	if x, ok := x.GetActionView().(*ActionView_ProposalWithdraw); ok {
		return x.ProposalWithdraw
	}
	return nil
}

func (x *ActionView) GetValidatorVote() *v1alpha14.ValidatorVote {
	if x, ok := x.GetActionView().(*ActionView_ValidatorVote); ok {
		return x.ValidatorVote
	}
	return nil
}

func (x *ActionView) GetDelegatorVote() *DelegatorVoteView {
	if x, ok := x.GetActionView().(*ActionView_DelegatorVote); ok {
		return x.DelegatorVote
	}
	return nil
}

func (x *ActionView) GetProposalDepositClaim() *v1alpha14.ProposalDepositClaim {
	if x, ok := x.GetActionView().(*ActionView_ProposalDepositClaim); ok {
		return x.ProposalDepositClaim
	}
	return nil
}

func (x *ActionView) GetPositionOpen() *v1alpha11.PositionOpen {
	if x, ok := x.GetActionView().(*ActionView_PositionOpen); ok {
		return x.PositionOpen
	}
	return nil
}

func (x *ActionView) GetPositionClose() *v1alpha11.PositionClose {
	if x, ok := x.GetActionView().(*ActionView_PositionClose); ok {
		return x.PositionClose
	}
	return nil
}

func (x *ActionView) GetPositionWithdraw() *v1alpha11.PositionWithdraw {
	if x, ok := x.GetActionView().(*ActionView_PositionWithdraw); ok {
		return x.PositionWithdraw
	}
	return nil
}

func (x *ActionView) GetPositionRewardClaim() *v1alpha11.PositionRewardClaim {
	if x, ok := x.GetActionView().(*ActionView_PositionRewardClaim); ok {
		return x.PositionRewardClaim
	}
	return nil
}

func (x *ActionView) GetDelegate() *v1alpha12.Delegate {
	if x, ok := x.GetActionView().(*ActionView_Delegate); ok {
		return x.Delegate
	}
	return nil
}

func (x *ActionView) GetUndelegate() *v1alpha12.Undelegate {
	if x, ok := x.GetActionView().(*ActionView_Undelegate); ok {
		return x.Undelegate
	}
	return nil
}

func (x *ActionView) GetDaoSpend() *v1alpha14.DaoSpend {
	if x, ok := x.GetActionView().(*ActionView_DaoSpend); ok {
		return x.DaoSpend
	}
	return nil
}

func (x *ActionView) GetDaoOutput() *v1alpha14.DaoOutput {
	if x, ok := x.GetActionView().(*ActionView_DaoOutput); ok {
		return x.DaoOutput
	}
	return nil
}

func (x *ActionView) GetDaoDeposit() *v1alpha14.DaoDeposit {
	if x, ok := x.GetActionView().(*ActionView_DaoDeposit); ok {
		return x.DaoDeposit
	}
	return nil
}

func (x *ActionView) GetUndelegateClaim() *v1alpha12.UndelegateClaim {
	if x, ok := x.GetActionView().(*ActionView_UndelegateClaim); ok {
		return x.UndelegateClaim
	}
	return nil
}

func (x *ActionView) GetIcs20Withdrawal() *v1alpha13.Ics20Withdrawal {
	if x, ok := x.GetActionView().(*ActionView_Ics20Withdrawal); ok {
		return x.Ics20Withdrawal
	}
	return nil
}

type isActionView_ActionView interface {
	isActionView_ActionView()
}

type ActionView_Spend struct {
	// Action types with visible/opaque variants
	Spend *SpendView `protobuf:"bytes,1,opt,name=spend,proto3,oneof"`
}

type ActionView_Output struct {
	Output *OutputView `protobuf:"bytes,2,opt,name=output,proto3,oneof"`
}

type ActionView_Swap struct {
	Swap *v1alpha11.SwapView `protobuf:"bytes,3,opt,name=swap,proto3,oneof"`
}

type ActionView_SwapClaim struct {
	SwapClaim *v1alpha11.SwapClaimView `protobuf:"bytes,4,opt,name=swap_claim,json=swapClaim,proto3,oneof"`
}

type ActionView_ValidatorDefinition struct {
	// Action types without visible/opaque variants
	ValidatorDefinition *v1alpha12.ValidatorDefinition `protobuf:"bytes,16,opt,name=validator_definition,json=validatorDefinition,proto3,oneof"`
}

type ActionView_IbcAction struct {
	IbcAction *v1alpha13.IbcAction `protobuf:"bytes,17,opt,name=ibc_action,json=ibcAction,proto3,oneof"`
}

type ActionView_ProposalSubmit struct {
	// Governance:
	ProposalSubmit *v1alpha14.ProposalSubmit `protobuf:"bytes,18,opt,name=proposal_submit,json=proposalSubmit,proto3,oneof"`
}

type ActionView_ProposalWithdraw struct {
	ProposalWithdraw *v1alpha14.ProposalWithdraw `protobuf:"bytes,19,opt,name=proposal_withdraw,json=proposalWithdraw,proto3,oneof"`
}

type ActionView_ValidatorVote struct {
	ValidatorVote *v1alpha14.ValidatorVote `protobuf:"bytes,20,opt,name=validator_vote,json=validatorVote,proto3,oneof"`
}

type ActionView_DelegatorVote struct {
	DelegatorVote *DelegatorVoteView `protobuf:"bytes,21,opt,name=delegator_vote,json=delegatorVote,proto3,oneof"`
}

type ActionView_ProposalDepositClaim struct {
	ProposalDepositClaim *v1alpha14.ProposalDepositClaim `protobuf:"bytes,22,opt,name=proposal_deposit_claim,json=proposalDepositClaim,proto3,oneof"`
}

type ActionView_PositionOpen struct {
	PositionOpen *v1alpha11.PositionOpen `protobuf:"bytes,30,opt,name=position_open,json=positionOpen,proto3,oneof"`
}

type ActionView_PositionClose struct {
	PositionClose *v1alpha11.PositionClose `protobuf:"bytes,31,opt,name=position_close,json=positionClose,proto3,oneof"`
}

type ActionView_PositionWithdraw struct {
	PositionWithdraw *v1alpha11.PositionWithdraw `protobuf:"bytes,32,opt,name=position_withdraw,json=positionWithdraw,proto3,oneof"`
}

type ActionView_PositionRewardClaim struct {
	PositionRewardClaim *v1alpha11.PositionRewardClaim `protobuf:"bytes,34,opt,name=position_reward_claim,json=positionRewardClaim,proto3,oneof"`
}

type ActionView_Delegate struct {
	Delegate *v1alpha12.Delegate `protobuf:"bytes,41,opt,name=delegate,proto3,oneof"`
}

type ActionView_Undelegate struct {
	Undelegate *v1alpha12.Undelegate `protobuf:"bytes,42,opt,name=undelegate,proto3,oneof"`
}

type ActionView_DaoSpend struct {
	// DAO
	DaoSpend *v1alpha14.DaoSpend `protobuf:"bytes,50,opt,name=dao_spend,json=daoSpend,proto3,oneof"`
}

type ActionView_DaoOutput struct {
	DaoOutput *v1alpha14.DaoOutput `protobuf:"bytes,51,opt,name=dao_output,json=daoOutput,proto3,oneof"`
}

type ActionView_DaoDeposit struct {
	DaoDeposit *v1alpha14.DaoDeposit `protobuf:"bytes,52,opt,name=dao_deposit,json=daoDeposit,proto3,oneof"`
}

type ActionView_UndelegateClaim struct {
	// TODO: we have no way to recover the opening of the undelegate_claim's
	// balance commitment, and can only infer the value from looking at the rest
	// of the transaction. is that fine?
	UndelegateClaim *v1alpha12.UndelegateClaim `protobuf:"bytes,43,opt,name=undelegate_claim,json=undelegateClaim,proto3,oneof"`
}

type ActionView_Ics20Withdrawal struct {
	Ics20Withdrawal *v1alpha13.Ics20Withdrawal `protobuf:"bytes,200,opt,name=ics20_withdrawal,json=ics20Withdrawal,proto3,oneof"`
}

func (*ActionView_Spend) isActionView_ActionView() {}

func (*ActionView_Output) isActionView_ActionView() {}

func (*ActionView_Swap) isActionView_ActionView() {}

func (*ActionView_SwapClaim) isActionView_ActionView() {}

func (*ActionView_ValidatorDefinition) isActionView_ActionView() {}

func (*ActionView_IbcAction) isActionView_ActionView() {}

func (*ActionView_ProposalSubmit) isActionView_ActionView() {}

func (*ActionView_ProposalWithdraw) isActionView_ActionView() {}

func (*ActionView_ValidatorVote) isActionView_ActionView() {}

func (*ActionView_DelegatorVote) isActionView_ActionView() {}

func (*ActionView_ProposalDepositClaim) isActionView_ActionView() {}

func (*ActionView_PositionOpen) isActionView_ActionView() {}

func (*ActionView_PositionClose) isActionView_ActionView() {}

func (*ActionView_PositionWithdraw) isActionView_ActionView() {}

func (*ActionView_PositionRewardClaim) isActionView_ActionView() {}

func (*ActionView_Delegate) isActionView_ActionView() {}

func (*ActionView_Undelegate) isActionView_ActionView() {}

func (*ActionView_DaoSpend) isActionView_ActionView() {}

func (*ActionView_DaoOutput) isActionView_ActionView() {}

func (*ActionView_DaoDeposit) isActionView_ActionView() {}

func (*ActionView_UndelegateClaim) isActionView_ActionView() {}

func (*ActionView_Ics20Withdrawal) isActionView_ActionView() {}

type SpendView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SpendView:
	//
	//	*SpendView_Visible_
	//	*SpendView_Opaque_
	SpendView isSpendView_SpendView `protobuf_oneof:"spend_view"`
}

func (x *SpendView) Reset() {
	*x = SpendView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendView) ProtoMessage() {}

func (x *SpendView) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendView.ProtoReflect.Descriptor instead.
func (*SpendView) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{12}
}

func (m *SpendView) GetSpendView() isSpendView_SpendView {
	if m != nil {
		return m.SpendView
	}
	return nil
}

func (x *SpendView) GetVisible() *SpendView_Visible {
	if x, ok := x.GetSpendView().(*SpendView_Visible_); ok {
		return x.Visible
	}
	return nil
}

func (x *SpendView) GetOpaque() *SpendView_Opaque {
	if x, ok := x.GetSpendView().(*SpendView_Opaque_); ok {
		return x.Opaque
	}
	return nil
}

type isSpendView_SpendView interface {
	isSpendView_SpendView()
}

type SpendView_Visible_ struct {
	Visible *SpendView_Visible `protobuf:"bytes,1,opt,name=visible,proto3,oneof"`
}

type SpendView_Opaque_ struct {
	Opaque *SpendView_Opaque `protobuf:"bytes,2,opt,name=opaque,proto3,oneof"`
}

func (*SpendView_Visible_) isSpendView_SpendView() {}

func (*SpendView_Opaque_) isSpendView_SpendView() {}

type DelegatorVoteView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DelegatorVote:
	//
	//	*DelegatorVoteView_Visible_
	//	*DelegatorVoteView_Opaque_
	DelegatorVote isDelegatorVoteView_DelegatorVote `protobuf_oneof:"delegator_vote"`
}

func (x *DelegatorVoteView) Reset() {
	*x = DelegatorVoteView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatorVoteView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatorVoteView) ProtoMessage() {}

func (x *DelegatorVoteView) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatorVoteView.ProtoReflect.Descriptor instead.
func (*DelegatorVoteView) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{13}
}

func (m *DelegatorVoteView) GetDelegatorVote() isDelegatorVoteView_DelegatorVote {
	if m != nil {
		return m.DelegatorVote
	}
	return nil
}

func (x *DelegatorVoteView) GetVisible() *DelegatorVoteView_Visible {
	if x, ok := x.GetDelegatorVote().(*DelegatorVoteView_Visible_); ok {
		return x.Visible
	}
	return nil
}

func (x *DelegatorVoteView) GetOpaque() *DelegatorVoteView_Opaque {
	if x, ok := x.GetDelegatorVote().(*DelegatorVoteView_Opaque_); ok {
		return x.Opaque
	}
	return nil
}

type isDelegatorVoteView_DelegatorVote interface {
	isDelegatorVoteView_DelegatorVote()
}

type DelegatorVoteView_Visible_ struct {
	Visible *DelegatorVoteView_Visible `protobuf:"bytes,1,opt,name=visible,proto3,oneof"`
}

type DelegatorVoteView_Opaque_ struct {
	Opaque *DelegatorVoteView_Opaque `protobuf:"bytes,2,opt,name=opaque,proto3,oneof"`
}

func (*DelegatorVoteView_Visible_) isDelegatorVoteView_DelegatorVote() {}

func (*DelegatorVoteView_Opaque_) isDelegatorVoteView_DelegatorVote() {}

type OutputView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OutputView:
	//
	//	*OutputView_Visible_
	//	*OutputView_Opaque_
	OutputView isOutputView_OutputView `protobuf_oneof:"output_view"`
}

func (x *OutputView) Reset() {
	*x = OutputView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputView) ProtoMessage() {}

func (x *OutputView) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputView.ProtoReflect.Descriptor instead.
func (*OutputView) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{14}
}

func (m *OutputView) GetOutputView() isOutputView_OutputView {
	if m != nil {
		return m.OutputView
	}
	return nil
}

func (x *OutputView) GetVisible() *OutputView_Visible {
	if x, ok := x.GetOutputView().(*OutputView_Visible_); ok {
		return x.Visible
	}
	return nil
}

func (x *OutputView) GetOpaque() *OutputView_Opaque {
	if x, ok := x.GetOutputView().(*OutputView_Opaque_); ok {
		return x.Opaque
	}
	return nil
}

type isOutputView_OutputView interface {
	isOutputView_OutputView()
}

type OutputView_Visible_ struct {
	Visible *OutputView_Visible `protobuf:"bytes,1,opt,name=visible,proto3,oneof"`
}

type OutputView_Opaque_ struct {
	Opaque *OutputView_Opaque `protobuf:"bytes,2,opt,name=opaque,proto3,oneof"`
}

func (*OutputView_Visible_) isOutputView_OutputView() {}

func (*OutputView_Opaque_) isOutputView_OutputView() {}

// Spends a shielded note.
type Spend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The effecting data of the spend.
	Body *SpendBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// The authorizing signature for the spend.
	AuthSig *v1alpha1.SpendAuthSignature `protobuf:"bytes,2,opt,name=auth_sig,json=authSig,proto3" json:"auth_sig,omitempty"`
	// The proof that the spend is well-formed is authorizing data.
	Proof *v1alpha1.ZKSpendProof `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *Spend) Reset() {
	*x = Spend{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Spend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Spend) ProtoMessage() {}

func (x *Spend) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Spend.ProtoReflect.Descriptor instead.
func (*Spend) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{15}
}

func (x *Spend) GetBody() *SpendBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Spend) GetAuthSig() *v1alpha1.SpendAuthSignature {
	if x != nil {
		return x.AuthSig
	}
	return nil
}

func (x *Spend) GetProof() *v1alpha1.ZKSpendProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

// The body of a spend description, containing only the effecting data
// describing changes to the ledger, and not the authorizing data that allows
// those changes to be performed.
type SpendBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A commitment to the value of the input note.
	BalanceCommitment *v1alpha1.BalanceCommitment `protobuf:"bytes,1,opt,name=balance_commitment,json=balanceCommitment,proto3" json:"balance_commitment,omitempty"`
	// The nullifier of the input note.
	Nullifier []byte `protobuf:"bytes,3,opt,name=nullifier,proto3" json:"nullifier,omitempty"`
	// The randomized validating key for the spend authorization signature.
	Rk []byte `protobuf:"bytes,4,opt,name=rk,proto3" json:"rk,omitempty"`
}

func (x *SpendBody) Reset() {
	*x = SpendBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendBody) ProtoMessage() {}

func (x *SpendBody) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendBody.ProtoReflect.Descriptor instead.
func (*SpendBody) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{16}
}

func (x *SpendBody) GetBalanceCommitment() *v1alpha1.BalanceCommitment {
	if x != nil {
		return x.BalanceCommitment
	}
	return nil
}

func (x *SpendBody) GetNullifier() []byte {
	if x != nil {
		return x.Nullifier
	}
	return nil
}

func (x *SpendBody) GetRk() []byte {
	if x != nil {
		return x.Rk
	}
	return nil
}

// Creates a new shielded note.
type Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The effecting data for the output.
	Body *OutputBody `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	// The output proof is authorizing data.
	Proof *v1alpha1.ZKOutputProof `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (x *Output) Reset() {
	*x = Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Output) ProtoMessage() {}

func (x *Output) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Output.ProtoReflect.Descriptor instead.
func (*Output) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{17}
}

func (x *Output) GetBody() *OutputBody {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *Output) GetProof() *v1alpha1.ZKOutputProof {
	if x != nil {
		return x.Proof
	}
	return nil
}

// The body of an output description, containing only the effecting data
// describing changes to the ledger, and not the authorizing data that allows
// those changes to be performed.
type OutputBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The minimal data required to scan and process the new output note.
	NotePayload *v1alpha1.NotePayload `protobuf:"bytes,1,opt,name=note_payload,json=notePayload,proto3" json:"note_payload,omitempty"`
	// A commitment to the value of the output note. 32 bytes.
	BalanceCommitment *v1alpha1.BalanceCommitment `protobuf:"bytes,2,opt,name=balance_commitment,json=balanceCommitment,proto3" json:"balance_commitment,omitempty"`
	// An encrypted key for decrypting the memo.
	WrappedMemoKey []byte `protobuf:"bytes,3,opt,name=wrapped_memo_key,json=wrappedMemoKey,proto3" json:"wrapped_memo_key,omitempty"`
	// The key material used for note encryption, wrapped in encryption to the
	// sender's outgoing viewing key. 80 bytes.
	OvkWrappedKey []byte `protobuf:"bytes,4,opt,name=ovk_wrapped_key,json=ovkWrappedKey,proto3" json:"ovk_wrapped_key,omitempty"`
}

func (x *OutputBody) Reset() {
	*x = OutputBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputBody) ProtoMessage() {}

func (x *OutputBody) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputBody.ProtoReflect.Descriptor instead.
func (*OutputBody) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{18}
}

func (x *OutputBody) GetNotePayload() *v1alpha1.NotePayload {
	if x != nil {
		return x.NotePayload
	}
	return nil
}

func (x *OutputBody) GetBalanceCommitment() *v1alpha1.BalanceCommitment {
	if x != nil {
		return x.BalanceCommitment
	}
	return nil
}

func (x *OutputBody) GetWrappedMemoKey() []byte {
	if x != nil {
		return x.WrappedMemoKey
	}
	return nil
}

func (x *OutputBody) GetOvkWrappedKey() []byte {
	if x != nil {
		return x.OvkWrappedKey
	}
	return nil
}

// The data required to authorize a transaction plan.
type AuthorizationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The computed auth hash for the approved transaction plan.
	EffectHash *v1alpha1.EffectHash `protobuf:"bytes,1,opt,name=effect_hash,json=effectHash,proto3" json:"effect_hash,omitempty"`
	// The required spend authorizations, returned in the same order as the
	// Spend actions in the original request.
	SpendAuths []*v1alpha1.SpendAuthSignature `protobuf:"bytes,2,rep,name=spend_auths,json=spendAuths,proto3" json:"spend_auths,omitempty"`
	// The required delegator vote authorizations, returned in the same order as the
	// DelegatorVote actions in the original request.
	DelegatorVoteAuths []*v1alpha1.SpendAuthSignature `protobuf:"bytes,3,rep,name=delegator_vote_auths,json=delegatorVoteAuths,proto3" json:"delegator_vote_auths,omitempty"`
}

func (x *AuthorizationData) Reset() {
	*x = AuthorizationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizationData) ProtoMessage() {}

func (x *AuthorizationData) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizationData.ProtoReflect.Descriptor instead.
func (*AuthorizationData) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{19}
}

func (x *AuthorizationData) GetEffectHash() *v1alpha1.EffectHash {
	if x != nil {
		return x.EffectHash
	}
	return nil
}

func (x *AuthorizationData) GetSpendAuths() []*v1alpha1.SpendAuthSignature {
	if x != nil {
		return x.SpendAuths
	}
	return nil
}

func (x *AuthorizationData) GetDelegatorVoteAuths() []*v1alpha1.SpendAuthSignature {
	if x != nil {
		return x.DelegatorVoteAuths
	}
	return nil
}

// The data required for proving when building a transaction from a plan.
type WitnessData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The anchor for the state transition proofs.
	Anchor *v1alpha1.MerkleRoot `protobuf:"bytes,1,opt,name=anchor,proto3" json:"anchor,omitempty"`
	// The auth paths for the notes the transaction spends, in the
	// same order as the spends in the transaction plan.
	StateCommitmentProofs []*v1alpha1.StateCommitmentProof `protobuf:"bytes,2,rep,name=state_commitment_proofs,json=stateCommitmentProofs,proto3" json:"state_commitment_proofs,omitempty"`
}

func (x *WitnessData) Reset() {
	*x = WitnessData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WitnessData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WitnessData) ProtoMessage() {}

func (x *WitnessData) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WitnessData.ProtoReflect.Descriptor instead.
func (*WitnessData) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{20}
}

func (x *WitnessData) GetAnchor() *v1alpha1.MerkleRoot {
	if x != nil {
		return x.Anchor
	}
	return nil
}

func (x *WitnessData) GetStateCommitmentProofs() []*v1alpha1.StateCommitmentProof {
	if x != nil {
		return x.StateCommitmentProofs
	}
	return nil
}

// Describes a planned transaction.
type TransactionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Actions      []*ActionPlan `protobuf:"bytes,1,rep,name=actions,proto3" json:"actions,omitempty"`
	ExpiryHeight uint64        `protobuf:"varint,2,opt,name=expiry_height,json=expiryHeight,proto3" json:"expiry_height,omitempty"`
	ChainId      string        `protobuf:"bytes,3,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Fee          *v1alpha1.Fee `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee,omitempty"`
	CluePlans    []*CluePlan   `protobuf:"bytes,5,rep,name=clue_plans,json=cluePlans,proto3" json:"clue_plans,omitempty"`
	MemoPlan     *MemoPlan     `protobuf:"bytes,6,opt,name=memo_plan,json=memoPlan,proto3" json:"memo_plan,omitempty"`
}

func (x *TransactionPlan) Reset() {
	*x = TransactionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionPlan) ProtoMessage() {}

func (x *TransactionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionPlan.ProtoReflect.Descriptor instead.
func (*TransactionPlan) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{21}
}

func (x *TransactionPlan) GetActions() []*ActionPlan {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *TransactionPlan) GetExpiryHeight() uint64 {
	if x != nil {
		return x.ExpiryHeight
	}
	return 0
}

func (x *TransactionPlan) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *TransactionPlan) GetFee() *v1alpha1.Fee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *TransactionPlan) GetCluePlans() []*CluePlan {
	if x != nil {
		return x.CluePlans
	}
	return nil
}

func (x *TransactionPlan) GetMemoPlan() *MemoPlan {
	if x != nil {
		return x.MemoPlan
	}
	return nil
}

// Describes a planned transaction action.
//
// Some transaction Actions don't have any private data and are treated as being plans
// themselves.
type ActionPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*ActionPlan_Spend
	//	*ActionPlan_Output
	//	*ActionPlan_Swap
	//	*ActionPlan_SwapClaim
	//	*ActionPlan_ValidatorDefinition
	//	*ActionPlan_IbcAction
	//	*ActionPlan_ProposalSubmit
	//	*ActionPlan_ProposalWithdraw
	//	*ActionPlan_ValidatorVote
	//	*ActionPlan_DelegatorVote
	//	*ActionPlan_ProposalDepositClaim
	//	*ActionPlan_Withdrawal
	//	*ActionPlan_PositionOpen
	//	*ActionPlan_PositionClose
	//	*ActionPlan_PositionWithdraw
	//	*ActionPlan_PositionRewardClaim
	//	*ActionPlan_Delegate
	//	*ActionPlan_Undelegate
	//	*ActionPlan_UndelegateClaim
	//	*ActionPlan_DaoSpend
	//	*ActionPlan_DaoOutput
	//	*ActionPlan_DaoDeposit
	Action isActionPlan_Action `protobuf_oneof:"action"`
}

func (x *ActionPlan) Reset() {
	*x = ActionPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionPlan) ProtoMessage() {}

func (x *ActionPlan) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionPlan.ProtoReflect.Descriptor instead.
func (*ActionPlan) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{22}
}

func (m *ActionPlan) GetAction() isActionPlan_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ActionPlan) GetSpend() *SpendPlan {
	if x, ok := x.GetAction().(*ActionPlan_Spend); ok {
		return x.Spend
	}
	return nil
}

func (x *ActionPlan) GetOutput() *OutputPlan {
	if x, ok := x.GetAction().(*ActionPlan_Output); ok {
		return x.Output
	}
	return nil
}

func (x *ActionPlan) GetSwap() *v1alpha11.SwapPlan {
	if x, ok := x.GetAction().(*ActionPlan_Swap); ok {
		return x.Swap
	}
	return nil
}

func (x *ActionPlan) GetSwapClaim() *v1alpha11.SwapClaimPlan {
	if x, ok := x.GetAction().(*ActionPlan_SwapClaim); ok {
		return x.SwapClaim
	}
	return nil
}

func (x *ActionPlan) GetValidatorDefinition() *v1alpha12.ValidatorDefinition {
	if x, ok := x.GetAction().(*ActionPlan_ValidatorDefinition); ok {
		return x.ValidatorDefinition
	}
	return nil
}

func (x *ActionPlan) GetIbcAction() *v1alpha13.IbcAction {
	if x, ok := x.GetAction().(*ActionPlan_IbcAction); ok {
		return x.IbcAction
	}
	return nil
}

func (x *ActionPlan) GetProposalSubmit() *v1alpha14.ProposalSubmit {
	if x, ok := x.GetAction().(*ActionPlan_ProposalSubmit); ok {
		return x.ProposalSubmit
	}
	return nil
}

func (x *ActionPlan) GetProposalWithdraw() *v1alpha14.ProposalWithdraw {
	if x, ok := x.GetAction().(*ActionPlan_ProposalWithdraw); ok {
		return x.ProposalWithdraw
	}
	return nil
}

func (x *ActionPlan) GetValidatorVote() *v1alpha14.ValidatorVote {
	if x, ok := x.GetAction().(*ActionPlan_ValidatorVote); ok {
		return x.ValidatorVote
	}
	return nil
}

func (x *ActionPlan) GetDelegatorVote() *v1alpha14.DelegatorVotePlan {
	if x, ok := x.GetAction().(*ActionPlan_DelegatorVote); ok {
		return x.DelegatorVote
	}
	return nil
}

func (x *ActionPlan) GetProposalDepositClaim() *v1alpha14.ProposalDepositClaim {
	if x, ok := x.GetAction().(*ActionPlan_ProposalDepositClaim); ok {
		return x.ProposalDepositClaim
	}
	return nil
}

func (x *ActionPlan) GetWithdrawal() *v1alpha13.Ics20Withdrawal {
	if x, ok := x.GetAction().(*ActionPlan_Withdrawal); ok {
		return x.Withdrawal
	}
	return nil
}

func (x *ActionPlan) GetPositionOpen() *v1alpha11.PositionOpen {
	if x, ok := x.GetAction().(*ActionPlan_PositionOpen); ok {
		return x.PositionOpen
	}
	return nil
}

func (x *ActionPlan) GetPositionClose() *v1alpha11.PositionClose {
	if x, ok := x.GetAction().(*ActionPlan_PositionClose); ok {
		return x.PositionClose
	}
	return nil
}

func (x *ActionPlan) GetPositionWithdraw() *v1alpha11.PositionWithdrawPlan {
	if x, ok := x.GetAction().(*ActionPlan_PositionWithdraw); ok {
		return x.PositionWithdraw
	}
	return nil
}

func (x *ActionPlan) GetPositionRewardClaim() *v1alpha11.PositionRewardClaimPlan {
	if x, ok := x.GetAction().(*ActionPlan_PositionRewardClaim); ok {
		return x.PositionRewardClaim
	}
	return nil
}

func (x *ActionPlan) GetDelegate() *v1alpha12.Delegate {
	if x, ok := x.GetAction().(*ActionPlan_Delegate); ok {
		return x.Delegate
	}
	return nil
}

func (x *ActionPlan) GetUndelegate() *v1alpha12.Undelegate {
	if x, ok := x.GetAction().(*ActionPlan_Undelegate); ok {
		return x.Undelegate
	}
	return nil
}

func (x *ActionPlan) GetUndelegateClaim() *v1alpha12.UndelegateClaimPlan {
	if x, ok := x.GetAction().(*ActionPlan_UndelegateClaim); ok {
		return x.UndelegateClaim
	}
	return nil
}

func (x *ActionPlan) GetDaoSpend() *v1alpha14.DaoSpend {
	if x, ok := x.GetAction().(*ActionPlan_DaoSpend); ok {
		return x.DaoSpend
	}
	return nil
}

func (x *ActionPlan) GetDaoOutput() *v1alpha14.DaoOutput {
	if x, ok := x.GetAction().(*ActionPlan_DaoOutput); ok {
		return x.DaoOutput
	}
	return nil
}

func (x *ActionPlan) GetDaoDeposit() *v1alpha14.DaoDeposit {
	if x, ok := x.GetAction().(*ActionPlan_DaoDeposit); ok {
		return x.DaoDeposit
	}
	return nil
}

type isActionPlan_Action interface {
	isActionPlan_Action()
}

type ActionPlan_Spend struct {
	Spend *SpendPlan `protobuf:"bytes,1,opt,name=spend,proto3,oneof"`
}

type ActionPlan_Output struct {
	Output *OutputPlan `protobuf:"bytes,2,opt,name=output,proto3,oneof"`
}

type ActionPlan_Swap struct {
	Swap *v1alpha11.SwapPlan `protobuf:"bytes,3,opt,name=swap,proto3,oneof"`
}

type ActionPlan_SwapClaim struct {
	SwapClaim *v1alpha11.SwapClaimPlan `protobuf:"bytes,4,opt,name=swap_claim,json=swapClaim,proto3,oneof"`
}

type ActionPlan_ValidatorDefinition struct {
	// This is just a message relayed to the chain.
	ValidatorDefinition *v1alpha12.ValidatorDefinition `protobuf:"bytes,16,opt,name=validator_definition,json=validatorDefinition,proto3,oneof"`
}

type ActionPlan_IbcAction struct {
	// This is just a message relayed to the chain.
	IbcAction *v1alpha13.IbcAction `protobuf:"bytes,17,opt,name=ibc_action,json=ibcAction,proto3,oneof"`
}

type ActionPlan_ProposalSubmit struct {
	// Governance:
	ProposalSubmit *v1alpha14.ProposalSubmit `protobuf:"bytes,18,opt,name=proposal_submit,json=proposalSubmit,proto3,oneof"`
}

type ActionPlan_ProposalWithdraw struct {
	ProposalWithdraw *v1alpha14.ProposalWithdraw `protobuf:"bytes,19,opt,name=proposal_withdraw,json=proposalWithdraw,proto3,oneof"`
}

type ActionPlan_ValidatorVote struct {
	ValidatorVote *v1alpha14.ValidatorVote `protobuf:"bytes,20,opt,name=validator_vote,json=validatorVote,proto3,oneof"`
}

type ActionPlan_DelegatorVote struct {
	DelegatorVote *v1alpha14.DelegatorVotePlan `protobuf:"bytes,21,opt,name=delegator_vote,json=delegatorVote,proto3,oneof"`
}

type ActionPlan_ProposalDepositClaim struct {
	ProposalDepositClaim *v1alpha14.ProposalDepositClaim `protobuf:"bytes,22,opt,name=proposal_deposit_claim,json=proposalDepositClaim,proto3,oneof"`
}

type ActionPlan_Withdrawal struct {
	Withdrawal *v1alpha13.Ics20Withdrawal `protobuf:"bytes,23,opt,name=withdrawal,proto3,oneof"`
}

type ActionPlan_PositionOpen struct {
	PositionOpen *v1alpha11.PositionOpen `protobuf:"bytes,30,opt,name=position_open,json=positionOpen,proto3,oneof"`
}

type ActionPlan_PositionClose struct {
	PositionClose *v1alpha11.PositionClose `protobuf:"bytes,31,opt,name=position_close,json=positionClose,proto3,oneof"`
}

type ActionPlan_PositionWithdraw struct {
	// The position withdraw/reward claim actions require balance information so they have Plan types.
	PositionWithdraw *v1alpha11.PositionWithdrawPlan `protobuf:"bytes,32,opt,name=position_withdraw,json=positionWithdraw,proto3,oneof"`
}

type ActionPlan_PositionRewardClaim struct {
	PositionRewardClaim *v1alpha11.PositionRewardClaimPlan `protobuf:"bytes,34,opt,name=position_reward_claim,json=positionRewardClaim,proto3,oneof"`
}

type ActionPlan_Delegate struct {
	// We don't need any extra information (yet) to understand delegations,
	// because we don't yet use flow encryption.
	Delegate *v1alpha12.Delegate `protobuf:"bytes,40,opt,name=delegate,proto3,oneof"`
}

type ActionPlan_Undelegate struct {
	// We don't need any extra information (yet) to understand undelegations,
	// because we don't yet use flow encryption.
	Undelegate *v1alpha12.Undelegate `protobuf:"bytes,41,opt,name=undelegate,proto3,oneof"`
}

type ActionPlan_UndelegateClaim struct {
	UndelegateClaim *v1alpha12.UndelegateClaimPlan `protobuf:"bytes,42,opt,name=undelegate_claim,json=undelegateClaim,proto3,oneof"`
}

type ActionPlan_DaoSpend struct {
	// DAO
	DaoSpend *v1alpha14.DaoSpend `protobuf:"bytes,50,opt,name=dao_spend,json=daoSpend,proto3,oneof"`
}

type ActionPlan_DaoOutput struct {
	DaoOutput *v1alpha14.DaoOutput `protobuf:"bytes,51,opt,name=dao_output,json=daoOutput,proto3,oneof"`
}

type ActionPlan_DaoDeposit struct {
	DaoDeposit *v1alpha14.DaoDeposit `protobuf:"bytes,52,opt,name=dao_deposit,json=daoDeposit,proto3,oneof"`
}

func (*ActionPlan_Spend) isActionPlan_Action() {}

func (*ActionPlan_Output) isActionPlan_Action() {}

func (*ActionPlan_Swap) isActionPlan_Action() {}

func (*ActionPlan_SwapClaim) isActionPlan_Action() {}

func (*ActionPlan_ValidatorDefinition) isActionPlan_Action() {}

func (*ActionPlan_IbcAction) isActionPlan_Action() {}

func (*ActionPlan_ProposalSubmit) isActionPlan_Action() {}

func (*ActionPlan_ProposalWithdraw) isActionPlan_Action() {}

func (*ActionPlan_ValidatorVote) isActionPlan_Action() {}

func (*ActionPlan_DelegatorVote) isActionPlan_Action() {}

func (*ActionPlan_ProposalDepositClaim) isActionPlan_Action() {}

func (*ActionPlan_Withdrawal) isActionPlan_Action() {}

func (*ActionPlan_PositionOpen) isActionPlan_Action() {}

func (*ActionPlan_PositionClose) isActionPlan_Action() {}

func (*ActionPlan_PositionWithdraw) isActionPlan_Action() {}

func (*ActionPlan_PositionRewardClaim) isActionPlan_Action() {}

func (*ActionPlan_Delegate) isActionPlan_Action() {}

func (*ActionPlan_Undelegate) isActionPlan_Action() {}

func (*ActionPlan_UndelegateClaim) isActionPlan_Action() {}

func (*ActionPlan_DaoSpend) isActionPlan_Action() {}

func (*ActionPlan_DaoOutput) isActionPlan_Action() {}

func (*ActionPlan_DaoDeposit) isActionPlan_Action() {}

// Describes a plan for forming a `Clue`.
type CluePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The address.
	Address *v1alpha1.Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// The random seed to use for the clue plan.
	Rseed []byte `protobuf:"bytes,2,opt,name=rseed,proto3" json:"rseed,omitempty"`
	// The bits of precision.
	PrecisionBits uint64 `protobuf:"varint,3,opt,name=precision_bits,json=precisionBits,proto3" json:"precision_bits,omitempty"`
}

func (x *CluePlan) Reset() {
	*x = CluePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CluePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CluePlan) ProtoMessage() {}

func (x *CluePlan) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CluePlan.ProtoReflect.Descriptor instead.
func (*CluePlan) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{23}
}

func (x *CluePlan) GetAddress() *v1alpha1.Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *CluePlan) GetRseed() []byte {
	if x != nil {
		return x.Rseed
	}
	return nil
}

func (x *CluePlan) GetPrecisionBits() uint64 {
	if x != nil {
		return x.PrecisionBits
	}
	return 0
}

// Describes a plan for forming a `Memo`.
type MemoPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The plaintext.
	Plaintext *MemoPlaintext `protobuf:"bytes,1,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
	// The key to use to encrypt the memo.
	Key []byte `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *MemoPlan) Reset() {
	*x = MemoPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoPlan) ProtoMessage() {}

func (x *MemoPlan) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoPlan.ProtoReflect.Descriptor instead.
func (*MemoPlan) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{24}
}

func (x *MemoPlan) GetPlaintext() *MemoPlaintext {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

func (x *MemoPlan) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type MemoCiphertext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *MemoCiphertext) Reset() {
	*x = MemoCiphertext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoCiphertext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoCiphertext) ProtoMessage() {}

func (x *MemoCiphertext) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoCiphertext.ProtoReflect.Descriptor instead.
func (*MemoCiphertext) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{25}
}

func (x *MemoCiphertext) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

type MemoPlaintext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sender *v1alpha1.Address `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Text   string            `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *MemoPlaintext) Reset() {
	*x = MemoPlaintext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoPlaintext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoPlaintext) ProtoMessage() {}

func (x *MemoPlaintext) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoPlaintext.ProtoReflect.Descriptor instead.
func (*MemoPlaintext) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{26}
}

func (x *MemoPlaintext) GetSender() *v1alpha1.Address {
	if x != nil {
		return x.Sender
	}
	return nil
}

func (x *MemoPlaintext) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type MemoView struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MemoView:
	//
	//	*MemoView_Visible_
	//	*MemoView_Opaque_
	MemoView isMemoView_MemoView `protobuf_oneof:"memo_view"`
}

func (x *MemoView) Reset() {
	*x = MemoView{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoView) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoView) ProtoMessage() {}

func (x *MemoView) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoView.ProtoReflect.Descriptor instead.
func (*MemoView) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{27}
}

func (m *MemoView) GetMemoView() isMemoView_MemoView {
	if m != nil {
		return m.MemoView
	}
	return nil
}

func (x *MemoView) GetVisible() *MemoView_Visible {
	if x, ok := x.GetMemoView().(*MemoView_Visible_); ok {
		return x.Visible
	}
	return nil
}

func (x *MemoView) GetOpaque() *MemoView_Opaque {
	if x, ok := x.GetMemoView().(*MemoView_Opaque_); ok {
		return x.Opaque
	}
	return nil
}

type isMemoView_MemoView interface {
	isMemoView_MemoView()
}

type MemoView_Visible_ struct {
	Visible *MemoView_Visible `protobuf:"bytes,1,opt,name=visible,proto3,oneof"`
}

type MemoView_Opaque_ struct {
	Opaque *MemoView_Opaque `protobuf:"bytes,2,opt,name=opaque,proto3,oneof"`
}

func (*MemoView_Visible_) isMemoView_MemoView() {}

func (*MemoView_Opaque_) isMemoView_MemoView() {}

type SpendPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The plaintext note we plan to spend.
	Note *v1alpha1.Note `protobuf:"bytes,1,opt,name=note,proto3" json:"note,omitempty"`
	// The position of the note we plan to spend.
	Position uint64 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	// The randomizer to use for the spend.
	Randomizer []byte `protobuf:"bytes,3,opt,name=randomizer,proto3" json:"randomizer,omitempty"`
	// The blinding factor to use for the value commitment.
	ValueBlinding []byte `protobuf:"bytes,4,opt,name=value_blinding,json=valueBlinding,proto3" json:"value_blinding,omitempty"`
}

func (x *SpendPlan) Reset() {
	*x = SpendPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendPlan) ProtoMessage() {}

func (x *SpendPlan) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendPlan.ProtoReflect.Descriptor instead.
func (*SpendPlan) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{28}
}

func (x *SpendPlan) GetNote() *v1alpha1.Note {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *SpendPlan) GetPosition() uint64 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *SpendPlan) GetRandomizer() []byte {
	if x != nil {
		return x.Randomizer
	}
	return nil
}

func (x *SpendPlan) GetValueBlinding() []byte {
	if x != nil {
		return x.ValueBlinding
	}
	return nil
}

type OutputPlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value to send to this output.
	Value *v1alpha1.Value `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// The destination address to send it to.
	DestAddress *v1alpha1.Address `protobuf:"bytes,2,opt,name=dest_address,json=destAddress,proto3" json:"dest_address,omitempty"`
	// The rseed to use for the new note.
	Rseed []byte `protobuf:"bytes,3,opt,name=rseed,proto3" json:"rseed,omitempty"`
	// The blinding factor to use for the value commitment.
	ValueBlinding []byte `protobuf:"bytes,4,opt,name=value_blinding,json=valueBlinding,proto3" json:"value_blinding,omitempty"`
}

func (x *OutputPlan) Reset() {
	*x = OutputPlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputPlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputPlan) ProtoMessage() {}

func (x *OutputPlan) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputPlan.ProtoReflect.Descriptor instead.
func (*OutputPlan) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{29}
}

func (x *OutputPlan) GetValue() *v1alpha1.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *OutputPlan) GetDestAddress() *v1alpha1.Address {
	if x != nil {
		return x.DestAddress
	}
	return nil
}

func (x *OutputPlan) GetRseed() []byte {
	if x != nil {
		return x.Rseed
	}
	return nil
}

func (x *OutputPlan) GetValueBlinding() []byte {
	if x != nil {
		return x.ValueBlinding
	}
	return nil
}

type SpendView_Visible struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spend *Spend             `protobuf:"bytes,1,opt,name=spend,proto3" json:"spend,omitempty"`
	Note  *v1alpha1.NoteView `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *SpendView_Visible) Reset() {
	*x = SpendView_Visible{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendView_Visible) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendView_Visible) ProtoMessage() {}

func (x *SpendView_Visible) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendView_Visible.ProtoReflect.Descriptor instead.
func (*SpendView_Visible) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{12, 0}
}

func (x *SpendView_Visible) GetSpend() *Spend {
	if x != nil {
		return x.Spend
	}
	return nil
}

func (x *SpendView_Visible) GetNote() *v1alpha1.NoteView {
	if x != nil {
		return x.Note
	}
	return nil
}

type SpendView_Opaque struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spend *Spend `protobuf:"bytes,1,opt,name=spend,proto3" json:"spend,omitempty"`
}

func (x *SpendView_Opaque) Reset() {
	*x = SpendView_Opaque{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpendView_Opaque) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpendView_Opaque) ProtoMessage() {}

func (x *SpendView_Opaque) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpendView_Opaque.ProtoReflect.Descriptor instead.
func (*SpendView_Opaque) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{12, 1}
}

func (x *SpendView_Opaque) GetSpend() *Spend {
	if x != nil {
		return x.Spend
	}
	return nil
}

type DelegatorVoteView_Visible struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelegatorVote *v1alpha14.DelegatorVote `protobuf:"bytes,1,opt,name=delegator_vote,json=delegatorVote,proto3" json:"delegator_vote,omitempty"`
	Note          *v1alpha1.NoteView       `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
}

func (x *DelegatorVoteView_Visible) Reset() {
	*x = DelegatorVoteView_Visible{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatorVoteView_Visible) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatorVoteView_Visible) ProtoMessage() {}

func (x *DelegatorVoteView_Visible) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatorVoteView_Visible.ProtoReflect.Descriptor instead.
func (*DelegatorVoteView_Visible) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{13, 0}
}

func (x *DelegatorVoteView_Visible) GetDelegatorVote() *v1alpha14.DelegatorVote {
	if x != nil {
		return x.DelegatorVote
	}
	return nil
}

func (x *DelegatorVoteView_Visible) GetNote() *v1alpha1.NoteView {
	if x != nil {
		return x.Note
	}
	return nil
}

type DelegatorVoteView_Opaque struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelegatorVote *v1alpha14.DelegatorVote `protobuf:"bytes,1,opt,name=delegator_vote,json=delegatorVote,proto3" json:"delegator_vote,omitempty"`
}

func (x *DelegatorVoteView_Opaque) Reset() {
	*x = DelegatorVoteView_Opaque{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatorVoteView_Opaque) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatorVoteView_Opaque) ProtoMessage() {}

func (x *DelegatorVoteView_Opaque) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatorVoteView_Opaque.ProtoReflect.Descriptor instead.
func (*DelegatorVoteView_Opaque) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{13, 1}
}

func (x *DelegatorVoteView_Opaque) GetDelegatorVote() *v1alpha14.DelegatorVote {
	if x != nil {
		return x.DelegatorVote
	}
	return nil
}

type OutputView_Visible struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output     *Output            `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	Note       *v1alpha1.NoteView `protobuf:"bytes,2,opt,name=note,proto3" json:"note,omitempty"`
	PayloadKey *PayloadKey        `protobuf:"bytes,3,opt,name=payload_key,json=payloadKey,proto3" json:"payload_key,omitempty"`
}

func (x *OutputView_Visible) Reset() {
	*x = OutputView_Visible{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputView_Visible) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputView_Visible) ProtoMessage() {}

func (x *OutputView_Visible) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputView_Visible.ProtoReflect.Descriptor instead.
func (*OutputView_Visible) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{14, 0}
}

func (x *OutputView_Visible) GetOutput() *Output {
	if x != nil {
		return x.Output
	}
	return nil
}

func (x *OutputView_Visible) GetNote() *v1alpha1.NoteView {
	if x != nil {
		return x.Note
	}
	return nil
}

func (x *OutputView_Visible) GetPayloadKey() *PayloadKey {
	if x != nil {
		return x.PayloadKey
	}
	return nil
}

type OutputView_Opaque struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Output *Output `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *OutputView_Opaque) Reset() {
	*x = OutputView_Opaque{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputView_Opaque) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputView_Opaque) ProtoMessage() {}

func (x *OutputView_Opaque) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputView_Opaque.ProtoReflect.Descriptor instead.
func (*OutputView_Opaque) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{14, 1}
}

func (x *OutputView_Opaque) GetOutput() *Output {
	if x != nil {
		return x.Output
	}
	return nil
}

type MemoView_Visible struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ciphertext *MemoCiphertext `protobuf:"bytes,1,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Plaintext  *MemoPlaintext  `protobuf:"bytes,2,opt,name=plaintext,proto3" json:"plaintext,omitempty"`
}

func (x *MemoView_Visible) Reset() {
	*x = MemoView_Visible{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoView_Visible) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoView_Visible) ProtoMessage() {}

func (x *MemoView_Visible) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoView_Visible.ProtoReflect.Descriptor instead.
func (*MemoView_Visible) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{27, 0}
}

func (x *MemoView_Visible) GetCiphertext() *MemoCiphertext {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *MemoView_Visible) GetPlaintext() *MemoPlaintext {
	if x != nil {
		return x.Plaintext
	}
	return nil
}

type MemoView_Opaque struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ciphertext *MemoCiphertext `protobuf:"bytes,1,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
}

func (x *MemoView_Opaque) Reset() {
	*x = MemoView_Opaque{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemoView_Opaque) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemoView_Opaque) ProtoMessage() {}

func (x *MemoView_Opaque) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemoView_Opaque.ProtoReflect.Descriptor instead.
func (*MemoView_Opaque) Descriptor() ([]byte, []int) {
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP(), []int{27, 1}
}

func (x *MemoView_Opaque) GetCiphertext() *MemoCiphertext {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

var File_penumbra_core_transaction_v1alpha1_transaction_proto protoreflect.FileDescriptor

var file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDesc = []byte{
	0x0a, 0x34, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x22, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x2a, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x24, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f,
	0x69, 0x62, 0x63, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x69, 0x62, 0x63,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x65, 0x78, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x64, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xba, 0x01, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x47, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x06, 0x61, 0x6e,
	0x63, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c,
	0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0x18, 0x0a,
	0x02, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0x22, 0x0a, 0x0a, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0xce, 0x02, 0x0a, 0x0f,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x12,
	0x44, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x66,
	0x6d, 0x64, 0x5f, 0x63, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x6d, 0x64, 0x43, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a,
	0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x22, 0xd3, 0x0e, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x44, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x36, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64,
	0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70,
	0x48, 0x00, 0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x12, 0x46, 0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70,
	0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x78,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x73, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x12, 0x66, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0a, 0x69, 0x62, 0x63, 0x5f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x62, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x62, 0x63, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x62, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5c, 0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0e,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x62,
	0x0a, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x48, 0x00,
	0x52, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x12, 0x59, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x59, 0x0a,
	0x0e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x4f, 0x0a, 0x0d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x52, 0x0a, 0x0e, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x5b,
	0x0a, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x65, 0x0a, 0x15, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00, 0x52, 0x13, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x61,
	0x69, 0x6d, 0x12, 0x44, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x08,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00, 0x52,
	0x0f, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x12, 0x4a, 0x0a, 0x09, 0x64, 0x61, 0x6f, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x6f, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x6f, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x4d, 0x0a, 0x0a,
	0x64, 0x61, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00,
	0x52, 0x09, 0x64, 0x61, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x64,
	0x61, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48,
	0x00, 0x52, 0x0a, 0x64, 0x61, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x12, 0x59, 0x0a,
	0x10, 0x69, 0x63, 0x73, 0x32, 0x30, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61,
	0x6c, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x63, 0x73, 0x32, 0x30, 0x57, 0x69, 0x74, 0x68, 0x64,
	0x72, 0x61, 0x77, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x63, 0x73, 0x32, 0x30, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x89, 0x04, 0x0a, 0x16, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x65, 0x72, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x5f, 0x0a,
	0x0c, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x4b, 0x65, 0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x60,
	0x0a, 0x10, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x75,
	0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x52,
	0x0f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73,
	0x12, 0x46, 0x0a, 0x0c, 0x61, 0x64, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x6f, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x52, 0x0b, 0x61, 0x64, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0d, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x69, 0x65, 0x77, 0x52, 0x0c, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x56, 0x69, 0x65, 0x77, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x64, 0x65, 0x6e,
	0x6f, 0x6d, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x73, 0x12,
	0x4d, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x64, 0x52,
	0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x22,
	0x0a, 0x0a, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x22, 0xbb, 0x01, 0x0a, 0x18, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x65,
	0x79, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x4f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x65, 0x79,
	0x12, 0x4e, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x94, 0x01, 0x0a, 0x11, 0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x57, 0x69,
	0x74, 0x68, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x09, 0x6e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x37,
	0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x74,
	0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x12, 0x54, 0x0a, 0x09, 0x62,
	0x6f, 0x64, 0x79, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x56, 0x69, 0x65, 0x77, 0x52, 0x08, 0x62, 0x6f, 0x64, 0x79, 0x56, 0x69, 0x65,
	0x77, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x69, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x69, 0x67, 0x12, 0x41, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x52, 0x06, 0x61,
	0x6e, 0x63, 0x68, 0x6f, 0x72, 0x22, 0xfe, 0x02, 0x0a, 0x13, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x56, 0x69, 0x65, 0x77, 0x12, 0x51, 0x0a,
	0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x69, 0x65, 0x77, 0x73,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x48,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64,
	0x12, 0x34, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x65,
	0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x6d, 0x64, 0x5f, 0x63, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x66, 0x6d, 0x64, 0x43, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f,
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x6d,
	0x6f, 0x56, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6d, 0x65, 0x6d,
	0x6f, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0xf1, 0x0e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x56, 0x69, 0x65, 0x77, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x56,
	0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x48, 0x0a, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x06,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x56, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x04, 0x73, 0x77,
	0x61, 0x70, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x56, 0x69, 0x65,
	0x77, 0x48, 0x00, 0x52, 0x09, 0x73, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x66,
	0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x13, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0a, 0x69, 0x62, 0x63, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x62, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x09, 0x69, 0x62, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c,
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x62, 0x0a, 0x11,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x48, 0x00, 0x52, 0x10,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
	0x12, 0x59, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x6f,
	0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x0e, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x16, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43,
	0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x4f, 0x0a, 0x0d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52,
	0x0c, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x52, 0x0a,
	0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x5b, 0x0a, 0x11, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x78,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x65,
	0x0a, 0x15, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x65,
	0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00,
	0x52, 0x13, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x44, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x0a, 0x75,
	0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55,
	0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x75, 0x6e, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x64, 0x61, 0x6f, 0x5f, 0x73,
	0x70, 0x65, 0x6e, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x61, 0x6f, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61, 0x6f, 0x53, 0x70,
	0x65, 0x6e, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x64, 0x61, 0x6f, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x6f, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x6f, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x64, 0x61, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x61, 0x6f, 0x44,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x61, 0x6f, 0x44, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x12, 0x5a, 0x0a, 0x10, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x48, 0x00, 0x52,
	0x0f, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x12, 0x59, 0x0a, 0x10, 0x69, 0x63, 0x73, 0x32, 0x30, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72,
	0x61, 0x77, 0x61, 0x6c, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x62, 0x63, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x63, 0x73, 0x32, 0x30, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0f, 0x69, 0x63, 0x73, 0x32,
	0x30, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x42, 0x0d, 0x0a, 0x0b, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0x91, 0x03, 0x0a, 0x09, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x65, 0x77, 0x12, 0x51, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x70, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x4e, 0x0a, 0x06, 0x6f,
	0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x1a, 0x87, 0x01, 0x0a, 0x07,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x52, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52,
	0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0x49, 0x0a, 0x06, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12,
	0x3f, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x52, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x64,
	0x42, 0x0c, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0xdd,
	0x03, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65,
	0x56, 0x69, 0x65, 0x77, 0x12, 0x59, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12,
	0x56, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f,
	0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x1a, 0x9f, 0x01, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x0d, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x04,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x56,
	0x69, 0x65, 0x77, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x1a, 0x61, 0x0a, 0x06, 0x4f, 0x70, 0x61,
	0x71, 0x75, 0x65, 0x12, 0x57, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65,
	0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x0d, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x42, 0x10, 0x0a, 0x0e,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x22, 0xec,
	0x03, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x65, 0x77, 0x12, 0x52, 0x0a,
	0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x12, 0x4f, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x56, 0x69, 0x65,
	0x77, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x1a, 0xdb, 0x01, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x42,
	0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x12, 0x3b, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12,
	0x4f, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4b, 0x65, 0x79,
	0x1a, 0x4c, 0x0a, 0x06, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x0d,
	0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x22, 0xdb, 0x01,
	0x0a, 0x05, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x4c, 0x0a, 0x08, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x65,
	0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x07, 0x61, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x12, 0x41, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x5a, 0x4b, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x9a, 0x01, 0x0a, 0x09,
	0x53, 0x70, 0x65, 0x6e, 0x64, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x5f, 0x0a, 0x12, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x75,
	0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x6e,
	0x75, 0x6c, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x72, 0x6b, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x72, 0x6b, 0x22, 0x90, 0x01, 0x0a, 0x06, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x42, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x5a, 0x4b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x8e, 0x02, 0x0a, 0x0a,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x4d, 0x0a, 0x0c, 0x6e, 0x6f,
	0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x0b, 0x6e, 0x6f,
	0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5f, 0x0a, 0x12, 0x62, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x6d,
	0x6f, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x76, 0x6b, 0x5f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6f,
	0x76, 0x6b, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x22, 0x98, 0x02, 0x0a,
	0x11, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x4a, 0x0a, 0x0b, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x52,
	0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74,
	0x68, 0x73, 0x12, 0x63, 0x0a, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f,
	0x76, 0x6f, 0x74, 0x65, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x12, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f,
	0x74, 0x65, 0x41, 0x75, 0x74, 0x68, 0x73, 0x22, 0xbd, 0x01, 0x0a, 0x0b, 0x57, 0x69, 0x74, 0x6e,
	0x65, 0x73, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x41, 0x0a, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x72, 0x6b, 0x6c, 0x65, 0x52, 0x6f,
	0x6f, 0x74, 0x52, 0x06, 0x61, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x12, 0x6b, 0x0a, 0x17, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x6f, 0x66, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x52, 0x15, 0x73, 0x74, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x73, 0x22, 0xe9, 0x02, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x48, 0x0a, 0x07, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x07, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f,
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x79, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x03, 0x66, 0x65, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x63,
	0x6c, 0x75, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6c, 0x75, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x09, 0x63,
	0x6c, 0x75, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f,
	0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x6f, 0x50,
	0x6c, 0x61, 0x6e, 0x22, 0xeb, 0x0e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x45, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x50, 0x6c, 0x61, 0x6e,
	0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x77, 0x61, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x77, 0x61, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x12,
	0x4a, 0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63,
	0x6f, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x77, 0x61, 0x70, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x66, 0x0a, 0x14, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0a, 0x69, 0x62, 0x63, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x62, 0x63, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x62, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x09, 0x69, 0x62, 0x63, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x12, 0x62, 0x0a, 0x11, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61,
	0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x61, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x59, 0x0a,
	0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x5d, 0x0a, 0x0e, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x76, 0x6f, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x6f,
	0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x6f, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x6f, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x63, 0x6c, 0x61, 0x69,
	0x6d, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x4d, 0x0a, 0x0a, 0x77, 0x69, 0x74, 0x68,
	0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x69, 0x62, 0x63,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x63, 0x73, 0x32, 0x30, 0x57,
	0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0a, 0x77, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x4f, 0x0a, 0x0d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64,
	0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x52, 0x0a, 0x0e, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65,
	0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x5f, 0x0a, 0x11,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x78, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x12, 0x69, 0x0a,
	0x15, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x64, 0x65, 0x78,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x50, 0x6c, 0x61,
	0x6e, 0x48, 0x00, 0x52, 0x13, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x44, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x4a,
	0x0a, 0x0a, 0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x75, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x5e, 0x0a, 0x10, 0x75, 0x6e,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x2a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x50, 0x6c, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x75, 0x6e, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x12, 0x4a, 0x0a, 0x09, 0x64, 0x61,
	0x6f, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f,
	0x76, 0x65, 0x72, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x44, 0x61, 0x6f, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x08, 0x64, 0x61,
	0x6f, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x12, 0x4d, 0x0a, 0x0a, 0x64, 0x61, 0x6f, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x61, 0x6f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x6f, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x64, 0x61, 0x6f, 0x5f, 0x64, 0x65, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x67, 0x6f, 0x76, 0x65, 0x72,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x61, 0x6f, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x61, 0x6f,
	0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x89, 0x01, 0x0a, 0x08, 0x43, 0x6c, 0x75, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x40,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x72, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x72, 0x73, 0x65, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x62, 0x69, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x69, 0x74, 0x73, 0x22, 0x6d, 0x0a,
	0x08, 0x4d, 0x65, 0x6d, 0x6f, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x4f, 0x0a, 0x09, 0x70, 0x6c, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x26, 0x0a, 0x0e,
	0x4d, 0x65, 0x6d, 0x6f, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x22, 0x63, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x50, 0x6c, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x06, 0x73,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0xc7, 0x03, 0x0a, 0x08, 0x4d, 0x65,
	0x6d, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x12, 0x50, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x6d,
	0x6f, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x6f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x65,
	0x6d, 0x6f, 0x56, 0x69, 0x65, 0x77, 0x2e, 0x4f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x06, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x1a, 0xae, 0x01, 0x0a, 0x07, 0x56, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x6d,
	0x6f, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x4f, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4d, 0x65, 0x6d, 0x6f, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x09, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x5c, 0x0a, 0x06, 0x4f, 0x70, 0x61, 0x71,
	0x75, 0x65, 0x12, 0x52, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4d, 0x65, 0x6d, 0x6f,
	0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0a, 0x63, 0x69, 0x70, 0x68,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x6f, 0x5f, 0x76,
	0x69, 0x65, 0x77, 0x22, 0xa7, 0x01, 0x0a, 0x09, 0x53, 0x70, 0x65, 0x6e, 0x64, 0x50, 0x6c, 0x61,
	0x6e, 0x12, 0x37, 0x0a, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x6e, 0x6f, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d,
	0x69, 0x7a, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64,
	0x6f, 0x6d, 0x69, 0x7a, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x22, 0xd0, 0x01,
	0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x3a, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x49, 0x0a, 0x0c, 0x64, 0x65, 0x73, 0x74,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x73, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x72, 0x73, 0x65, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0d, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x42, 0xcc, 0x02, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x10, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x65, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2d, 0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x3b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x43, 0x54, 0xaa, 0x02, 0x22, 0x50,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x43, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0xca, 0x02, 0x22, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x5c, 0x43, 0x6f, 0x72,
	0x65, 0x5c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5c, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x2e, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x5c, 0x43, 0x6f, 0x72, 0x65, 0x5c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x25, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x3a, 0x3a, 0x43, 0x6f, 0x72, 0x65, 0x3a, 0x3a, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescOnce sync.Once
	file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescData = file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDesc
)

func file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescGZIP() []byte {
	file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescOnce.Do(func() {
		file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescData = protoimpl.X.CompressGZIP(file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescData)
	})
	return file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDescData
}

var file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes = make([]protoimpl.MessageInfo, 38)
var file_penumbra_core_transaction_v1alpha1_transaction_proto_goTypes = []interface{}{
	(*Transaction)(nil),                       // 0: penumbra.core.transaction.v1alpha1.Transaction
	(*Id)(nil),                                // 1: penumbra.core.transaction.v1alpha1.Id
	(*EffectHash)(nil),                        // 2: penumbra.core.transaction.v1alpha1.EffectHash
	(*TransactionBody)(nil),                   // 3: penumbra.core.transaction.v1alpha1.TransactionBody
	(*Action)(nil),                            // 4: penumbra.core.transaction.v1alpha1.Action
	(*TransactionPerspective)(nil),            // 5: penumbra.core.transaction.v1alpha1.TransactionPerspective
	(*PayloadKey)(nil),                        // 6: penumbra.core.transaction.v1alpha1.PayloadKey
	(*PayloadKeyWithCommitment)(nil),          // 7: penumbra.core.transaction.v1alpha1.PayloadKeyWithCommitment
	(*NullifierWithNote)(nil),                 // 8: penumbra.core.transaction.v1alpha1.NullifierWithNote
	(*TransactionView)(nil),                   // 9: penumbra.core.transaction.v1alpha1.TransactionView
	(*TransactionBodyView)(nil),               // 10: penumbra.core.transaction.v1alpha1.TransactionBodyView
	(*ActionView)(nil),                        // 11: penumbra.core.transaction.v1alpha1.ActionView
	(*SpendView)(nil),                         // 12: penumbra.core.transaction.v1alpha1.SpendView
	(*DelegatorVoteView)(nil),                 // 13: penumbra.core.transaction.v1alpha1.DelegatorVoteView
	(*OutputView)(nil),                        // 14: penumbra.core.transaction.v1alpha1.OutputView
	(*Spend)(nil),                             // 15: penumbra.core.transaction.v1alpha1.Spend
	(*SpendBody)(nil),                         // 16: penumbra.core.transaction.v1alpha1.SpendBody
	(*Output)(nil),                            // 17: penumbra.core.transaction.v1alpha1.Output
	(*OutputBody)(nil),                        // 18: penumbra.core.transaction.v1alpha1.OutputBody
	(*AuthorizationData)(nil),                 // 19: penumbra.core.transaction.v1alpha1.AuthorizationData
	(*WitnessData)(nil),                       // 20: penumbra.core.transaction.v1alpha1.WitnessData
	(*TransactionPlan)(nil),                   // 21: penumbra.core.transaction.v1alpha1.TransactionPlan
	(*ActionPlan)(nil),                        // 22: penumbra.core.transaction.v1alpha1.ActionPlan
	(*CluePlan)(nil),                          // 23: penumbra.core.transaction.v1alpha1.CluePlan
	(*MemoPlan)(nil),                          // 24: penumbra.core.transaction.v1alpha1.MemoPlan
	(*MemoCiphertext)(nil),                    // 25: penumbra.core.transaction.v1alpha1.MemoCiphertext
	(*MemoPlaintext)(nil),                     // 26: penumbra.core.transaction.v1alpha1.MemoPlaintext
	(*MemoView)(nil),                          // 27: penumbra.core.transaction.v1alpha1.MemoView
	(*SpendPlan)(nil),                         // 28: penumbra.core.transaction.v1alpha1.SpendPlan
	(*OutputPlan)(nil),                        // 29: penumbra.core.transaction.v1alpha1.OutputPlan
	(*SpendView_Visible)(nil),                 // 30: penumbra.core.transaction.v1alpha1.SpendView.Visible
	(*SpendView_Opaque)(nil),                  // 31: penumbra.core.transaction.v1alpha1.SpendView.Opaque
	(*DelegatorVoteView_Visible)(nil),         // 32: penumbra.core.transaction.v1alpha1.DelegatorVoteView.Visible
	(*DelegatorVoteView_Opaque)(nil),          // 33: penumbra.core.transaction.v1alpha1.DelegatorVoteView.Opaque
	(*OutputView_Visible)(nil),                // 34: penumbra.core.transaction.v1alpha1.OutputView.Visible
	(*OutputView_Opaque)(nil),                 // 35: penumbra.core.transaction.v1alpha1.OutputView.Opaque
	(*MemoView_Visible)(nil),                  // 36: penumbra.core.transaction.v1alpha1.MemoView.Visible
	(*MemoView_Opaque)(nil),                   // 37: penumbra.core.transaction.v1alpha1.MemoView.Opaque
	(*v1alpha1.MerkleRoot)(nil),               // 38: penumbra.core.crypto.v1alpha1.MerkleRoot
	(*v1alpha1.Fee)(nil),                      // 39: penumbra.core.crypto.v1alpha1.Fee
	(*v1alpha1.Clue)(nil),                     // 40: penumbra.core.crypto.v1alpha1.Clue
	(*v1alpha11.Swap)(nil),                    // 41: penumbra.core.dex.v1alpha1.Swap
	(*v1alpha11.SwapClaim)(nil),               // 42: penumbra.core.dex.v1alpha1.SwapClaim
	(*v1alpha12.ValidatorDefinition)(nil),     // 43: penumbra.core.stake.v1alpha1.ValidatorDefinition
	(*v1alpha13.IbcAction)(nil),               // 44: penumbra.core.ibc.v1alpha1.IbcAction
	(*v1alpha14.ProposalSubmit)(nil),          // 45: penumbra.core.governance.v1alpha1.ProposalSubmit
	(*v1alpha14.ProposalWithdraw)(nil),        // 46: penumbra.core.governance.v1alpha1.ProposalWithdraw
	(*v1alpha14.ValidatorVote)(nil),           // 47: penumbra.core.governance.v1alpha1.ValidatorVote
	(*v1alpha14.DelegatorVote)(nil),           // 48: penumbra.core.governance.v1alpha1.DelegatorVote
	(*v1alpha14.ProposalDepositClaim)(nil),    // 49: penumbra.core.governance.v1alpha1.ProposalDepositClaim
	(*v1alpha11.PositionOpen)(nil),            // 50: penumbra.core.dex.v1alpha1.PositionOpen
	(*v1alpha11.PositionClose)(nil),           // 51: penumbra.core.dex.v1alpha1.PositionClose
	(*v1alpha11.PositionWithdraw)(nil),        // 52: penumbra.core.dex.v1alpha1.PositionWithdraw
	(*v1alpha11.PositionRewardClaim)(nil),     // 53: penumbra.core.dex.v1alpha1.PositionRewardClaim
	(*v1alpha12.Delegate)(nil),                // 54: penumbra.core.stake.v1alpha1.Delegate
	(*v1alpha12.Undelegate)(nil),              // 55: penumbra.core.stake.v1alpha1.Undelegate
	(*v1alpha12.UndelegateClaim)(nil),         // 56: penumbra.core.stake.v1alpha1.UndelegateClaim
	(*v1alpha14.DaoSpend)(nil),                // 57: penumbra.core.governance.v1alpha1.DaoSpend
	(*v1alpha14.DaoOutput)(nil),               // 58: penumbra.core.governance.v1alpha1.DaoOutput
	(*v1alpha14.DaoDeposit)(nil),              // 59: penumbra.core.governance.v1alpha1.DaoDeposit
	(*v1alpha13.Ics20Withdrawal)(nil),         // 60: penumbra.core.ibc.v1alpha1.Ics20Withdrawal
	(*v1alpha1.Note)(nil),                     // 61: penumbra.core.crypto.v1alpha1.Note
	(*v1alpha1.AddressView)(nil),              // 62: penumbra.core.crypto.v1alpha1.AddressView
	(*v1alpha1.DenomMetadata)(nil),            // 63: penumbra.core.crypto.v1alpha1.DenomMetadata
	(*v1alpha1.StateCommitment)(nil),          // 64: penumbra.core.crypto.v1alpha1.StateCommitment
	(*v1alpha1.Nullifier)(nil),                // 65: penumbra.core.crypto.v1alpha1.Nullifier
	(*v1alpha11.SwapView)(nil),                // 66: penumbra.core.dex.v1alpha1.SwapView
	(*v1alpha11.SwapClaimView)(nil),           // 67: penumbra.core.dex.v1alpha1.SwapClaimView
	(*v1alpha1.SpendAuthSignature)(nil),       // 68: penumbra.core.crypto.v1alpha1.SpendAuthSignature
	(*v1alpha1.ZKSpendProof)(nil),             // 69: penumbra.core.crypto.v1alpha1.ZKSpendProof
	(*v1alpha1.BalanceCommitment)(nil),        // 70: penumbra.core.crypto.v1alpha1.BalanceCommitment
	(*v1alpha1.ZKOutputProof)(nil),            // 71: penumbra.core.crypto.v1alpha1.ZKOutputProof
	(*v1alpha1.NotePayload)(nil),              // 72: penumbra.core.crypto.v1alpha1.NotePayload
	(*v1alpha1.EffectHash)(nil),               // 73: penumbra.core.crypto.v1alpha1.EffectHash
	(*v1alpha1.StateCommitmentProof)(nil),     // 74: penumbra.core.crypto.v1alpha1.StateCommitmentProof
	(*v1alpha11.SwapPlan)(nil),                // 75: penumbra.core.dex.v1alpha1.SwapPlan
	(*v1alpha11.SwapClaimPlan)(nil),           // 76: penumbra.core.dex.v1alpha1.SwapClaimPlan
	(*v1alpha14.DelegatorVotePlan)(nil),       // 77: penumbra.core.governance.v1alpha1.DelegatorVotePlan
	(*v1alpha11.PositionWithdrawPlan)(nil),    // 78: penumbra.core.dex.v1alpha1.PositionWithdrawPlan
	(*v1alpha11.PositionRewardClaimPlan)(nil), // 79: penumbra.core.dex.v1alpha1.PositionRewardClaimPlan
	(*v1alpha12.UndelegateClaimPlan)(nil),     // 80: penumbra.core.stake.v1alpha1.UndelegateClaimPlan
	(*v1alpha1.Address)(nil),                  // 81: penumbra.core.crypto.v1alpha1.Address
	(*v1alpha1.Value)(nil),                    // 82: penumbra.core.crypto.v1alpha1.Value
	(*v1alpha1.NoteView)(nil),                 // 83: penumbra.core.crypto.v1alpha1.NoteView
}
var file_penumbra_core_transaction_v1alpha1_transaction_proto_depIdxs = []int32{
	3,   // 0: penumbra.core.transaction.v1alpha1.Transaction.body:type_name -> penumbra.core.transaction.v1alpha1.TransactionBody
	38,  // 1: penumbra.core.transaction.v1alpha1.Transaction.anchor:type_name -> penumbra.core.crypto.v1alpha1.MerkleRoot
	4,   // 2: penumbra.core.transaction.v1alpha1.TransactionBody.actions:type_name -> penumbra.core.transaction.v1alpha1.Action
	39,  // 3: penumbra.core.transaction.v1alpha1.TransactionBody.fee:type_name -> penumbra.core.crypto.v1alpha1.Fee
	40,  // 4: penumbra.core.transaction.v1alpha1.TransactionBody.fmd_clues:type_name -> penumbra.core.crypto.v1alpha1.Clue
	15,  // 5: penumbra.core.transaction.v1alpha1.Action.spend:type_name -> penumbra.core.transaction.v1alpha1.Spend
	17,  // 6: penumbra.core.transaction.v1alpha1.Action.output:type_name -> penumbra.core.transaction.v1alpha1.Output
	41,  // 7: penumbra.core.transaction.v1alpha1.Action.swap:type_name -> penumbra.core.dex.v1alpha1.Swap
	42,  // 8: penumbra.core.transaction.v1alpha1.Action.swap_claim:type_name -> penumbra.core.dex.v1alpha1.SwapClaim
	43,  // 9: penumbra.core.transaction.v1alpha1.Action.validator_definition:type_name -> penumbra.core.stake.v1alpha1.ValidatorDefinition
	44,  // 10: penumbra.core.transaction.v1alpha1.Action.ibc_action:type_name -> penumbra.core.ibc.v1alpha1.IbcAction
	45,  // 11: penumbra.core.transaction.v1alpha1.Action.proposal_submit:type_name -> penumbra.core.governance.v1alpha1.ProposalSubmit
	46,  // 12: penumbra.core.transaction.v1alpha1.Action.proposal_withdraw:type_name -> penumbra.core.governance.v1alpha1.ProposalWithdraw
	47,  // 13: penumbra.core.transaction.v1alpha1.Action.validator_vote:type_name -> penumbra.core.governance.v1alpha1.ValidatorVote
	48,  // 14: penumbra.core.transaction.v1alpha1.Action.delegator_vote:type_name -> penumbra.core.governance.v1alpha1.DelegatorVote
	49,  // 15: penumbra.core.transaction.v1alpha1.Action.proposal_deposit_claim:type_name -> penumbra.core.governance.v1alpha1.ProposalDepositClaim
	50,  // 16: penumbra.core.transaction.v1alpha1.Action.position_open:type_name -> penumbra.core.dex.v1alpha1.PositionOpen
	51,  // 17: penumbra.core.transaction.v1alpha1.Action.position_close:type_name -> penumbra.core.dex.v1alpha1.PositionClose
	52,  // 18: penumbra.core.transaction.v1alpha1.Action.position_withdraw:type_name -> penumbra.core.dex.v1alpha1.PositionWithdraw
	53,  // 19: penumbra.core.transaction.v1alpha1.Action.position_reward_claim:type_name -> penumbra.core.dex.v1alpha1.PositionRewardClaim
	54,  // 20: penumbra.core.transaction.v1alpha1.Action.delegate:type_name -> penumbra.core.stake.v1alpha1.Delegate
	55,  // 21: penumbra.core.transaction.v1alpha1.Action.undelegate:type_name -> penumbra.core.stake.v1alpha1.Undelegate
	56,  // 22: penumbra.core.transaction.v1alpha1.Action.undelegate_claim:type_name -> penumbra.core.stake.v1alpha1.UndelegateClaim
	57,  // 23: penumbra.core.transaction.v1alpha1.Action.dao_spend:type_name -> penumbra.core.governance.v1alpha1.DaoSpend
	58,  // 24: penumbra.core.transaction.v1alpha1.Action.dao_output:type_name -> penumbra.core.governance.v1alpha1.DaoOutput
	59,  // 25: penumbra.core.transaction.v1alpha1.Action.dao_deposit:type_name -> penumbra.core.governance.v1alpha1.DaoDeposit
	60,  // 26: penumbra.core.transaction.v1alpha1.Action.ics20_withdrawal:type_name -> penumbra.core.ibc.v1alpha1.Ics20Withdrawal
	7,   // 27: penumbra.core.transaction.v1alpha1.TransactionPerspective.payload_keys:type_name -> penumbra.core.transaction.v1alpha1.PayloadKeyWithCommitment
	8,   // 28: penumbra.core.transaction.v1alpha1.TransactionPerspective.spend_nullifiers:type_name -> penumbra.core.transaction.v1alpha1.NullifierWithNote
	61,  // 29: penumbra.core.transaction.v1alpha1.TransactionPerspective.advice_notes:type_name -> penumbra.core.crypto.v1alpha1.Note
	62,  // 30: penumbra.core.transaction.v1alpha1.TransactionPerspective.address_views:type_name -> penumbra.core.crypto.v1alpha1.AddressView
	63,  // 31: penumbra.core.transaction.v1alpha1.TransactionPerspective.denoms:type_name -> penumbra.core.crypto.v1alpha1.DenomMetadata
	1,   // 32: penumbra.core.transaction.v1alpha1.TransactionPerspective.transaction_id:type_name -> penumbra.core.transaction.v1alpha1.Id
	6,   // 33: penumbra.core.transaction.v1alpha1.PayloadKeyWithCommitment.payload_key:type_name -> penumbra.core.transaction.v1alpha1.PayloadKey
	64,  // 34: penumbra.core.transaction.v1alpha1.PayloadKeyWithCommitment.commitment:type_name -> penumbra.core.crypto.v1alpha1.StateCommitment
	65,  // 35: penumbra.core.transaction.v1alpha1.NullifierWithNote.nullifier:type_name -> penumbra.core.crypto.v1alpha1.Nullifier
	61,  // 36: penumbra.core.transaction.v1alpha1.NullifierWithNote.note:type_name -> penumbra.core.crypto.v1alpha1.Note
	10,  // 37: penumbra.core.transaction.v1alpha1.TransactionView.body_view:type_name -> penumbra.core.transaction.v1alpha1.TransactionBodyView
	38,  // 38: penumbra.core.transaction.v1alpha1.TransactionView.anchor:type_name -> penumbra.core.crypto.v1alpha1.MerkleRoot
	11,  // 39: penumbra.core.transaction.v1alpha1.TransactionBodyView.action_views:type_name -> penumbra.core.transaction.v1alpha1.ActionView
	39,  // 40: penumbra.core.transaction.v1alpha1.TransactionBodyView.fee:type_name -> penumbra.core.crypto.v1alpha1.Fee
	40,  // 41: penumbra.core.transaction.v1alpha1.TransactionBodyView.fmd_clues:type_name -> penumbra.core.crypto.v1alpha1.Clue
	27,  // 42: penumbra.core.transaction.v1alpha1.TransactionBodyView.memo_view:type_name -> penumbra.core.transaction.v1alpha1.MemoView
	12,  // 43: penumbra.core.transaction.v1alpha1.ActionView.spend:type_name -> penumbra.core.transaction.v1alpha1.SpendView
	14,  // 44: penumbra.core.transaction.v1alpha1.ActionView.output:type_name -> penumbra.core.transaction.v1alpha1.OutputView
	66,  // 45: penumbra.core.transaction.v1alpha1.ActionView.swap:type_name -> penumbra.core.dex.v1alpha1.SwapView
	67,  // 46: penumbra.core.transaction.v1alpha1.ActionView.swap_claim:type_name -> penumbra.core.dex.v1alpha1.SwapClaimView
	43,  // 47: penumbra.core.transaction.v1alpha1.ActionView.validator_definition:type_name -> penumbra.core.stake.v1alpha1.ValidatorDefinition
	44,  // 48: penumbra.core.transaction.v1alpha1.ActionView.ibc_action:type_name -> penumbra.core.ibc.v1alpha1.IbcAction
	45,  // 49: penumbra.core.transaction.v1alpha1.ActionView.proposal_submit:type_name -> penumbra.core.governance.v1alpha1.ProposalSubmit
	46,  // 50: penumbra.core.transaction.v1alpha1.ActionView.proposal_withdraw:type_name -> penumbra.core.governance.v1alpha1.ProposalWithdraw
	47,  // 51: penumbra.core.transaction.v1alpha1.ActionView.validator_vote:type_name -> penumbra.core.governance.v1alpha1.ValidatorVote
	13,  // 52: penumbra.core.transaction.v1alpha1.ActionView.delegator_vote:type_name -> penumbra.core.transaction.v1alpha1.DelegatorVoteView
	49,  // 53: penumbra.core.transaction.v1alpha1.ActionView.proposal_deposit_claim:type_name -> penumbra.core.governance.v1alpha1.ProposalDepositClaim
	50,  // 54: penumbra.core.transaction.v1alpha1.ActionView.position_open:type_name -> penumbra.core.dex.v1alpha1.PositionOpen
	51,  // 55: penumbra.core.transaction.v1alpha1.ActionView.position_close:type_name -> penumbra.core.dex.v1alpha1.PositionClose
	52,  // 56: penumbra.core.transaction.v1alpha1.ActionView.position_withdraw:type_name -> penumbra.core.dex.v1alpha1.PositionWithdraw
	53,  // 57: penumbra.core.transaction.v1alpha1.ActionView.position_reward_claim:type_name -> penumbra.core.dex.v1alpha1.PositionRewardClaim
	54,  // 58: penumbra.core.transaction.v1alpha1.ActionView.delegate:type_name -> penumbra.core.stake.v1alpha1.Delegate
	55,  // 59: penumbra.core.transaction.v1alpha1.ActionView.undelegate:type_name -> penumbra.core.stake.v1alpha1.Undelegate
	57,  // 60: penumbra.core.transaction.v1alpha1.ActionView.dao_spend:type_name -> penumbra.core.governance.v1alpha1.DaoSpend
	58,  // 61: penumbra.core.transaction.v1alpha1.ActionView.dao_output:type_name -> penumbra.core.governance.v1alpha1.DaoOutput
	59,  // 62: penumbra.core.transaction.v1alpha1.ActionView.dao_deposit:type_name -> penumbra.core.governance.v1alpha1.DaoDeposit
	56,  // 63: penumbra.core.transaction.v1alpha1.ActionView.undelegate_claim:type_name -> penumbra.core.stake.v1alpha1.UndelegateClaim
	60,  // 64: penumbra.core.transaction.v1alpha1.ActionView.ics20_withdrawal:type_name -> penumbra.core.ibc.v1alpha1.Ics20Withdrawal
	30,  // 65: penumbra.core.transaction.v1alpha1.SpendView.visible:type_name -> penumbra.core.transaction.v1alpha1.SpendView.Visible
	31,  // 66: penumbra.core.transaction.v1alpha1.SpendView.opaque:type_name -> penumbra.core.transaction.v1alpha1.SpendView.Opaque
	32,  // 67: penumbra.core.transaction.v1alpha1.DelegatorVoteView.visible:type_name -> penumbra.core.transaction.v1alpha1.DelegatorVoteView.Visible
	33,  // 68: penumbra.core.transaction.v1alpha1.DelegatorVoteView.opaque:type_name -> penumbra.core.transaction.v1alpha1.DelegatorVoteView.Opaque
	34,  // 69: penumbra.core.transaction.v1alpha1.OutputView.visible:type_name -> penumbra.core.transaction.v1alpha1.OutputView.Visible
	35,  // 70: penumbra.core.transaction.v1alpha1.OutputView.opaque:type_name -> penumbra.core.transaction.v1alpha1.OutputView.Opaque
	16,  // 71: penumbra.core.transaction.v1alpha1.Spend.body:type_name -> penumbra.core.transaction.v1alpha1.SpendBody
	68,  // 72: penumbra.core.transaction.v1alpha1.Spend.auth_sig:type_name -> penumbra.core.crypto.v1alpha1.SpendAuthSignature
	69,  // 73: penumbra.core.transaction.v1alpha1.Spend.proof:type_name -> penumbra.core.crypto.v1alpha1.ZKSpendProof
	70,  // 74: penumbra.core.transaction.v1alpha1.SpendBody.balance_commitment:type_name -> penumbra.core.crypto.v1alpha1.BalanceCommitment
	18,  // 75: penumbra.core.transaction.v1alpha1.Output.body:type_name -> penumbra.core.transaction.v1alpha1.OutputBody
	71,  // 76: penumbra.core.transaction.v1alpha1.Output.proof:type_name -> penumbra.core.crypto.v1alpha1.ZKOutputProof
	72,  // 77: penumbra.core.transaction.v1alpha1.OutputBody.note_payload:type_name -> penumbra.core.crypto.v1alpha1.NotePayload
	70,  // 78: penumbra.core.transaction.v1alpha1.OutputBody.balance_commitment:type_name -> penumbra.core.crypto.v1alpha1.BalanceCommitment
	73,  // 79: penumbra.core.transaction.v1alpha1.AuthorizationData.effect_hash:type_name -> penumbra.core.crypto.v1alpha1.EffectHash
	68,  // 80: penumbra.core.transaction.v1alpha1.AuthorizationData.spend_auths:type_name -> penumbra.core.crypto.v1alpha1.SpendAuthSignature
	68,  // 81: penumbra.core.transaction.v1alpha1.AuthorizationData.delegator_vote_auths:type_name -> penumbra.core.crypto.v1alpha1.SpendAuthSignature
	38,  // 82: penumbra.core.transaction.v1alpha1.WitnessData.anchor:type_name -> penumbra.core.crypto.v1alpha1.MerkleRoot
	74,  // 83: penumbra.core.transaction.v1alpha1.WitnessData.state_commitment_proofs:type_name -> penumbra.core.crypto.v1alpha1.StateCommitmentProof
	22,  // 84: penumbra.core.transaction.v1alpha1.TransactionPlan.actions:type_name -> penumbra.core.transaction.v1alpha1.ActionPlan
	39,  // 85: penumbra.core.transaction.v1alpha1.TransactionPlan.fee:type_name -> penumbra.core.crypto.v1alpha1.Fee
	23,  // 86: penumbra.core.transaction.v1alpha1.TransactionPlan.clue_plans:type_name -> penumbra.core.transaction.v1alpha1.CluePlan
	24,  // 87: penumbra.core.transaction.v1alpha1.TransactionPlan.memo_plan:type_name -> penumbra.core.transaction.v1alpha1.MemoPlan
	28,  // 88: penumbra.core.transaction.v1alpha1.ActionPlan.spend:type_name -> penumbra.core.transaction.v1alpha1.SpendPlan
	29,  // 89: penumbra.core.transaction.v1alpha1.ActionPlan.output:type_name -> penumbra.core.transaction.v1alpha1.OutputPlan
	75,  // 90: penumbra.core.transaction.v1alpha1.ActionPlan.swap:type_name -> penumbra.core.dex.v1alpha1.SwapPlan
	76,  // 91: penumbra.core.transaction.v1alpha1.ActionPlan.swap_claim:type_name -> penumbra.core.dex.v1alpha1.SwapClaimPlan
	43,  // 92: penumbra.core.transaction.v1alpha1.ActionPlan.validator_definition:type_name -> penumbra.core.stake.v1alpha1.ValidatorDefinition
	44,  // 93: penumbra.core.transaction.v1alpha1.ActionPlan.ibc_action:type_name -> penumbra.core.ibc.v1alpha1.IbcAction
	45,  // 94: penumbra.core.transaction.v1alpha1.ActionPlan.proposal_submit:type_name -> penumbra.core.governance.v1alpha1.ProposalSubmit
	46,  // 95: penumbra.core.transaction.v1alpha1.ActionPlan.proposal_withdraw:type_name -> penumbra.core.governance.v1alpha1.ProposalWithdraw
	47,  // 96: penumbra.core.transaction.v1alpha1.ActionPlan.validator_vote:type_name -> penumbra.core.governance.v1alpha1.ValidatorVote
	77,  // 97: penumbra.core.transaction.v1alpha1.ActionPlan.delegator_vote:type_name -> penumbra.core.governance.v1alpha1.DelegatorVotePlan
	49,  // 98: penumbra.core.transaction.v1alpha1.ActionPlan.proposal_deposit_claim:type_name -> penumbra.core.governance.v1alpha1.ProposalDepositClaim
	60,  // 99: penumbra.core.transaction.v1alpha1.ActionPlan.withdrawal:type_name -> penumbra.core.ibc.v1alpha1.Ics20Withdrawal
	50,  // 100: penumbra.core.transaction.v1alpha1.ActionPlan.position_open:type_name -> penumbra.core.dex.v1alpha1.PositionOpen
	51,  // 101: penumbra.core.transaction.v1alpha1.ActionPlan.position_close:type_name -> penumbra.core.dex.v1alpha1.PositionClose
	78,  // 102: penumbra.core.transaction.v1alpha1.ActionPlan.position_withdraw:type_name -> penumbra.core.dex.v1alpha1.PositionWithdrawPlan
	79,  // 103: penumbra.core.transaction.v1alpha1.ActionPlan.position_reward_claim:type_name -> penumbra.core.dex.v1alpha1.PositionRewardClaimPlan
	54,  // 104: penumbra.core.transaction.v1alpha1.ActionPlan.delegate:type_name -> penumbra.core.stake.v1alpha1.Delegate
	55,  // 105: penumbra.core.transaction.v1alpha1.ActionPlan.undelegate:type_name -> penumbra.core.stake.v1alpha1.Undelegate
	80,  // 106: penumbra.core.transaction.v1alpha1.ActionPlan.undelegate_claim:type_name -> penumbra.core.stake.v1alpha1.UndelegateClaimPlan
	57,  // 107: penumbra.core.transaction.v1alpha1.ActionPlan.dao_spend:type_name -> penumbra.core.governance.v1alpha1.DaoSpend
	58,  // 108: penumbra.core.transaction.v1alpha1.ActionPlan.dao_output:type_name -> penumbra.core.governance.v1alpha1.DaoOutput
	59,  // 109: penumbra.core.transaction.v1alpha1.ActionPlan.dao_deposit:type_name -> penumbra.core.governance.v1alpha1.DaoDeposit
	81,  // 110: penumbra.core.transaction.v1alpha1.CluePlan.address:type_name -> penumbra.core.crypto.v1alpha1.Address
	26,  // 111: penumbra.core.transaction.v1alpha1.MemoPlan.plaintext:type_name -> penumbra.core.transaction.v1alpha1.MemoPlaintext
	81,  // 112: penumbra.core.transaction.v1alpha1.MemoPlaintext.sender:type_name -> penumbra.core.crypto.v1alpha1.Address
	36,  // 113: penumbra.core.transaction.v1alpha1.MemoView.visible:type_name -> penumbra.core.transaction.v1alpha1.MemoView.Visible
	37,  // 114: penumbra.core.transaction.v1alpha1.MemoView.opaque:type_name -> penumbra.core.transaction.v1alpha1.MemoView.Opaque
	61,  // 115: penumbra.core.transaction.v1alpha1.SpendPlan.note:type_name -> penumbra.core.crypto.v1alpha1.Note
	82,  // 116: penumbra.core.transaction.v1alpha1.OutputPlan.value:type_name -> penumbra.core.crypto.v1alpha1.Value
	81,  // 117: penumbra.core.transaction.v1alpha1.OutputPlan.dest_address:type_name -> penumbra.core.crypto.v1alpha1.Address
	15,  // 118: penumbra.core.transaction.v1alpha1.SpendView.Visible.spend:type_name -> penumbra.core.transaction.v1alpha1.Spend
	83,  // 119: penumbra.core.transaction.v1alpha1.SpendView.Visible.note:type_name -> penumbra.core.crypto.v1alpha1.NoteView
	15,  // 120: penumbra.core.transaction.v1alpha1.SpendView.Opaque.spend:type_name -> penumbra.core.transaction.v1alpha1.Spend
	48,  // 121: penumbra.core.transaction.v1alpha1.DelegatorVoteView.Visible.delegator_vote:type_name -> penumbra.core.governance.v1alpha1.DelegatorVote
	83,  // 122: penumbra.core.transaction.v1alpha1.DelegatorVoteView.Visible.note:type_name -> penumbra.core.crypto.v1alpha1.NoteView
	48,  // 123: penumbra.core.transaction.v1alpha1.DelegatorVoteView.Opaque.delegator_vote:type_name -> penumbra.core.governance.v1alpha1.DelegatorVote
	17,  // 124: penumbra.core.transaction.v1alpha1.OutputView.Visible.output:type_name -> penumbra.core.transaction.v1alpha1.Output
	83,  // 125: penumbra.core.transaction.v1alpha1.OutputView.Visible.note:type_name -> penumbra.core.crypto.v1alpha1.NoteView
	6,   // 126: penumbra.core.transaction.v1alpha1.OutputView.Visible.payload_key:type_name -> penumbra.core.transaction.v1alpha1.PayloadKey
	17,  // 127: penumbra.core.transaction.v1alpha1.OutputView.Opaque.output:type_name -> penumbra.core.transaction.v1alpha1.Output
	25,  // 128: penumbra.core.transaction.v1alpha1.MemoView.Visible.ciphertext:type_name -> penumbra.core.transaction.v1alpha1.MemoCiphertext
	26,  // 129: penumbra.core.transaction.v1alpha1.MemoView.Visible.plaintext:type_name -> penumbra.core.transaction.v1alpha1.MemoPlaintext
	25,  // 130: penumbra.core.transaction.v1alpha1.MemoView.Opaque.ciphertext:type_name -> penumbra.core.transaction.v1alpha1.MemoCiphertext
	131, // [131:131] is the sub-list for method output_type
	131, // [131:131] is the sub-list for method input_type
	131, // [131:131] is the sub-list for extension type_name
	131, // [131:131] is the sub-list for extension extendee
	0,   // [0:131] is the sub-list for field type_name
}

func init() { file_penumbra_core_transaction_v1alpha1_transaction_proto_init() }
func file_penumbra_core_transaction_v1alpha1_transaction_proto_init() {
	if File_penumbra_core_transaction_v1alpha1_transaction_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Transaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Id); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EffectHash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionPerspective); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PayloadKeyWithCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullifierWithNote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionBodyView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatorVoteView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Spend); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WitnessData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CluePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoCiphertext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoPlaintext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoView); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputPlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendView_Visible); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpendView_Opaque); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatorVoteView_Visible); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatorVoteView_Opaque); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputView_Visible); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputView_Opaque); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoView_Visible); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemoView_Opaque); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Action_Spend)(nil),
		(*Action_Output)(nil),
		(*Action_Swap)(nil),
		(*Action_SwapClaim)(nil),
		(*Action_ValidatorDefinition)(nil),
		(*Action_IbcAction)(nil),
		(*Action_ProposalSubmit)(nil),
		(*Action_ProposalWithdraw)(nil),
		(*Action_ValidatorVote)(nil),
		(*Action_DelegatorVote)(nil),
		(*Action_ProposalDepositClaim)(nil),
		(*Action_PositionOpen)(nil),
		(*Action_PositionClose)(nil),
		(*Action_PositionWithdraw)(nil),
		(*Action_PositionRewardClaim)(nil),
		(*Action_Delegate)(nil),
		(*Action_Undelegate)(nil),
		(*Action_UndelegateClaim)(nil),
		(*Action_DaoSpend)(nil),
		(*Action_DaoOutput)(nil),
		(*Action_DaoDeposit)(nil),
		(*Action_Ics20Withdrawal)(nil),
	}
	file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*ActionView_Spend)(nil),
		(*ActionView_Output)(nil),
		(*ActionView_Swap)(nil),
		(*ActionView_SwapClaim)(nil),
		(*ActionView_ValidatorDefinition)(nil),
		(*ActionView_IbcAction)(nil),
		(*ActionView_ProposalSubmit)(nil),
		(*ActionView_ProposalWithdraw)(nil),
		(*ActionView_ValidatorVote)(nil),
		(*ActionView_DelegatorVote)(nil),
		(*ActionView_ProposalDepositClaim)(nil),
		(*ActionView_PositionOpen)(nil),
		(*ActionView_PositionClose)(nil),
		(*ActionView_PositionWithdraw)(nil),
		(*ActionView_PositionRewardClaim)(nil),
		(*ActionView_Delegate)(nil),
		(*ActionView_Undelegate)(nil),
		(*ActionView_DaoSpend)(nil),
		(*ActionView_DaoOutput)(nil),
		(*ActionView_DaoDeposit)(nil),
		(*ActionView_UndelegateClaim)(nil),
		(*ActionView_Ics20Withdrawal)(nil),
	}
	file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*SpendView_Visible_)(nil),
		(*SpendView_Opaque_)(nil),
	}
	file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*DelegatorVoteView_Visible_)(nil),
		(*DelegatorVoteView_Opaque_)(nil),
	}
	file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*OutputView_Visible_)(nil),
		(*OutputView_Opaque_)(nil),
	}
	file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*ActionPlan_Spend)(nil),
		(*ActionPlan_Output)(nil),
		(*ActionPlan_Swap)(nil),
		(*ActionPlan_SwapClaim)(nil),
		(*ActionPlan_ValidatorDefinition)(nil),
		(*ActionPlan_IbcAction)(nil),
		(*ActionPlan_ProposalSubmit)(nil),
		(*ActionPlan_ProposalWithdraw)(nil),
		(*ActionPlan_ValidatorVote)(nil),
		(*ActionPlan_DelegatorVote)(nil),
		(*ActionPlan_ProposalDepositClaim)(nil),
		(*ActionPlan_Withdrawal)(nil),
		(*ActionPlan_PositionOpen)(nil),
		(*ActionPlan_PositionClose)(nil),
		(*ActionPlan_PositionWithdraw)(nil),
		(*ActionPlan_PositionRewardClaim)(nil),
		(*ActionPlan_Delegate)(nil),
		(*ActionPlan_Undelegate)(nil),
		(*ActionPlan_UndelegateClaim)(nil),
		(*ActionPlan_DaoSpend)(nil),
		(*ActionPlan_DaoOutput)(nil),
		(*ActionPlan_DaoDeposit)(nil),
	}
	file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*MemoView_Visible_)(nil),
		(*MemoView_Opaque_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   38,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_penumbra_core_transaction_v1alpha1_transaction_proto_goTypes,
		DependencyIndexes: file_penumbra_core_transaction_v1alpha1_transaction_proto_depIdxs,
		MessageInfos:      file_penumbra_core_transaction_v1alpha1_transaction_proto_msgTypes,
	}.Build()
	File_penumbra_core_transaction_v1alpha1_transaction_proto = out.File
	file_penumbra_core_transaction_v1alpha1_transaction_proto_rawDesc = nil
	file_penumbra_core_transaction_v1alpha1_transaction_proto_goTypes = nil
	file_penumbra_core_transaction_v1alpha1_transaction_proto_depIdxs = nil
}
