// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: penumbra/narsil/ledger/v1alpha1/ledger.proto

package ledgerv1alpha1

import (
	v1alpha11 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/component/chain/v1alpha1"
	v1alpha1 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/keys/v1alpha1"
	v1alpha13 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/core/transaction/v1alpha1"
	v1alpha12 "github.com/penumbra-zone/penumbra/proto/go/gen/penumbra/custody/v1alpha1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Requests information about the chain state as known by the node.
type InfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The Tendermint software semantic version.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// The Tendermint block protocol version.
	BlockVersion uint64 `protobuf:"varint,2,opt,name=block_version,json=blockVersion,proto3" json:"block_version,omitempty"`
	// The Tendermint p2p protocol version.
	P2PVersion uint64 `protobuf:"varint,3,opt,name=p2p_version,json=p2pVersion,proto3" json:"p2p_version,omitempty"`
	// The ABCI semantic version number.
	AbciVersion string `protobuf:"bytes,4,opt,name=abci_version,json=abciVersion,proto3" json:"abci_version,omitempty"`
}

func (x *InfoRequest) Reset() {
	*x = InfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoRequest) ProtoMessage() {}

func (x *InfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoRequest.ProtoReflect.Descriptor instead.
func (*InfoRequest) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{0}
}

func (x *InfoRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InfoRequest) GetBlockVersion() uint64 {
	if x != nil {
		return x.BlockVersion
	}
	return 0
}

func (x *InfoRequest) GetP2PVersion() uint64 {
	if x != nil {
		return x.P2PVersion
	}
	return 0
}

func (x *InfoRequest) GetAbciVersion() string {
	if x != nil {
		return x.AbciVersion
	}
	return ""
}

// Contains information about the chain state as known by the node.
type InfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Some arbitrary information.
	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	// The application software semantic version.
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	// The application protocol version.
	AppVersion uint64 `protobuf:"varint,3,opt,name=app_version,json=appVersion,proto3" json:"app_version,omitempty"`
	// The latest block for which the app has called [`Commit`](super::super::Request::Commit).
	LastBlockHeight uint64 `protobuf:"varint,4,opt,name=last_block_height,json=lastBlockHeight,proto3" json:"last_block_height,omitempty"`
	// The latest result of [`Commit`](super::super::Request::Commit).
	LastBlockAppHash []byte `protobuf:"bytes,5,opt,name=last_block_app_hash,json=lastBlockAppHash,proto3" json:"last_block_app_hash,omitempty"`
}

func (x *InfoResponse) Reset() {
	*x = InfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoResponse) ProtoMessage() {}

func (x *InfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoResponse.ProtoReflect.Descriptor instead.
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{1}
}

func (x *InfoResponse) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *InfoResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *InfoResponse) GetAppVersion() uint64 {
	if x != nil {
		return x.AppVersion
	}
	return 0
}

func (x *InfoResponse) GetLastBlockHeight() uint64 {
	if x != nil {
		return x.LastBlockHeight
	}
	return 0
}

func (x *InfoResponse) GetLastBlockAppHash() []byte {
	if x != nil {
		return x.LastBlockAppHash
	}
	return nil
}

// The root identity key material for a shard operator.
type ShardIdentityKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An Ed25519 key.
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ShardIdentityKey) Reset() {
	*x = ShardIdentityKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardIdentityKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardIdentityKey) ProtoMessage() {}

func (x *ShardIdentityKey) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardIdentityKey.ProtoReflect.Descriptor instead.
func (*ShardIdentityKey) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{2}
}

func (x *ShardIdentityKey) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// The key that Tendermint will use to identify a validator.
type ConsensusKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An Ed25519 key.
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ConsensusKey) Reset() {
	*x = ConsensusKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsensusKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsensusKey) ProtoMessage() {}

func (x *ConsensusKey) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsensusKey.ProtoReflect.Descriptor instead.
func (*ConsensusKey) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{3}
}

func (x *ConsensusKey) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// A subkey a shard uses to sign messages sent to the ledger.
type ShardMessageKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An Ed25519 key.
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ShardMessageKey) Reset() {
	*x = ShardMessageKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardMessageKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardMessageKey) ProtoMessage() {}

func (x *ShardMessageKey) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardMessageKey.ProtoReflect.Descriptor instead.
func (*ShardMessageKey) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{4}
}

func (x *ShardMessageKey) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// The threshold key share controlled by a shard operator.
type ShardKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A decaf377 scalar.
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ShardKey) Reset() {
	*x = ShardKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardKey) ProtoMessage() {}

func (x *ShardKey) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardKey.ProtoReflect.Descriptor instead.
func (*ShardKey) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{5}
}

func (x *ShardKey) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// A signature over a message sent to the ledger by a shard.
type ShardMessageSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An Ed25519 signature.
	Inner []byte `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ShardMessageSignature) Reset() {
	*x = ShardMessageSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardMessageSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardMessageSignature) ProtoMessage() {}

func (x *ShardMessageSignature) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardMessageSignature.ProtoReflect.Descriptor instead.
func (*ShardMessageSignature) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{6}
}

func (x *ShardMessageSignature) GetInner() []byte {
	if x != nil {
		return x.Inner
	}
	return nil
}

// A description of one of the operators of a threshold key share (shard).
//
// The `ShardOperator` message doesn't have the threshold key share itself,
// because the workflow is that the set of operators is going to be configured
// first, as part of the genesis / chain configuration, and then the shards
// perform DKG as the chain boots, using the chain as the messaging layer for
// the DKG messages.  This means there's no interactive setup procedure for the
// shard operators.
type ShardDescription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The shard operator's offline identity key material which is the root of their authority.
	IdentityKey *ShardIdentityKey `protobuf:"bytes,1,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
	// A subkey used for signing messages sent to the ledger.
	MessageKey *ShardMessageKey `protobuf:"bytes,2,opt,name=message_key,json=messageKey,proto3" json:"message_key,omitempty"`
	// The validator's consensus pubkey for use in Tendermint (ed25519)
	ConsensusKey *ConsensusKey `protobuf:"bytes,3,opt,name=consensus_key,json=consensusKey,proto3" json:"consensus_key,omitempty"`
	// A label for the shard.
	Label string `protobuf:"bytes,4,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *ShardDescription) Reset() {
	*x = ShardDescription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardDescription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardDescription) ProtoMessage() {}

func (x *ShardDescription) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardDescription.ProtoReflect.Descriptor instead.
func (*ShardDescription) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{7}
}

func (x *ShardDescription) GetIdentityKey() *ShardIdentityKey {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

func (x *ShardDescription) GetMessageKey() *ShardMessageKey {
	if x != nil {
		return x.MessageKey
	}
	return nil
}

func (x *ShardDescription) GetConsensusKey() *ConsensusKey {
	if x != nil {
		return x.ConsensusKey
	}
	return nil
}

func (x *ShardDescription) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// A self-authenticating `ShardDescription`, signed with the `ShardIdentityKey`.
type ShardOperator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description *ShardDescription `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Sig         []byte            `protobuf:"bytes,2,opt,name=sig,proto3" json:"sig,omitempty"`
}

func (x *ShardOperator) Reset() {
	*x = ShardOperator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardOperator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardOperator) ProtoMessage() {}

func (x *ShardOperator) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardOperator.ProtoReflect.Descriptor instead.
func (*ShardOperator) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{8}
}

func (x *ShardOperator) GetDescription() *ShardDescription {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *ShardOperator) GetSig() []byte {
	if x != nil {
		return x.Sig
	}
	return nil
}

// The genesis data describing the set of shard operators who jointly control
// the Narsil instance.
//
// The genesis data does not specify the threshold key shares themselves,
// because these will be computed as the ledger boots up and the shard operators
// perform the DKG to generate the shared key, described by the `ShardInfo`.
type GenesisData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The set of shard operators (implicitly specifying the `n` in `t-of-n`).
	Operators []*ShardOperator `protobuf:"bytes,1,rep,name=operators,proto3" json:"operators,omitempty"`
	// The number of shards required to sign a message (the `t` in `t-of-n`).
	Threshold uint32 `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *GenesisData) Reset() {
	*x = GenesisData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GenesisData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenesisData) ProtoMessage() {}

func (x *GenesisData) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenesisData.ProtoReflect.Descriptor instead.
func (*GenesisData) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{9}
}

func (x *GenesisData) GetOperators() []*ShardOperator {
	if x != nil {
		return x.Operators
	}
	return nil
}

func (x *GenesisData) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

// Describes the Penumbra account group jointly controlled by the Narsil instance.
type AccountGroupInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The full viewing key for the shared account.
	//
	// In the Penumbra key hierarchy, this is the highest-authority key below
	// spend authority, and allows deriving all subkeys for all accounts in the
	// account group.  It is replicated across all shards.
	//
	// The spend verification key component is the `PK` in the FROST I-D.
	FullViewingKey *v1alpha1.FullViewingKey `protobuf:"bytes,1,opt,name=full_viewing_key,json=fullViewingKey,proto3" json:"full_viewing_key,omitempty"`
	// Describes the participants in the account group.
	Participants []*ShardInfo `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *AccountGroupInfo) Reset() {
	*x = AccountGroupInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountGroupInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountGroupInfo) ProtoMessage() {}

func (x *AccountGroupInfo) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountGroupInfo.ProtoReflect.Descriptor instead.
func (*AccountGroupInfo) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{10}
}

func (x *AccountGroupInfo) GetFullViewingKey() *v1alpha1.FullViewingKey {
	if x != nil {
		return x.FullViewingKey
	}
	return nil
}

func (x *AccountGroupInfo) GetParticipants() []*ShardInfo {
	if x != nil {
		return x.Participants
	}
	return nil
}

// Describes a single shard of the Narsil instance.
type ShardInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the shard, used for FROST accounting purposes.
	Index uint32 `protobuf:"varint,1,opt,name=index,proto3" json:"index,omitempty"`
	// The shard verification key, corresponding to `PK_i` in the FROST I-D.
	ShardVerificationKey *v1alpha1.SpendVerificationKey `protobuf:"bytes,2,opt,name=shard_verification_key,json=shardVerificationKey,proto3" json:"shard_verification_key,omitempty"`
	// The shard operator's identity key, used to identify the operator of this shard.
	IdentityKey *ShardIdentityKey `protobuf:"bytes,3,opt,name=identity_key,json=identityKey,proto3" json:"identity_key,omitempty"`
}

func (x *ShardInfo) Reset() {
	*x = ShardInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShardInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShardInfo) ProtoMessage() {}

func (x *ShardInfo) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShardInfo.ProtoReflect.Descriptor instead.
func (*ShardInfo) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{11}
}

func (x *ShardInfo) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *ShardInfo) GetShardVerificationKey() *v1alpha1.SpendVerificationKey {
	if x != nil {
		return x.ShardVerificationKey
	}
	return nil
}

func (x *ShardInfo) GetIdentityKey() *ShardIdentityKey {
	if x != nil {
		return x.IdentityKey
	}
	return nil
}

// Transaction authorization requests are identified by the proposed
// transaction's effect hash.
//
// This acts as a form of content addressing, providing a number of useful
// behaviors:
//
//   - Multiple users can request authorization of the same `TransactionPlan`, and
//     the ledger can stack their pre-authorizations until some threshold is met.
//   - Rather than having to hold open a connection, clients can re-request
//     authorization of the same `TransactionPlan` after it has been signed, and the
//     ledger can immediately return the already-existing authorization data.
type RequestIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EffectHash *v1alpha11.EffectHash `protobuf:"bytes,1,opt,name=effect_hash,json=effectHash,proto3" json:"effect_hash,omitempty"`
}

func (x *RequestIndex) Reset() {
	*x = RequestIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestIndex) ProtoMessage() {}

func (x *RequestIndex) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestIndex.ProtoReflect.Descriptor instead.
func (*RequestIndex) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{12}
}

func (x *RequestIndex) GetEffectHash() *v1alpha11.EffectHash {
	if x != nil {
		return x.EffectHash
	}
	return nil
}

// Identifies a particular signing ceremony.
//
// Ceremonies are identified first by request index and then by a sub-index for
// the ceremony.  This allows failed or timed-out ceremonies to be repeated.
type CeremonyIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestIndex  *RequestIndex `protobuf:"bytes,1,opt,name=request_index,json=requestIndex,proto3" json:"request_index,omitempty"`
	CeremonyIndex uint64        `protobuf:"varint,2,opt,name=ceremony_index,json=ceremonyIndex,proto3" json:"ceremony_index,omitempty"`
}

func (x *CeremonyIndex) Reset() {
	*x = CeremonyIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeremonyIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeremonyIndex) ProtoMessage() {}

func (x *CeremonyIndex) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeremonyIndex.ProtoReflect.Descriptor instead.
func (*CeremonyIndex) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{13}
}

func (x *CeremonyIndex) GetRequestIndex() *RequestIndex {
	if x != nil {
		return x.RequestIndex
	}
	return nil
}

func (x *CeremonyIndex) GetCeremonyIndex() uint64 {
	if x != nil {
		return x.CeremonyIndex
	}
	return 0
}

// A committee of shards assigned to carry out a particular signing ceremony.
type Committee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ceremony     *CeremonyIndex `protobuf:"bytes,1,opt,name=ceremony,proto3" json:"ceremony,omitempty"`
	Participants []*ShardInfo   `protobuf:"bytes,2,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *Committee) Reset() {
	*x = Committee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Committee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Committee) ProtoMessage() {}

func (x *Committee) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Committee.ProtoReflect.Descriptor instead.
func (*Committee) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{14}
}

func (x *Committee) GetCeremony() *CeremonyIndex {
	if x != nil {
		return x.Ceremony
	}
	return nil
}

func (x *Committee) GetParticipants() []*ShardInfo {
	if x != nil {
		return x.Participants
	}
	return nil
}

// Records a failed ceremony and the reason why it failed.
//
// TODO: consider filling these in with structured info about the failure
type CeremonyFailure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Failure:
	//
	//	*CeremonyFailure_Timeout_
	//	*CeremonyFailure_BadCommitment_
	//	*CeremonyFailure_BadShare_
	//	*CeremonyFailure_Canceled_
	Failure isCeremonyFailure_Failure `protobuf_oneof:"failure"`
}

func (x *CeremonyFailure) Reset() {
	*x = CeremonyFailure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeremonyFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeremonyFailure) ProtoMessage() {}

func (x *CeremonyFailure) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeremonyFailure.ProtoReflect.Descriptor instead.
func (*CeremonyFailure) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{15}
}

func (m *CeremonyFailure) GetFailure() isCeremonyFailure_Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (x *CeremonyFailure) GetTimeout() *CeremonyFailure_Timeout {
	if x, ok := x.GetFailure().(*CeremonyFailure_Timeout_); ok {
		return x.Timeout
	}
	return nil
}

func (x *CeremonyFailure) GetBadCommitment() *CeremonyFailure_BadCommitment {
	if x, ok := x.GetFailure().(*CeremonyFailure_BadCommitment_); ok {
		return x.BadCommitment
	}
	return nil
}

func (x *CeremonyFailure) GetBadShare() *CeremonyFailure_BadShare {
	if x, ok := x.GetFailure().(*CeremonyFailure_BadShare_); ok {
		return x.BadShare
	}
	return nil
}

func (x *CeremonyFailure) GetCanceled() *CeremonyFailure_Canceled {
	if x, ok := x.GetFailure().(*CeremonyFailure_Canceled_); ok {
		return x.Canceled
	}
	return nil
}

type isCeremonyFailure_Failure interface {
	isCeremonyFailure_Failure()
}

type CeremonyFailure_Timeout_ struct {
	Timeout *CeremonyFailure_Timeout `protobuf:"bytes,1,opt,name=timeout,proto3,oneof"`
}

type CeremonyFailure_BadCommitment_ struct {
	BadCommitment *CeremonyFailure_BadCommitment `protobuf:"bytes,2,opt,name=bad_commitment,json=badCommitment,proto3,oneof"`
}

type CeremonyFailure_BadShare_ struct {
	BadShare *CeremonyFailure_BadShare `protobuf:"bytes,3,opt,name=bad_share,json=badShare,proto3,oneof"`
}

type CeremonyFailure_Canceled_ struct {
	Canceled *CeremonyFailure_Canceled `protobuf:"bytes,4,opt,name=canceled,proto3,oneof"`
}

func (*CeremonyFailure_Timeout_) isCeremonyFailure_Failure() {}

func (*CeremonyFailure_BadCommitment_) isCeremonyFailure_Failure() {}

func (*CeremonyFailure_BadShare_) isCeremonyFailure_Failure() {}

func (*CeremonyFailure_Canceled_) isCeremonyFailure_Failure() {}

// The data recorded on-chain about the current state of a signing ceremony.
//
// The state machine of a signing ceremony is depicted in the following diagram:
// ```
// ┌───────┐   ┌─────────────┐   ┌─────────────┐   ┌────────┐
// │Pending│──▶│StartedRound1│──▶│StartedRound2│──▶│Finished│
// └───────┘   └─────────────┘   └─────────────┘   ├────────┤
//
//	│              │                 │          │AuthData│
//	│              │                 │          └────────┘
//	│              │                 │
//	│              │                 │          ┌────────┐
//	└──────────────┴─────────────────┴─────────▶│ Failed │
//	                                            └────────┘
//
// ```
//
// The ceremony steps are described in the FROST I-D:
// https://www.ietf.org/archive/id/draft-irtf-cfrg-frost-11.html
type CeremonyState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to State:
	//
	//	*CeremonyState_Pending_
	//	*CeremonyState_StartedRound_1
	//	*CeremonyState_StartedRound_2
	//	*CeremonyState_Finished_
	//	*CeremonyState_Failed_
	State isCeremonyState_State `protobuf_oneof:"state"`
}

func (x *CeremonyState) Reset() {
	*x = CeremonyState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeremonyState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeremonyState) ProtoMessage() {}

func (x *CeremonyState) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeremonyState.ProtoReflect.Descriptor instead.
func (*CeremonyState) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{16}
}

func (m *CeremonyState) GetState() isCeremonyState_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (x *CeremonyState) GetPending() *CeremonyState_Pending {
	if x, ok := x.GetState().(*CeremonyState_Pending_); ok {
		return x.Pending
	}
	return nil
}

func (x *CeremonyState) GetStartedRound_1() *CeremonyState_StartedRound1 {
	if x, ok := x.GetState().(*CeremonyState_StartedRound_1); ok {
		return x.StartedRound_1
	}
	return nil
}

func (x *CeremonyState) GetStartedRound_2() *CeremonyState_StartedRound2 {
	if x, ok := x.GetState().(*CeremonyState_StartedRound_2); ok {
		return x.StartedRound_2
	}
	return nil
}

func (x *CeremonyState) GetFinished() *CeremonyState_Finished {
	if x, ok := x.GetState().(*CeremonyState_Finished_); ok {
		return x.Finished
	}
	return nil
}

func (x *CeremonyState) GetFailed() *CeremonyState_Failed {
	if x, ok := x.GetState().(*CeremonyState_Failed_); ok {
		return x.Failed
	}
	return nil
}

type isCeremonyState_State interface {
	isCeremonyState_State()
}

type CeremonyState_Pending_ struct {
	Pending *CeremonyState_Pending `protobuf:"bytes,1,opt,name=pending,proto3,oneof"`
}

type CeremonyState_StartedRound_1 struct {
	StartedRound_1 *CeremonyState_StartedRound1 `protobuf:"bytes,2,opt,name=started_round_1,json=startedRound1,proto3,oneof"`
}

type CeremonyState_StartedRound_2 struct {
	StartedRound_2 *CeremonyState_StartedRound2 `protobuf:"bytes,3,opt,name=started_round_2,json=startedRound2,proto3,oneof"`
}

type CeremonyState_Finished_ struct {
	Finished *CeremonyState_Finished `protobuf:"bytes,4,opt,name=finished,proto3,oneof"`
}

type CeremonyState_Failed_ struct {
	Failed *CeremonyState_Failed `protobuf:"bytes,5,opt,name=failed,proto3,oneof"`
}

func (*CeremonyState_Pending_) isCeremonyState_State() {}

func (*CeremonyState_StartedRound_1) isCeremonyState_State() {}

func (*CeremonyState_StartedRound_2) isCeremonyState_State() {}

func (*CeremonyState_Finished_) isCeremonyState_State() {}

func (*CeremonyState_Failed_) isCeremonyState_State() {}

// A packet of data sent to the Narsil ledger.
//
// This structure is what Narsil uses as a Tendermint transaction.  However, we
// use the word "packet" rather than "transaction" here so that it's always
// unambiguous whether we're referring to data posted to the Penumbra chain or
// to a Narsil instance.
type NarsilPacket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Packet:
	//
	//	*NarsilPacket_AuthorizeRequest
	//	*NarsilPacket_AuthorizeCommitment
	//	*NarsilPacket_AuthorizeShare
	//	*NarsilPacket_DkgRound_1
	//	*NarsilPacket_DkgRound_2
	Packet isNarsilPacket_Packet `protobuf_oneof:"packet"`
}

func (x *NarsilPacket) Reset() {
	*x = NarsilPacket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NarsilPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NarsilPacket) ProtoMessage() {}

func (x *NarsilPacket) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NarsilPacket.ProtoReflect.Descriptor instead.
func (*NarsilPacket) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{17}
}

func (m *NarsilPacket) GetPacket() isNarsilPacket_Packet {
	if m != nil {
		return m.Packet
	}
	return nil
}

func (x *NarsilPacket) GetAuthorizeRequest() *v1alpha12.AuthorizeRequest {
	if x, ok := x.GetPacket().(*NarsilPacket_AuthorizeRequest); ok {
		return x.AuthorizeRequest
	}
	return nil
}

func (x *NarsilPacket) GetAuthorizeCommitment() *AuthorizeCommitment {
	if x, ok := x.GetPacket().(*NarsilPacket_AuthorizeCommitment); ok {
		return x.AuthorizeCommitment
	}
	return nil
}

func (x *NarsilPacket) GetAuthorizeShare() *AuthorizeShare {
	if x, ok := x.GetPacket().(*NarsilPacket_AuthorizeShare); ok {
		return x.AuthorizeShare
	}
	return nil
}

func (x *NarsilPacket) GetDkgRound_1() *DkgRound1 {
	if x, ok := x.GetPacket().(*NarsilPacket_DkgRound_1); ok {
		return x.DkgRound_1
	}
	return nil
}

func (x *NarsilPacket) GetDkgRound_2() *DkgRound2 {
	if x, ok := x.GetPacket().(*NarsilPacket_DkgRound_2); ok {
		return x.DkgRound_2
	}
	return nil
}

type isNarsilPacket_Packet interface {
	isNarsilPacket_Packet()
}

type NarsilPacket_AuthorizeRequest struct {
	// An authorization request submitted to the Narsil cluster
	//
	// Packet handling:
	// - check admission policy (black box / ignore for now)
	// - index the request
	// - start 1 or more committees to sign it
	AuthorizeRequest *v1alpha12.AuthorizeRequest `protobuf:"bytes,1,opt,name=authorize_request,json=authorizeRequest,proto3,oneof"`
}

type NarsilPacket_AuthorizeCommitment struct {
	// A shard's round 1 contribution to a signing ceremony
	AuthorizeCommitment *AuthorizeCommitment `protobuf:"bytes,2,opt,name=authorize_commitment,json=authorizeCommitment,proto3,oneof"`
}

type NarsilPacket_AuthorizeShare struct {
	// A shard's round 2 contribution to a signing ceremony
	AuthorizeShare *AuthorizeShare `protobuf:"bytes,3,opt,name=authorize_share,json=authorizeShare,proto3,oneof"`
}

type NarsilPacket_DkgRound_1 struct {
	// A shard operator's round 1 contribution to the DKG.
	DkgRound_1 *DkgRound1 `protobuf:"bytes,1000,opt,name=dkg_round_1,json=dkgRound1,proto3,oneof"`
}

type NarsilPacket_DkgRound_2 struct {
	// A shard operator's round 2 contribution to the DKG.
	DkgRound_2 *DkgRound2 `protobuf:"bytes,1001,opt,name=dkg_round_2,json=dkgRound2,proto3,oneof"`
}

func (*NarsilPacket_AuthorizeRequest) isNarsilPacket_Packet() {}

func (*NarsilPacket_AuthorizeCommitment) isNarsilPacket_Packet() {}

func (*NarsilPacket_AuthorizeShare) isNarsilPacket_Packet() {}

func (*NarsilPacket_DkgRound_1) isNarsilPacket_Packet() {}

func (*NarsilPacket_DkgRound_2) isNarsilPacket_Packet() {}

// A wrapper around the FROST commitment message, exchanged in round 1 of the
// signing protocol for a single signature.
type FrostCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *FrostCommitment) Reset() {
	*x = FrostCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrostCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostCommitment) ProtoMessage() {}

func (x *FrostCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostCommitment.ProtoReflect.Descriptor instead.
func (*FrostCommitment) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{18}
}

func (x *FrostCommitment) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// A wrapper around the FROST signature share, exchanged in round 2 of the
// signing protocol for a single signature.
type FrostSignatureShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload []byte `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *FrostSignatureShare) Reset() {
	*x = FrostSignatureShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FrostSignatureShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FrostSignatureShare) ProtoMessage() {}

func (x *FrostSignatureShare) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FrostSignatureShare.ProtoReflect.Descriptor instead.
func (*FrostSignatureShare) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{19}
}

func (x *FrostSignatureShare) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// A Narsil shard's commitment message for a single ceremony, which may perform
// multiple signatures (one for each spend in the `AuthorizeRequest`'s
// `TransactionPlan`).
//
// This bundle of messages is signed with the shard's `ShardMessageKey` to
// prevent tampering (e.g., reordering of the internal FROST messages, etc).
type AuthorizeCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body      *AuthorizeCommitment_Body `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Signer    *ShardMessageKey          `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	Signature *ShardMessageSignature    `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *AuthorizeCommitment) Reset() {
	*x = AuthorizeCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeCommitment) ProtoMessage() {}

func (x *AuthorizeCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeCommitment.ProtoReflect.Descriptor instead.
func (*AuthorizeCommitment) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{20}
}

func (x *AuthorizeCommitment) GetBody() *AuthorizeCommitment_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *AuthorizeCommitment) GetSigner() *ShardMessageKey {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *AuthorizeCommitment) GetSignature() *ShardMessageSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// A Narsil shard's signature share message for a single ceremony, which may perform
// multiple signatures (one for each spend in the `AuthorizeRequest`'s
// `TransactionPlan`).
//
// This bundle of messages is signed with the shard's `ShardMessageKey` to
// prevent tampering (e.g., reordering of the internal FROST messages, etc).
type AuthorizeShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body      *AuthorizeShare_Body   `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Signer    *ShardMessageKey       `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	Signature *ShardMessageSignature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *AuthorizeShare) Reset() {
	*x = AuthorizeShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeShare) ProtoMessage() {}

func (x *AuthorizeShare) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeShare.ProtoReflect.Descriptor instead.
func (*AuthorizeShare) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{21}
}

func (x *AuthorizeShare) GetBody() *AuthorizeShare_Body {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *AuthorizeShare) GetSigner() *ShardMessageKey {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *AuthorizeShare) GetSignature() *ShardMessageSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// A shard operator's round 1 contribution to the DKG ceremony.
type DkgRound1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   []byte                 `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signer    *ShardMessageKey       `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	Signature *ShardMessageSignature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *DkgRound1) Reset() {
	*x = DkgRound1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DkgRound1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgRound1) ProtoMessage() {}

func (x *DkgRound1) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgRound1.ProtoReflect.Descriptor instead.
func (*DkgRound1) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{22}
}

func (x *DkgRound1) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DkgRound1) GetSigner() *ShardMessageKey {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *DkgRound1) GetSignature() *ShardMessageSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// A shard operator's round 2 contribution to the DKG ceremony.
type DkgRound2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Payload   []byte                 `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	Signer    *ShardMessageKey       `protobuf:"bytes,2,opt,name=signer,proto3" json:"signer,omitempty"`
	Signature *ShardMessageSignature `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *DkgRound2) Reset() {
	*x = DkgRound2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DkgRound2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgRound2) ProtoMessage() {}

func (x *DkgRound2) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgRound2.ProtoReflect.Descriptor instead.
func (*DkgRound2) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{23}
}

func (x *DkgRound2) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DkgRound2) GetSigner() *ShardMessageKey {
	if x != nil {
		return x.Signer
	}
	return nil
}

func (x *DkgRound2) GetSignature() *ShardMessageSignature {
	if x != nil {
		return x.Signature
	}
	return nil
}

// The data recorded on-chain about the current state of the DKG ceremony.
type DkgState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DkgState) Reset() {
	*x = DkgState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DkgState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgState) ProtoMessage() {}

func (x *DkgState) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgState.ProtoReflect.Descriptor instead.
func (*DkgState) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{24}
}

type CeremonyFailure_Timeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CeremonyFailure_Timeout) Reset() {
	*x = CeremonyFailure_Timeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeremonyFailure_Timeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeremonyFailure_Timeout) ProtoMessage() {}

func (x *CeremonyFailure_Timeout) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeremonyFailure_Timeout.ProtoReflect.Descriptor instead.
func (*CeremonyFailure_Timeout) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{15, 0}
}

type CeremonyFailure_BadCommitment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CeremonyFailure_BadCommitment) Reset() {
	*x = CeremonyFailure_BadCommitment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeremonyFailure_BadCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeremonyFailure_BadCommitment) ProtoMessage() {}

func (x *CeremonyFailure_BadCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeremonyFailure_BadCommitment.ProtoReflect.Descriptor instead.
func (*CeremonyFailure_BadCommitment) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{15, 1}
}

type CeremonyFailure_BadShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CeremonyFailure_BadShare) Reset() {
	*x = CeremonyFailure_BadShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeremonyFailure_BadShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeremonyFailure_BadShare) ProtoMessage() {}

func (x *CeremonyFailure_BadShare) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeremonyFailure_BadShare.ProtoReflect.Descriptor instead.
func (*CeremonyFailure_BadShare) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{15, 2}
}

type CeremonyFailure_Canceled struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CeremonyFailure_Canceled) Reset() {
	*x = CeremonyFailure_Canceled{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeremonyFailure_Canceled) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeremonyFailure_Canceled) ProtoMessage() {}

func (x *CeremonyFailure_Canceled) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeremonyFailure_Canceled.ProtoReflect.Descriptor instead.
func (*CeremonyFailure_Canceled) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{15, 3}
}

// A ceremony that has not yet started.
//
// For instance, a request could be queued until sufficient pre-authorizations were recorded on the ledger.
type CeremonyState_Pending struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CeremonyState_Pending) Reset() {
	*x = CeremonyState_Pending{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeremonyState_Pending) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeremonyState_Pending) ProtoMessage() {}

func (x *CeremonyState_Pending) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeremonyState_Pending.ProtoReflect.Descriptor instead.
func (*CeremonyState_Pending) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{16, 0}
}

// A ceremony that has started round 1.
//
// The committee has been chosen and the ledger is waiting to record round 1 contributions from all committee members.
type CeremonyState_StartedRound1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The committee performing the ceremony.
	Committee *Committee `protobuf:"bytes,1,opt,name=committee,proto3" json:"committee,omitempty"`
	// A list of commitment messages received so far (begins empty).
	Commitments []*AuthorizeCommitment `protobuf:"bytes,2,rep,name=commitments,proto3" json:"commitments,omitempty"`
}

func (x *CeremonyState_StartedRound1) Reset() {
	*x = CeremonyState_StartedRound1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeremonyState_StartedRound1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeremonyState_StartedRound1) ProtoMessage() {}

func (x *CeremonyState_StartedRound1) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeremonyState_StartedRound1.ProtoReflect.Descriptor instead.
func (*CeremonyState_StartedRound1) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{16, 1}
}

func (x *CeremonyState_StartedRound1) GetCommittee() *Committee {
	if x != nil {
		return x.Committee
	}
	return nil
}

func (x *CeremonyState_StartedRound1) GetCommitments() []*AuthorizeCommitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

// A ceremony that has started round 2.
//
// The committee has been chosen, all round 1 commitments have been recorded, and the ledger is waiting to record round 1 contributions from all committee members.
type CeremonyState_StartedRound2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The committee performing the ceremony.
	Committee *Committee `protobuf:"bytes,1,opt,name=committee,proto3" json:"committee,omitempty"`
	// A list of commitment messages received in round 1.
	Commitments []*AuthorizeCommitment `protobuf:"bytes,2,rep,name=commitments,proto3" json:"commitments,omitempty"`
	// A list of authorization share messages received so far (begins empty).
	Shares []*AuthorizeShare `protobuf:"bytes,3,rep,name=shares,proto3" json:"shares,omitempty"`
}

func (x *CeremonyState_StartedRound2) Reset() {
	*x = CeremonyState_StartedRound2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeremonyState_StartedRound2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeremonyState_StartedRound2) ProtoMessage() {}

func (x *CeremonyState_StartedRound2) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeremonyState_StartedRound2.ProtoReflect.Descriptor instead.
func (*CeremonyState_StartedRound2) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{16, 2}
}

func (x *CeremonyState_StartedRound2) GetCommittee() *Committee {
	if x != nil {
		return x.Committee
	}
	return nil
}

func (x *CeremonyState_StartedRound2) GetCommitments() []*AuthorizeCommitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *CeremonyState_StartedRound2) GetShares() []*AuthorizeShare {
	if x != nil {
		return x.Shares
	}
	return nil
}

// A ceremony that has successfully finished.
//
// The transcript of the ceremony is recorded along with the resulting `AuthorizationData`.
type CeremonyState_Finished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The committee performing the ceremony.
	Committee *Committee `protobuf:"bytes,1,opt,name=committee,proto3" json:"committee,omitempty"`
	// A list of commitment messages received in round 1.
	Commitments []*AuthorizeCommitment `protobuf:"bytes,2,rep,name=commitments,proto3" json:"commitments,omitempty"`
	// A list of authorization share messages received in round 2.
	Shares []*AuthorizeShare `protobuf:"bytes,3,rep,name=shares,proto3" json:"shares,omitempty"`
	// The authorization data resulting from the ceremony.
	AuthData *v1alpha13.AuthorizationData `protobuf:"bytes,4,opt,name=auth_data,json=authData,proto3" json:"auth_data,omitempty"`
}

func (x *CeremonyState_Finished) Reset() {
	*x = CeremonyState_Finished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeremonyState_Finished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeremonyState_Finished) ProtoMessage() {}

func (x *CeremonyState_Finished) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeremonyState_Finished.ProtoReflect.Descriptor instead.
func (*CeremonyState_Finished) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{16, 3}
}

func (x *CeremonyState_Finished) GetCommittee() *Committee {
	if x != nil {
		return x.Committee
	}
	return nil
}

func (x *CeremonyState_Finished) GetCommitments() []*AuthorizeCommitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *CeremonyState_Finished) GetShares() []*AuthorizeShare {
	if x != nil {
		return x.Shares
	}
	return nil
}

func (x *CeremonyState_Finished) GetAuthData() *v1alpha13.AuthorizationData {
	if x != nil {
		return x.AuthData
	}
	return nil
}

// A ceremony that failed.
//
// The transcript of the ceremony is recorded along with the reason for the failure.
type CeremonyState_Failed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The committee performing the ceremony.
	Committee *Committee `protobuf:"bytes,1,opt,name=committee,proto3" json:"committee,omitempty"`
	// A list of commitment messages received in round 1, if any.
	Commitments []*AuthorizeCommitment `protobuf:"bytes,2,rep,name=commitments,proto3" json:"commitments,omitempty"`
	// A list of authorization share messages received in round 2, if any.
	Shares []*AuthorizeShare `protobuf:"bytes,3,rep,name=shares,proto3" json:"shares,omitempty"`
	// A description of the failure.
	Failure *CeremonyFailure `protobuf:"bytes,4,opt,name=failure,proto3" json:"failure,omitempty"`
}

func (x *CeremonyState_Failed) Reset() {
	*x = CeremonyState_Failed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CeremonyState_Failed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CeremonyState_Failed) ProtoMessage() {}

func (x *CeremonyState_Failed) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CeremonyState_Failed.ProtoReflect.Descriptor instead.
func (*CeremonyState_Failed) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{16, 4}
}

func (x *CeremonyState_Failed) GetCommittee() *Committee {
	if x != nil {
		return x.Committee
	}
	return nil
}

func (x *CeremonyState_Failed) GetCommitments() []*AuthorizeCommitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

func (x *CeremonyState_Failed) GetShares() []*AuthorizeShare {
	if x != nil {
		return x.Shares
	}
	return nil
}

func (x *CeremonyState_Failed) GetFailure() *CeremonyFailure {
	if x != nil {
		return x.Failure
	}
	return nil
}

type AuthorizeCommitment_Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CeremonyIndex *CeremonyIndex     `protobuf:"bytes,1,opt,name=ceremony_index,json=ceremonyIndex,proto3" json:"ceremony_index,omitempty"`
	Commitments   []*FrostCommitment `protobuf:"bytes,2,rep,name=commitments,proto3" json:"commitments,omitempty"`
}

func (x *AuthorizeCommitment_Body) Reset() {
	*x = AuthorizeCommitment_Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeCommitment_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeCommitment_Body) ProtoMessage() {}

func (x *AuthorizeCommitment_Body) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeCommitment_Body.ProtoReflect.Descriptor instead.
func (*AuthorizeCommitment_Body) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{20, 0}
}

func (x *AuthorizeCommitment_Body) GetCeremonyIndex() *CeremonyIndex {
	if x != nil {
		return x.CeremonyIndex
	}
	return nil
}

func (x *AuthorizeCommitment_Body) GetCommitments() []*FrostCommitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

type AuthorizeShare_Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CeremonyIndex *CeremonyIndex     `protobuf:"bytes,1,opt,name=ceremony_index,json=ceremonyIndex,proto3" json:"ceremony_index,omitempty"`
	Commitments   []*FrostCommitment `protobuf:"bytes,2,rep,name=commitments,proto3" json:"commitments,omitempty"`
}

func (x *AuthorizeShare_Body) Reset() {
	*x = AuthorizeShare_Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuthorizeShare_Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuthorizeShare_Body) ProtoMessage() {}

func (x *AuthorizeShare_Body) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuthorizeShare_Body.ProtoReflect.Descriptor instead.
func (*AuthorizeShare_Body) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{21, 0}
}

func (x *AuthorizeShare_Body) GetCeremonyIndex() *CeremonyIndex {
	if x != nil {
		return x.CeremonyIndex
	}
	return nil
}

func (x *AuthorizeShare_Body) GetCommitments() []*FrostCommitment {
	if x != nil {
		return x.Commitments
	}
	return nil
}

// The DKG has started round 1, and the ledger is waiting to record contributions from shard operators.
type DkgState_StartedRound1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of round 1 messages received so far (begins empty).
	Round_1Messages []*DkgRound1 `protobuf:"bytes,1,rep,name=round_1_messages,json=round1Messages,proto3" json:"round_1_messages,omitempty"`
}

func (x *DkgState_StartedRound1) Reset() {
	*x = DkgState_StartedRound1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DkgState_StartedRound1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgState_StartedRound1) ProtoMessage() {}

func (x *DkgState_StartedRound1) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgState_StartedRound1.ProtoReflect.Descriptor instead.
func (*DkgState_StartedRound1) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{24, 0}
}

func (x *DkgState_StartedRound1) GetRound_1Messages() []*DkgRound1 {
	if x != nil {
		return x.Round_1Messages
	}
	return nil
}

// The DKG has started round 2, and the ledger is waiting to record contributions from shard operators.
type DkgState_StartedRound2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of messages received during round 1.
	Round_1Messages []*DkgRound1 `protobuf:"bytes,1,rep,name=round_1_messages,json=round1Messages,proto3" json:"round_1_messages,omitempty"`
	// A list of round 2 messages received so far (begins empty).
	Round_2Messages []*DkgRound2 `protobuf:"bytes,2,rep,name=round_2_messages,json=round2Messages,proto3" json:"round_2_messages,omitempty"`
}

func (x *DkgState_StartedRound2) Reset() {
	*x = DkgState_StartedRound2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DkgState_StartedRound2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgState_StartedRound2) ProtoMessage() {}

func (x *DkgState_StartedRound2) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgState_StartedRound2.ProtoReflect.Descriptor instead.
func (*DkgState_StartedRound2) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{24, 1}
}

func (x *DkgState_StartedRound2) GetRound_1Messages() []*DkgRound1 {
	if x != nil {
		return x.Round_1Messages
	}
	return nil
}

func (x *DkgState_StartedRound2) GetRound_2Messages() []*DkgRound2 {
	if x != nil {
		return x.Round_2Messages
	}
	return nil
}

// The DKG has finished successfully, producing the jointly-controlled `AccountGroupInfo`.
//
// Unlike the signing ceremony, we don't record a failure case here: if the DKG fails, we abort the entire ledger.
type DkgState_Finished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of messages received during round 1.
	Round_1Messages []*DkgRound1 `protobuf:"bytes,1,rep,name=round_1_messages,json=round1Messages,proto3" json:"round_1_messages,omitempty"`
	// A list of messages received during round 2.
	Round_2Messages []*DkgRound2 `protobuf:"bytes,2,rep,name=round_2_messages,json=round2Messages,proto3" json:"round_2_messages,omitempty"`
	// The jointly-controlled `AccountGroupInfo` resulting from the DKG.
	AccountGroupInfo *AccountGroupInfo `protobuf:"bytes,3,opt,name=account_group_info,json=accountGroupInfo,proto3" json:"account_group_info,omitempty"`
}

func (x *DkgState_Finished) Reset() {
	*x = DkgState_Finished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DkgState_Finished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DkgState_Finished) ProtoMessage() {}

func (x *DkgState_Finished) ProtoReflect() protoreflect.Message {
	mi := &file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DkgState_Finished.ProtoReflect.Descriptor instead.
func (*DkgState_Finished) Descriptor() ([]byte, []int) {
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP(), []int{24, 2}
}

func (x *DkgState_Finished) GetRound_1Messages() []*DkgRound1 {
	if x != nil {
		return x.Round_1Messages
	}
	return nil
}

func (x *DkgState_Finished) GetRound_2Messages() []*DkgRound2 {
	if x != nil {
		return x.Round_2Messages
	}
	return nil
}

func (x *DkgState_Finished) GetAccountGroupInfo() *AccountGroupInfo {
	if x != nil {
		return x.AccountGroupInfo
	}
	return nil
}

var File_penumbra_narsil_ledger_v1alpha1_ledger_proto protoreflect.FileDescriptor

var file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDesc = []byte{
	0x0a, 0x2c, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x6e, 0x61, 0x72, 0x73, 0x69,
	0x6c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a,
	0x26, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x6b,
	0x65, 0x79, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x6b, 0x65, 0x79,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x34, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x27, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x64, 0x79, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x0b, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x32, 0x70,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a,
	0x70, 0x32, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x62,
	0x63, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x61, 0x62, 0x63, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb8, 0x01,
	0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x70, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x61, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x2d, 0x0a, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x70, 0x70, 0x5f, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x41, 0x70, 0x70, 0x48, 0x61, 0x73, 0x68, 0x22, 0x28, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x22, 0x24, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x4b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x27, 0x0a, 0x0f, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x22, 0x20, 0x0a, 0x08, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x22, 0x2d, 0x0a, 0x15, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x22, 0xa5, 0x02, 0x0a, 0x10, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79,
	0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x51, 0x0a,
	0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61,
	0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e,
	0x73, 0x75, 0x73, 0x4b, 0x65, 0x79, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22, 0x76, 0x0a, 0x0d, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x53, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73,
	0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x73,
	0x69, 0x67, 0x22, 0x79, 0x0a, 0x0b, 0x47, 0x65, 0x6e, 0x65, 0x73, 0x69, 0x73, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x4c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0xb9, 0x01,
	0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x55, 0x0a, 0x10, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x69,
	0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6b, 0x65, 0x79,
	0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x56,
	0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x52, 0x0e, 0x66, 0x75, 0x6c, 0x6c, 0x56,
	0x69, 0x65, 0x77, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x4e, 0x0a, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69,
	0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0xe0, 0x01, 0x0a, 0x09, 0x53, 0x68,
	0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x67, 0x0a,
	0x16, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x6b, 0x65,
	0x79, 0x73, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x70, 0x65, 0x6e,
	0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79,
	0x52, 0x14, 0x73, 0x68, 0x61, 0x72, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x54, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x52,
	0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4b, 0x65, 0x79, 0x22, 0x63, 0x0a, 0x0c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x53, 0x0a, 0x0b,
	0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x2e, 0x63, 0x68, 0x61, 0x69,
	0x6e, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x48, 0x61, 0x73, 0x68, 0x52, 0x0a, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x48, 0x61, 0x73,
	0x68, 0x22, 0x8a, 0x01, 0x0a, 0x0d, 0x43, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x52, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x65, 0x6d,
	0x6f, 0x6e, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0d, 0x63, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0xa7,
	0x01, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12, 0x4a, 0x0a, 0x08,
	0x63, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x08,
	0x63, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x12, 0x4e, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x22, 0xc2, 0x03, 0x0a, 0x0f, 0x43, 0x65, 0x72,
	0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x54, 0x0a, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x43, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x48, 0x00, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x67, 0x0a, 0x0e, 0x62, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x65, 0x72,
	0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x42, 0x61, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x61,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x58, 0x0a, 0x09, 0x62,
	0x61, 0x64, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x43, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x2e, 0x42, 0x61, 0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x48, 0x00, 0x52, 0x08, 0x62, 0x61, 0x64,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x57, 0x0a, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x65, 0x6d, 0x6f,
	0x6e, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x1a, 0x09,
	0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x1a, 0x0f, 0x0a, 0x0d, 0x42, 0x61, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0a, 0x0a, 0x08, 0x42, 0x61,
	0x64, 0x53, 0x68, 0x61, 0x72, 0x65, 0x1a, 0x0a, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x65, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x22, 0xae, 0x0c,
	0x0a, 0x0d, 0x43, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x52, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73,
	0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x2e, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x66, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x72,
	0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43,
	0x65, 0x72, 0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x12, 0x66, 0x0a, 0x0f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x32, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x32, 0x12, 0x55, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x6e, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x06, 0x66, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x65, 0x72,
	0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x1a, 0x09, 0x0a, 0x07, 0x50,
	0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0xb1, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0xfa, 0x01, 0x0a, 0x0d, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x12, 0x48, 0x0a, 0x09,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69,
	0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x47,
	0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52,
	0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x1a, 0xc9, 0x02, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12, 0x56,
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e,
	0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12,
	0x52, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0xbf, 0x02, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x48,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72,
	0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x12, 0x56, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x47, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73,
	0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x52, 0x06, 0x73, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x07, 0x66, 0x61, 0x69,
	0x6c, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x65, 0x72,
	0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x07, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xd9,
	0x03, 0x0a, 0x0c, 0x4e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12,
	0x5a, 0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x64, 0x79, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x61, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x69, 0x0a, 0x14, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x13, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x0f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x69, 0x7a, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69,
	0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x6b, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f,
	0x31, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d,
	0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x6b, 0x67, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x31, 0x48, 0x00, 0x52, 0x09, 0x64, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64,
	0x31, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x6b, 0x67, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x32,
	0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x32, 0x48, 0x00, 0x52, 0x09, 0x64, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32,
	0x42, 0x08, 0x0a, 0x06, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x2b, 0x0a, 0x0f, 0x46, 0x72,
	0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x2f, 0x0a, 0x13, 0x46, 0x72, 0x6f, 0x73, 0x74,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xb8, 0x03, 0x0a, 0x13, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x4d, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39,
	0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12,
	0x48, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69,
	0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x09, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x1a,
	0xb1, 0x01, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x65, 0x72, 0x65,
	0x6d, 0x6f, 0x6e, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73,
	0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x52, 0x0d, 0x63, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x52, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0xae, 0x03, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x65,
	0x53, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x12, 0x48, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73,
	0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x09, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x1a, 0xb1, 0x01, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x55, 0x0a, 0x0e, 0x63, 0x65, 0x72,
	0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72,
	0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x43, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x0d, 0x63, 0x65, 0x72, 0x65, 0x6d, 0x6f, 0x6e, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x12, 0x52, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x09, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x31, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x48, 0x0a, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53,
	0x68, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x06,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x54, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xc5, 0x01, 0x0a,
	0x09, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x12, 0x54,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72,
	0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x22, 0xc9, 0x04, 0x0a, 0x08, 0x44, 0x6b, 0x67, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x1a, 0x65, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e,
	0x64, 0x31, 0x12, 0x54, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x31, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44,
	0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0xbb, 0x01, 0x0a, 0x0d, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x12, 0x54, 0x0a, 0x10, 0x72, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x31, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e,
	0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31,
	0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73,
	0x12, 0x54, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e,
	0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x6b, 0x67,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x1a, 0x97, 0x02, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x10, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x31, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x54, 0x0a, 0x10, 0x72, 0x6f, 0x75,
	0x6e, 0x64, 0x5f, 0x32, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e,
	0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x6b, 0x67, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x52,
	0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12,
	0x5f, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x10,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x6e, 0x66, 0x6f,
	0x32, 0x74, 0x0a, 0x0d, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x63, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x2e, 0x70, 0x65, 0x6e, 0x75,
	0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0xb0, 0x02, 0x0a, 0x23, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2e, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0b,
	0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5d, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62,
	0x72, 0x61, 0x2d, 0x7a, 0x6f, 0x6e, 0x65, 0x2f, 0x70, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x65,
	0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2f, 0x6e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x2f, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x50,
	0x4e, 0x4c, 0xaa, 0x02, 0x1f, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x2e, 0x4e, 0x61,
	0x72, 0x73, 0x69, 0x6c, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x56, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1f, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x5c,
	0x4e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x5c, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5c, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x2b, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72,
	0x61, 0x5c, 0x4e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x5c, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5c,
	0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x22, 0x50, 0x65, 0x6e, 0x75, 0x6d, 0x62, 0x72, 0x61, 0x3a,
	0x3a, 0x4e, 0x61, 0x72, 0x73, 0x69, 0x6c, 0x3a, 0x3a, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x3a,
	0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescOnce sync.Once
	file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescData = file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDesc
)

func file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescGZIP() []byte {
	file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescOnce.Do(func() {
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescData = protoimpl.X.CompressGZIP(file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescData)
	})
	return file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDescData
}

var file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_penumbra_narsil_ledger_v1alpha1_ledger_proto_goTypes = []interface{}{
	(*InfoRequest)(nil),                   // 0: penumbra.narsil.ledger.v1alpha1.InfoRequest
	(*InfoResponse)(nil),                  // 1: penumbra.narsil.ledger.v1alpha1.InfoResponse
	(*ShardIdentityKey)(nil),              // 2: penumbra.narsil.ledger.v1alpha1.ShardIdentityKey
	(*ConsensusKey)(nil),                  // 3: penumbra.narsil.ledger.v1alpha1.ConsensusKey
	(*ShardMessageKey)(nil),               // 4: penumbra.narsil.ledger.v1alpha1.ShardMessageKey
	(*ShardKey)(nil),                      // 5: penumbra.narsil.ledger.v1alpha1.ShardKey
	(*ShardMessageSignature)(nil),         // 6: penumbra.narsil.ledger.v1alpha1.ShardMessageSignature
	(*ShardDescription)(nil),              // 7: penumbra.narsil.ledger.v1alpha1.ShardDescription
	(*ShardOperator)(nil),                 // 8: penumbra.narsil.ledger.v1alpha1.ShardOperator
	(*GenesisData)(nil),                   // 9: penumbra.narsil.ledger.v1alpha1.GenesisData
	(*AccountGroupInfo)(nil),              // 10: penumbra.narsil.ledger.v1alpha1.AccountGroupInfo
	(*ShardInfo)(nil),                     // 11: penumbra.narsil.ledger.v1alpha1.ShardInfo
	(*RequestIndex)(nil),                  // 12: penumbra.narsil.ledger.v1alpha1.RequestIndex
	(*CeremonyIndex)(nil),                 // 13: penumbra.narsil.ledger.v1alpha1.CeremonyIndex
	(*Committee)(nil),                     // 14: penumbra.narsil.ledger.v1alpha1.Committee
	(*CeremonyFailure)(nil),               // 15: penumbra.narsil.ledger.v1alpha1.CeremonyFailure
	(*CeremonyState)(nil),                 // 16: penumbra.narsil.ledger.v1alpha1.CeremonyState
	(*NarsilPacket)(nil),                  // 17: penumbra.narsil.ledger.v1alpha1.NarsilPacket
	(*FrostCommitment)(nil),               // 18: penumbra.narsil.ledger.v1alpha1.FrostCommitment
	(*FrostSignatureShare)(nil),           // 19: penumbra.narsil.ledger.v1alpha1.FrostSignatureShare
	(*AuthorizeCommitment)(nil),           // 20: penumbra.narsil.ledger.v1alpha1.AuthorizeCommitment
	(*AuthorizeShare)(nil),                // 21: penumbra.narsil.ledger.v1alpha1.AuthorizeShare
	(*DkgRound1)(nil),                     // 22: penumbra.narsil.ledger.v1alpha1.DkgRound1
	(*DkgRound2)(nil),                     // 23: penumbra.narsil.ledger.v1alpha1.DkgRound2
	(*DkgState)(nil),                      // 24: penumbra.narsil.ledger.v1alpha1.DkgState
	(*CeremonyFailure_Timeout)(nil),       // 25: penumbra.narsil.ledger.v1alpha1.CeremonyFailure.Timeout
	(*CeremonyFailure_BadCommitment)(nil), // 26: penumbra.narsil.ledger.v1alpha1.CeremonyFailure.BadCommitment
	(*CeremonyFailure_BadShare)(nil),      // 27: penumbra.narsil.ledger.v1alpha1.CeremonyFailure.BadShare
	(*CeremonyFailure_Canceled)(nil),      // 28: penumbra.narsil.ledger.v1alpha1.CeremonyFailure.Canceled
	(*CeremonyState_Pending)(nil),         // 29: penumbra.narsil.ledger.v1alpha1.CeremonyState.Pending
	(*CeremonyState_StartedRound1)(nil),   // 30: penumbra.narsil.ledger.v1alpha1.CeremonyState.StartedRound1
	(*CeremonyState_StartedRound2)(nil),   // 31: penumbra.narsil.ledger.v1alpha1.CeremonyState.StartedRound2
	(*CeremonyState_Finished)(nil),        // 32: penumbra.narsil.ledger.v1alpha1.CeremonyState.Finished
	(*CeremonyState_Failed)(nil),          // 33: penumbra.narsil.ledger.v1alpha1.CeremonyState.Failed
	(*AuthorizeCommitment_Body)(nil),      // 34: penumbra.narsil.ledger.v1alpha1.AuthorizeCommitment.Body
	(*AuthorizeShare_Body)(nil),           // 35: penumbra.narsil.ledger.v1alpha1.AuthorizeShare.Body
	(*DkgState_StartedRound1)(nil),        // 36: penumbra.narsil.ledger.v1alpha1.DkgState.StartedRound1
	(*DkgState_StartedRound2)(nil),        // 37: penumbra.narsil.ledger.v1alpha1.DkgState.StartedRound2
	(*DkgState_Finished)(nil),             // 38: penumbra.narsil.ledger.v1alpha1.DkgState.Finished
	(*v1alpha1.FullViewingKey)(nil),       // 39: penumbra.core.keys.v1alpha1.FullViewingKey
	(*v1alpha1.SpendVerificationKey)(nil), // 40: penumbra.core.keys.v1alpha1.SpendVerificationKey
	(*v1alpha11.EffectHash)(nil),          // 41: penumbra.core.component.chain.v1alpha1.EffectHash
	(*v1alpha12.AuthorizeRequest)(nil),    // 42: penumbra.custody.v1alpha1.AuthorizeRequest
	(*v1alpha13.AuthorizationData)(nil),   // 43: penumbra.core.transaction.v1alpha1.AuthorizationData
}
var file_penumbra_narsil_ledger_v1alpha1_ledger_proto_depIdxs = []int32{
	2,  // 0: penumbra.narsil.ledger.v1alpha1.ShardDescription.identity_key:type_name -> penumbra.narsil.ledger.v1alpha1.ShardIdentityKey
	4,  // 1: penumbra.narsil.ledger.v1alpha1.ShardDescription.message_key:type_name -> penumbra.narsil.ledger.v1alpha1.ShardMessageKey
	3,  // 2: penumbra.narsil.ledger.v1alpha1.ShardDescription.consensus_key:type_name -> penumbra.narsil.ledger.v1alpha1.ConsensusKey
	7,  // 3: penumbra.narsil.ledger.v1alpha1.ShardOperator.description:type_name -> penumbra.narsil.ledger.v1alpha1.ShardDescription
	8,  // 4: penumbra.narsil.ledger.v1alpha1.GenesisData.operators:type_name -> penumbra.narsil.ledger.v1alpha1.ShardOperator
	39, // 5: penumbra.narsil.ledger.v1alpha1.AccountGroupInfo.full_viewing_key:type_name -> penumbra.core.keys.v1alpha1.FullViewingKey
	11, // 6: penumbra.narsil.ledger.v1alpha1.AccountGroupInfo.participants:type_name -> penumbra.narsil.ledger.v1alpha1.ShardInfo
	40, // 7: penumbra.narsil.ledger.v1alpha1.ShardInfo.shard_verification_key:type_name -> penumbra.core.keys.v1alpha1.SpendVerificationKey
	2,  // 8: penumbra.narsil.ledger.v1alpha1.ShardInfo.identity_key:type_name -> penumbra.narsil.ledger.v1alpha1.ShardIdentityKey
	41, // 9: penumbra.narsil.ledger.v1alpha1.RequestIndex.effect_hash:type_name -> penumbra.core.component.chain.v1alpha1.EffectHash
	12, // 10: penumbra.narsil.ledger.v1alpha1.CeremonyIndex.request_index:type_name -> penumbra.narsil.ledger.v1alpha1.RequestIndex
	13, // 11: penumbra.narsil.ledger.v1alpha1.Committee.ceremony:type_name -> penumbra.narsil.ledger.v1alpha1.CeremonyIndex
	11, // 12: penumbra.narsil.ledger.v1alpha1.Committee.participants:type_name -> penumbra.narsil.ledger.v1alpha1.ShardInfo
	25, // 13: penumbra.narsil.ledger.v1alpha1.CeremonyFailure.timeout:type_name -> penumbra.narsil.ledger.v1alpha1.CeremonyFailure.Timeout
	26, // 14: penumbra.narsil.ledger.v1alpha1.CeremonyFailure.bad_commitment:type_name -> penumbra.narsil.ledger.v1alpha1.CeremonyFailure.BadCommitment
	27, // 15: penumbra.narsil.ledger.v1alpha1.CeremonyFailure.bad_share:type_name -> penumbra.narsil.ledger.v1alpha1.CeremonyFailure.BadShare
	28, // 16: penumbra.narsil.ledger.v1alpha1.CeremonyFailure.canceled:type_name -> penumbra.narsil.ledger.v1alpha1.CeremonyFailure.Canceled
	29, // 17: penumbra.narsil.ledger.v1alpha1.CeremonyState.pending:type_name -> penumbra.narsil.ledger.v1alpha1.CeremonyState.Pending
	30, // 18: penumbra.narsil.ledger.v1alpha1.CeremonyState.started_round_1:type_name -> penumbra.narsil.ledger.v1alpha1.CeremonyState.StartedRound1
	31, // 19: penumbra.narsil.ledger.v1alpha1.CeremonyState.started_round_2:type_name -> penumbra.narsil.ledger.v1alpha1.CeremonyState.StartedRound2
	32, // 20: penumbra.narsil.ledger.v1alpha1.CeremonyState.finished:type_name -> penumbra.narsil.ledger.v1alpha1.CeremonyState.Finished
	33, // 21: penumbra.narsil.ledger.v1alpha1.CeremonyState.failed:type_name -> penumbra.narsil.ledger.v1alpha1.CeremonyState.Failed
	42, // 22: penumbra.narsil.ledger.v1alpha1.NarsilPacket.authorize_request:type_name -> penumbra.custody.v1alpha1.AuthorizeRequest
	20, // 23: penumbra.narsil.ledger.v1alpha1.NarsilPacket.authorize_commitment:type_name -> penumbra.narsil.ledger.v1alpha1.AuthorizeCommitment
	21, // 24: penumbra.narsil.ledger.v1alpha1.NarsilPacket.authorize_share:type_name -> penumbra.narsil.ledger.v1alpha1.AuthorizeShare
	22, // 25: penumbra.narsil.ledger.v1alpha1.NarsilPacket.dkg_round_1:type_name -> penumbra.narsil.ledger.v1alpha1.DkgRound1
	23, // 26: penumbra.narsil.ledger.v1alpha1.NarsilPacket.dkg_round_2:type_name -> penumbra.narsil.ledger.v1alpha1.DkgRound2
	34, // 27: penumbra.narsil.ledger.v1alpha1.AuthorizeCommitment.body:type_name -> penumbra.narsil.ledger.v1alpha1.AuthorizeCommitment.Body
	4,  // 28: penumbra.narsil.ledger.v1alpha1.AuthorizeCommitment.signer:type_name -> penumbra.narsil.ledger.v1alpha1.ShardMessageKey
	6,  // 29: penumbra.narsil.ledger.v1alpha1.AuthorizeCommitment.signature:type_name -> penumbra.narsil.ledger.v1alpha1.ShardMessageSignature
	35, // 30: penumbra.narsil.ledger.v1alpha1.AuthorizeShare.body:type_name -> penumbra.narsil.ledger.v1alpha1.AuthorizeShare.Body
	4,  // 31: penumbra.narsil.ledger.v1alpha1.AuthorizeShare.signer:type_name -> penumbra.narsil.ledger.v1alpha1.ShardMessageKey
	6,  // 32: penumbra.narsil.ledger.v1alpha1.AuthorizeShare.signature:type_name -> penumbra.narsil.ledger.v1alpha1.ShardMessageSignature
	4,  // 33: penumbra.narsil.ledger.v1alpha1.DkgRound1.signer:type_name -> penumbra.narsil.ledger.v1alpha1.ShardMessageKey
	6,  // 34: penumbra.narsil.ledger.v1alpha1.DkgRound1.signature:type_name -> penumbra.narsil.ledger.v1alpha1.ShardMessageSignature
	4,  // 35: penumbra.narsil.ledger.v1alpha1.DkgRound2.signer:type_name -> penumbra.narsil.ledger.v1alpha1.ShardMessageKey
	6,  // 36: penumbra.narsil.ledger.v1alpha1.DkgRound2.signature:type_name -> penumbra.narsil.ledger.v1alpha1.ShardMessageSignature
	14, // 37: penumbra.narsil.ledger.v1alpha1.CeremonyState.StartedRound1.committee:type_name -> penumbra.narsil.ledger.v1alpha1.Committee
	20, // 38: penumbra.narsil.ledger.v1alpha1.CeremonyState.StartedRound1.commitments:type_name -> penumbra.narsil.ledger.v1alpha1.AuthorizeCommitment
	14, // 39: penumbra.narsil.ledger.v1alpha1.CeremonyState.StartedRound2.committee:type_name -> penumbra.narsil.ledger.v1alpha1.Committee
	20, // 40: penumbra.narsil.ledger.v1alpha1.CeremonyState.StartedRound2.commitments:type_name -> penumbra.narsil.ledger.v1alpha1.AuthorizeCommitment
	21, // 41: penumbra.narsil.ledger.v1alpha1.CeremonyState.StartedRound2.shares:type_name -> penumbra.narsil.ledger.v1alpha1.AuthorizeShare
	14, // 42: penumbra.narsil.ledger.v1alpha1.CeremonyState.Finished.committee:type_name -> penumbra.narsil.ledger.v1alpha1.Committee
	20, // 43: penumbra.narsil.ledger.v1alpha1.CeremonyState.Finished.commitments:type_name -> penumbra.narsil.ledger.v1alpha1.AuthorizeCommitment
	21, // 44: penumbra.narsil.ledger.v1alpha1.CeremonyState.Finished.shares:type_name -> penumbra.narsil.ledger.v1alpha1.AuthorizeShare
	43, // 45: penumbra.narsil.ledger.v1alpha1.CeremonyState.Finished.auth_data:type_name -> penumbra.core.transaction.v1alpha1.AuthorizationData
	14, // 46: penumbra.narsil.ledger.v1alpha1.CeremonyState.Failed.committee:type_name -> penumbra.narsil.ledger.v1alpha1.Committee
	20, // 47: penumbra.narsil.ledger.v1alpha1.CeremonyState.Failed.commitments:type_name -> penumbra.narsil.ledger.v1alpha1.AuthorizeCommitment
	21, // 48: penumbra.narsil.ledger.v1alpha1.CeremonyState.Failed.shares:type_name -> penumbra.narsil.ledger.v1alpha1.AuthorizeShare
	15, // 49: penumbra.narsil.ledger.v1alpha1.CeremonyState.Failed.failure:type_name -> penumbra.narsil.ledger.v1alpha1.CeremonyFailure
	13, // 50: penumbra.narsil.ledger.v1alpha1.AuthorizeCommitment.Body.ceremony_index:type_name -> penumbra.narsil.ledger.v1alpha1.CeremonyIndex
	18, // 51: penumbra.narsil.ledger.v1alpha1.AuthorizeCommitment.Body.commitments:type_name -> penumbra.narsil.ledger.v1alpha1.FrostCommitment
	13, // 52: penumbra.narsil.ledger.v1alpha1.AuthorizeShare.Body.ceremony_index:type_name -> penumbra.narsil.ledger.v1alpha1.CeremonyIndex
	18, // 53: penumbra.narsil.ledger.v1alpha1.AuthorizeShare.Body.commitments:type_name -> penumbra.narsil.ledger.v1alpha1.FrostCommitment
	22, // 54: penumbra.narsil.ledger.v1alpha1.DkgState.StartedRound1.round_1_messages:type_name -> penumbra.narsil.ledger.v1alpha1.DkgRound1
	22, // 55: penumbra.narsil.ledger.v1alpha1.DkgState.StartedRound2.round_1_messages:type_name -> penumbra.narsil.ledger.v1alpha1.DkgRound1
	23, // 56: penumbra.narsil.ledger.v1alpha1.DkgState.StartedRound2.round_2_messages:type_name -> penumbra.narsil.ledger.v1alpha1.DkgRound2
	22, // 57: penumbra.narsil.ledger.v1alpha1.DkgState.Finished.round_1_messages:type_name -> penumbra.narsil.ledger.v1alpha1.DkgRound1
	23, // 58: penumbra.narsil.ledger.v1alpha1.DkgState.Finished.round_2_messages:type_name -> penumbra.narsil.ledger.v1alpha1.DkgRound2
	10, // 59: penumbra.narsil.ledger.v1alpha1.DkgState.Finished.account_group_info:type_name -> penumbra.narsil.ledger.v1alpha1.AccountGroupInfo
	0,  // 60: penumbra.narsil.ledger.v1alpha1.LedgerService.Info:input_type -> penumbra.narsil.ledger.v1alpha1.InfoRequest
	1,  // 61: penumbra.narsil.ledger.v1alpha1.LedgerService.Info:output_type -> penumbra.narsil.ledger.v1alpha1.InfoResponse
	61, // [61:62] is the sub-list for method output_type
	60, // [60:61] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_penumbra_narsil_ledger_v1alpha1_ledger_proto_init() }
func file_penumbra_narsil_ledger_v1alpha1_ledger_proto_init() {
	if File_penumbra_narsil_ledger_v1alpha1_ledger_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardIdentityKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsensusKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardMessageKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardMessageSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardDescription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardOperator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GenesisData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountGroupInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShardInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeremonyIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Committee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeremonyFailure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeremonyState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NarsilPacket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrostCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FrostSignatureShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DkgRound1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DkgRound2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DkgState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeremonyFailure_Timeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeremonyFailure_BadCommitment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeremonyFailure_BadShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeremonyFailure_Canceled); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeremonyState_Pending); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeremonyState_StartedRound1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeremonyState_StartedRound2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeremonyState_Finished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CeremonyState_Failed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeCommitment_Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuthorizeShare_Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DkgState_StartedRound1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DkgState_StartedRound2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DkgState_Finished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*CeremonyFailure_Timeout_)(nil),
		(*CeremonyFailure_BadCommitment_)(nil),
		(*CeremonyFailure_BadShare_)(nil),
		(*CeremonyFailure_Canceled_)(nil),
	}
	file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*CeremonyState_Pending_)(nil),
		(*CeremonyState_StartedRound_1)(nil),
		(*CeremonyState_StartedRound_2)(nil),
		(*CeremonyState_Finished_)(nil),
		(*CeremonyState_Failed_)(nil),
	}
	file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*NarsilPacket_AuthorizeRequest)(nil),
		(*NarsilPacket_AuthorizeCommitment)(nil),
		(*NarsilPacket_AuthorizeShare)(nil),
		(*NarsilPacket_DkgRound_1)(nil),
		(*NarsilPacket_DkgRound_2)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_penumbra_narsil_ledger_v1alpha1_ledger_proto_goTypes,
		DependencyIndexes: file_penumbra_narsil_ledger_v1alpha1_ledger_proto_depIdxs,
		MessageInfos:      file_penumbra_narsil_ledger_v1alpha1_ledger_proto_msgTypes,
	}.Build()
	File_penumbra_narsil_ledger_v1alpha1_ledger_proto = out.File
	file_penumbra_narsil_ledger_v1alpha1_ledger_proto_rawDesc = nil
	file_penumbra_narsil_ledger_v1alpha1_ledger_proto_goTypes = nil
	file_penumbra_narsil_ledger_v1alpha1_ledger_proto_depIdxs = nil
}
